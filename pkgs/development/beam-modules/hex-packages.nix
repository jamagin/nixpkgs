/* hex-packages.nix is an auto-generated file -- DO NOT EDIT! */

/* Unbuildable packages:


*/
{ stdenv, callPackage, overrides ? (self: super: {}) }:

let
  packages = self: rec {
    abnf_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "abnf";
            version = "0.0.1";
            src = fetchHex {
              pkg = "abnf";
              version = "0.0.1";
              sha256 =
                "81e263f061ba677bda3e0d7f8884730eb51c14d7bc6526647c46cce659f1b054";
            };

            meta = {
              description = ''ABNF parser for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vanstee/abnf";
            };
          }
      ) {};

    abnf = abnf_0_0_1;

    absinthe_0_5_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "absinthe";
            version = "0.5.2";
            src = fetchHex {
              pkg = "absinthe";
              version = "0.5.2";
              sha256 =
                "2b926ae2b61e0227caf437419d017bb146a9073a67e4e5fa5ed754f3b30994f6";
            };

            meta = {
              description = ''GraphQL for Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/CargoSense/absinthe";
            };
          }
      ) {};

    absinthe = absinthe_0_5_2;

    absinthe_plug_0_5_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, absinthe_0_5_2 }:
          buildMix {
            name = "absinthe_plug";
            version = "0.5.0";
            src = fetchHex {
              pkg = "absinthe_plug";
              version = "0.5.0";
              sha256 =
                "eaa22a2af708ee3c37217ad5fcf31210347bb7c0807f7c96cffb09b311326291";
            };
            beamDeps  = [ plug_1_1_1 absinthe_0_5_2 ];

            meta = {
              description = ''A plug for Absinthe, an experimental GraphQL
                            toolkit'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/CargoSense/absinthe_plug";
            };
          }
      ) {};

    absinthe_plug = absinthe_plug_0_5_0;

    access_token_extractor_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "access_token_extractor";
            version = "0.1.1";
            src = fetchHex {
              pkg = "access_token_extractor";
              version = "0.1.1";
              sha256 =
                "40f76799f8fbb5b03230b31d4d55c5a169e7c3ad82d776a9d87fe0c65c85396d";
            };
            beamDeps  = [ plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              longDescription = ''Simple Plug to extract access_token from
                                request and add it to private map in Plug.Conn
                                struct.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/rohanpujaris/access_token_extractor";
            };
          }
      ) {};

    access_token_extractor = access_token_extractor_0_1_1;

    active_0_9_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "active";
            version = "0.9.0";
            src = fetchHex {
              pkg = "active";
              version = "0.9.0";
              sha256 =
                "3ec6a0eda29137866674ddd56d44f6b0383fa3ec4480121639d2ef61b443ec28";
            };

            meta = {
              description = ''Erlang active reloader'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/active";
            };
          }
      ) {};

    active = active_0_9_0;

    adam7_0_4_0 = callPackage
      (
        {  buildMix, fetchHex, apex_0_3_7 }:
          buildMix {
            name = "adam7";
            version = "0.4.0";
            src = fetchHex {
              pkg = "adam7";
              version = "0.4.0";
              sha256 =
                "8b540817f2fa92ba4b198d42d1ee4af348ed1edf8bd02d69691e0d8bdbecdcee";
            };
            beamDeps  = [ apex_0_3_7 ];

            meta = {
              longDescription = ''Adam7 interlacing library for Elixir.
                                Primarily used for interlacing and
                                de-interlacing image data for PNGs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SenecaSystems/imagineer";
            };
          }
      ) {};

    adam7 = adam7_0_4_0;

    adap_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "adap";
            version = "0.0.1";
            src = fetchHex {
              pkg = "adap";
              version = "0.0.1";
              sha256 =
                "10679369764e2aa68560008c1f8bea40d5c715389e27e10b35b1ceda3fedadbb";
            };

            meta = {
              longDescription = '' Create a data stream across your information
                                systems to query, augment and transform data
                                according to Elixir matching rules. '';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/awetzel/adap";
            };
          }
      ) {};

    adap = adap_0_0_1;

    addict_0_1_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          phoenix_1_1_4,
          mailgun_0_0_2,
          ecto_0_16_0,
          cowboy_1_0_4,
          comeonin_1_6_0
        }:
          buildMix {
            name = "addict";
            version = "0.1.0";
            src = fetchHex {
              pkg = "addict";
              version = "0.1.0";
              sha256 =
                "8d8ca253ee73bae88c1eb756992fe4435aa4e7b58eddcd102097b13dc4af611a";
            };
            beamDeps  = [
                          phoenix_1_1_4
                          mailgun_0_0_2
                          ecto_0_16_0
                          cowboy_1_0_4
                          comeonin_1_6_0
                        ];

            meta = {
              longDescription = ''Addict allows you to manage users on your
                                Phoenix app easily. Register, login, logout,
                                recover password and password updating is
                                available off-the-shelf.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/trenpixster/addict";
            };
          }
      ) {};

    addict = addict_0_1_0;

    address_us_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "address_us";
            version = "0.1.1";
            src = fetchHex {
              pkg = "address_us";
              version = "0.1.1";
              sha256 =
                "e29c6dd33d2a2ebd97441bfdac3eb23fa6221cf5d3be8b8c66247ee61ce442c6";
            };

            meta = {
              description = ''Library for parsing US Addresses into their
                            individual parts.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/smashedtoatoms/address_us";
            };
          }
      ) {};

    address_us = address_us_0_1_1;

    aeacus_0_3_0 = callPackage
      (
        {  buildMix, fetchHex, comeonin_1_6_0 }:
          buildMix {
            name = "aeacus";
            version = "0.3.0";
            src = fetchHex {
              pkg = "aeacus";
              version = "0.3.0";
              sha256 =
                "3cc138cfc7c508cfd85afddd0881632dde2e663d222c9e3749fae8c80ebb2c0b";
            };
            beamDeps  = [ comeonin_1_6_0 ];

            meta = {
              longDescription = ''A simple, secure, and highly configurable
                                Elixir identity [username | email | id |
                                etc.]/password authentication module; Compatible
                                with Ecto.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/zmoshansky/aeacus";
            };
          }
      ) {};

    aeacus = aeacus_0_3_0;

    airbrake_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "airbrake";
            version = "0.1.0";
            src = fetchHex {
              pkg = "airbrake";
              version = "0.1.0";
              sha256 =
                "45d3e2da7f5a8793b9fd7752cbeaa988a848396f44b77d0265f3bed36182d901";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''An Elixir notifier to the Airbrake'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/romul/airbrake-elixir";
            };
          }
      ) {};

    airbrake = airbrake_0_1_0;

    airbrake_plug_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, airbrake_0_1_0 }:
          buildMix {
            name = "airbrake_plug";
            version = "0.1.1";
            src = fetchHex {
              pkg = "airbrake_plug";
              version = "0.1.1";
              sha256 =
                "2560f8b830e94b09788952165cd3053b47106d4afebf547dc370d7f307e804b9";
            };
            beamDeps  = [ airbrake_0_1_0 ];

            meta = {
              description = ''Airbrake reporter for Elixir`s Plug'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/romul/airbrake_plug";
            };
          }
      ) {};

    airbrake_plug = airbrake_plug_0_1_1;

    airbrakex_0_0_6 = callPackage
      (
        {  buildMix, fetchHex, poison_2_1_0, httpoison_0_8_1 }:
          buildMix {
            name = "airbrakex";
            version = "0.0.6";
            src = fetchHex {
              pkg = "airbrakex";
              version = "0.0.6";
              sha256 =
                "a8efc0a9a641a6c5ada2585ee5889291b74ded10977af7b1a4ac6bc445d166e8";
            };
            beamDeps  = [ poison_2_1_0 httpoison_0_8_1 ];

            meta = {
              description = ''Airbrake Elixir Notifier'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fazibear/airbrakex";
            };
          }
      ) {};

    airbrakex = airbrakex_0_0_6;

    alambic_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "alambic";
            version = "0.1.0";
            src = fetchHex {
              pkg = "alambic";
              version = "0.1.0";
              sha256 =
                "04dc4cc88d56539ec4006a84668186501be9be4c369f145af6a606bb63d97ce0";
            };

            meta = {
              longDescription = ''A collection of small elixir utilities.
                                Semaphore: quick way of limiting access to a
                                resource CountDown: quick way of counting fan
                                in/out events'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sdanzan/alambic";
            };
          }
      ) {};

    alambic = alambic_0_1_0;

    alchemy_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, uuid_1_1_3 }:
          buildMix {
            name = "alchemy";
            version = "0.0.1";
            src = fetchHex {
              pkg = "alchemy";
              version = "0.0.1";
              sha256 =
                "109ce3f83d596a6ab9a947f472516f87da7b0df823fe2d91e27bc6594a305c3d";
            };
            beamDeps  = [ uuid_1_1_3 ];

            meta = {
              description = ''Perform experiments in production'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keathley/alchemy";
            };
          }
      ) {};

    alchemy = alchemy_0_0_1;

    aleppo_0_9_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "aleppo";
            version = "0.9.0";
            src = fetchHex {
              pkg = "aleppo";
              version = "0.9.0";
              sha256 =
                "2f360631d64da53f40621714e157fd33805a95d0160d5c62fcfb3e132986ce71";
            };

            meta = {
              description = ''Aleppo: ALternative Erlang Pre-ProcessOr'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/ErlyORM/aleppo";
            };
          }
      ) {};

    aleppo = aleppo_0_9_0;

    alexa_plug_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "alexa_plug";
            version = "0.2.0";
            src = fetchHex {
              pkg = "alexa_plug";
              version = "0.2.0";
              sha256 =
                "a78f6fa5e3ba33ce0943f4cb96d6cfcc9b36637a4575314469c8a0d45fff40d0";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              longDescription = ''A simple set of plugs and utilities for
                                interfacing with the Amazon Echo and the Alexa
                                Skills Kit.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jordantdavis/alexa_plug";
            };
          }
      ) {};

    alexa_plug = alexa_plug_0_2_0;

    algae_0_9_1 = callPackage
      (
        {  buildMix, fetchHex, quark_1_0_2 }:
          buildMix {
            name = "algae";
            version = "0.9.1";
            src = fetchHex {
              pkg = "algae";
              version = "0.9.1";
              sha256 =
                "6d0877d508bd16098b4fb6d0549c5070b8217016b61ac8b220d9f35f3fb82391";
            };
            beamDeps  = [ quark_1_0_2 ];

            meta = {
              description = ''Bootstrapped algebraic data types for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/robot-overlord/algae";
            };
          }
      ) {};

    algae = algae_0_9_1;

    alice_0_1_2 = callPackage
      (
        {
          buildMix,
          fetchHex,
          slack_0_4_2,
          redix_0_3_4,
          poolboy_1_5_1,
          poison_2_0_1
        }:
          buildMix {
            name = "alice";
            version = "0.1.2";
            src = fetchHex {
              pkg = "alice";
              version = "0.1.2";
              sha256 =
                "badb6a115a8de88bab122b197214881cd64d2aaf48d8004013adbc6a024fb985";
            };
            beamDeps  = [ slack_0_4_2 redix_0_3_4 poolboy_1_5_1 poison_2_0_1
                      ];

            meta = {
              description = ''A Slack bot'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamzaninovich/alice";
            };
          }
      ) {};

    alice = alice_0_1_2;

    alice_against_humanity_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, alice_0_1_2 }:
          buildMix {
            name = "alice_against_humanity";
            version = "0.0.1";
            src = fetchHex {
              pkg = "alice_against_humanity";
              version = "0.0.1";
              sha256 =
                "8c9ddbd7b5db3a18740a354b2e385c7e652e820f4262279dfabee36de93c7816";
            };
            beamDeps  = [ alice_0_1_2 ];

            meta = {
              description = ''A handler for the Alice Slack bot. Play Cards
                            Against Humanity with Alice.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/adamzaninovich/alice_against_humanity";
            };
          }
      ) {};

    alice_against_humanity = alice_against_humanity_0_0_1;

    alice_google_images_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, alice_0_1_2 }:
          buildMix {
            name = "alice_google_images";
            version = "0.0.1";
            src = fetchHex {
              pkg = "alice_google_images";
              version = "0.0.1";
              sha256 =
                "ca276e382bde0a996866c7196ae454d3fdc0eb835398e8ece56c24b2c74736cc";
            };
            beamDeps  = [ alice_0_1_2 ];

            meta = {
              description = ''A handler for the Alice Slack bot. Get random
                            images from Google'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/adamzaninovich/alice_google_images";
            };
          }
      ) {};

    alice_google_images = alice_google_images_0_0_1;

    alice_karma_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, alice_0_1_2 }:
          buildMix {
            name = "alice_karma";
            version = "0.0.1";
            src = fetchHex {
              pkg = "alice_karma";
              version = "0.0.1";
              sha256 =
                "b2c1d8b0b7fe077b2a4bc1f24b01e872e24d4f6c82d50791ef6b3a57fc2af150";
            };
            beamDeps  = [ alice_0_1_2 ];

            meta = {
              longDescription = ''A handler for the Alice Slack bot. Allows
                                Alice to keep track of karma points for
                                arbitrary terms.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamzaninovich/alice_karma";
            };
          }
      ) {};

    alice_karma = alice_karma_0_0_1;

    alphonse_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, cipher_0_1_0 }:
          buildMix {
            name = "alphonse";
            version = "0.1.0";
            src = fetchHex {
              pkg = "alphonse";
              version = "0.1.0";
              sha256 =
                "01666afde723be7d84fcd2e55741c90fd8bc78a407001677deb0717f685b8d21";
            };
            beamDeps  = [ cipher_0_1_0 ];

            meta = {
              description = ''A module wrapper to encrypt and decrypt files
                            with aes-128-cbc'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrisenytc/alphonse";
            };
          }
      ) {};

    alphonse = alphonse_0_1_0;

    amazon_product_advertising_client_0_1_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          timex_1_0_0_rc4,
          sweet_xml_0_6_1,
          httpoison_0_8_1
        }:
          buildMix {
            name = "amazon_product_advertising_client";
            version = "0.1.0";
            src = fetchHex {
              pkg = "amazon_product_advertising_client";
              version = "0.1.0";
              sha256 =
                "b50ac32e0386060de093955662a8152bcb446c81c6fa5315ec0cf94586c69c24";
            };
            beamDeps  = [ timex_1_0_0_rc4 sweet_xml_0_6_1 httpoison_0_8_1 ];

            meta = {
              description = ''An Amazon Product Advertising API client for
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/zachgarwood/elixir-amazon-product-advertising-client";
            };
          }
      ) {};

    amazon_product_advertising_client =
      amazon_product_advertising_client_0_1_0;

    amnesia_0_2_1 = callPackage
      (
        {  buildMix, fetchHex, exquisite_0_1_6 }:
          buildMix {
            name = "amnesia";
            version = "0.2.1";
            src = fetchHex {
              pkg = "amnesia";
              version = "0.2.1";
              sha256 =
                "2d8b0dc6d2da2dcce7339cb2173dc3dad5a2f0865ce770f5f3ded796cd1d6e61";
            };
            beamDeps  = [ exquisite_0_1_6 ];

            meta = {
              description = ''mnesia wrapper for Elixir'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/amnesia";
            };
          }
      ) {};

    amnesia = amnesia_0_2_1;

    amqp_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, amqp_client_3_5_6 }:
          buildMix {
            name = "amqp";
            version = "0.1.1";
            src = fetchHex {
              pkg = "amqp";
              version = "0.1.1";
              sha256 =
                "64cf314b8953cef7c809cce8f21cb8574f1ca29226b007bbaab7ac9079c96912";
            };
            beamDeps  = [ amqp_client_3_5_6 ];

            meta = {
              description = ''Idiomatic Elixir client for RabbitMQ.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pma/amqp";
            };
          }
      ) {};

    amqp_0_1_4 = callPackage
      (
        {  buildMix, fetchHex, amqp_client_3_5_6 }:
          buildMix {
            name = "amqp";
            version = "0.1.4";
            src = fetchHex {
              pkg = "amqp";
              version = "0.1.4";
              sha256 =
                "a75d9b9283f306627b1d72a1ae326bb8c2910c5cd8198fa036e575b74b340ef4";
            };
            beamDeps  = [ amqp_client_3_5_6 ];

            meta = {
              description = ''Idiomatic Elixir client for RabbitMQ.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pma/amqp";
            };
          }
      ) {};

    amqp = amqp_0_1_4;

    amqp_client_3_5_6 = callPackage
      (
        {  buildRebar3, fetchHex, rabbit_common_3_5_6 }:
          buildRebar3 {
            name = "amqp_client";
            version = "3.5.6";
            src = fetchHex {
              pkg = "amqp_client";
              version = "3.5.6";
              sha256 =
                "3dc10a5ba146fd737502d407a1afee0c460b4477d66ca361240985f412a2e9a3";
            };

            beamDeps  = [ rabbit_common_3_5_6 ];

            meta = {
              description = ''Erlang RabbitMQ/AMQP client.'';
              license = stdenv.lib.licenses.mpl11;
              homepage = "https://github.com/jbrisbin/amqp_client";
            };
          }
      ) {};

    amqp_client = amqp_client_3_5_6;

    amrita_0_4_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "amrita";
            version = "0.4.0";
            src = fetchHex {
              pkg = "amrita";
              version = "0.4.0";
              sha256 =
                "8d3e642e665f9634aa44463ed6964ccf05e251c81ef92aaa9eacce2e9be959ad";
            };

            meta = {
              description = ''A polite, well mannered and thoroughly upstanding
                            testing framework for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://amrita.io";
            };
          }
      ) {};

    amrita = amrita_0_4_0;

    anaphora_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "anaphora";
            version = "0.1.1";
            src = fetchHex {
              pkg = "anaphora";
              version = "0.1.1";
              sha256 =
                "c43d66532152b05caee2cfca06ae1b86bd297c2e67ca358ecdcdc94da57ade83";
            };

            meta = {
              description = ''The anaphoric macro collection for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sviridov/anaphora-elixir";
            };
          }
      ) {};

    anaphora = anaphora_0_1_1;

    anubis_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "anubis";
            version = "0.1.0";
            src = fetchHex {
              pkg = "anubis";
              version = "0.1.0";
              sha256 =
                "38329609a08261ba50b8ef2cfffa3bc4926b5412f8683a9322e59cf953779aab";
            };

            meta = {
              description = '' Anubis is a framework for building command line
                            applications. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bennyhallett/anubis";
            };
          }
      ) {};

    anubis_0_3_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "anubis";
            version = "0.3.0";
            src = fetchHex {
              pkg = "anubis";
              version = "0.3.0";
              sha256 =
                "556039ca0e045116e3a2f71b15e7d884122e6b7596fede05d022d28412df5ae2";
            };

            meta = {
              description = '' Anubis is a framework for building command line
                            applications. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bennyhallett/anubis";
            };
          }
      ) {};

    anubis = anubis_0_3_0;

    apache_passwd_md5_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "apache_passwd_md5";
            version = "1.0.0";
            src = fetchHex {
              pkg = "apache_passwd_md5";
              version = "1.0.0";
              sha256 =
                "2ffc49fe46aadcd21248aacb4a9c723c8d8a0304747f8cf8e6089e97404f59f1";
            };

            meta = {
              longDescription = ''Provides Apache/APR style password hashing.
                                Useful for generating or authenticating against
                                MD5 htpasswd passwords. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kevinmontuori/Apache.PasswdMD5";
            };
          }
      ) {};

    apache_passwd_md5 = apache_passwd_md5_1_0_0;

    apex_0_3_7 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "apex";
            version = "0.3.7";
            src = fetchHex {
              pkg = "apex";
              version = "0.3.7";
              sha256 =
                "a1c8313e9c909ff2489f004b3514430293b1aafb81569b93a1822d486f56080d";
            };

            meta = {
              description = ''Elixir clone of Ruby`s awesome_print gem'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bjro/apex";
            };
          }
      ) {};

    apex = apex_0_3_7;

    apix_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "apix";
            version = "0.1.0";
            src = fetchHex {
              pkg = "apix";
              version = "0.1.0";
              sha256 =
                "d1d809cf41731e39a6c23e02fb41c9375bf04db35c8ce595c99c03eea694f30e";
            };

            meta = {
              longDescription = ''Simple convention and DSL for transformation
                                of elixir functions to a documented and ready
                                for validation API.'';

              homepage = "https://github.com/liveforeverx/apix";
            };
          }
      ) {};

    apix = apix_0_1_0;

    apns_0_0_11 = callPackage
      (
        {  buildMix, fetchHex, poolboy_1_5_1, poison_1_5_2 }:
          buildMix {
            name = "apns";
            version = "0.0.11";
            src = fetchHex {
              pkg = "apns";
              version = "0.0.11";
              sha256 =
                "03258b65f3225f47d3f2c23b087f96b904e9f84b5be242e66c0dbfb54c728011";
            };
            beamDeps  = [ poolboy_1_5_1 poison_1_5_2 ];

            meta = {
              description = ''APNS (Apple Push Notification Service) library
                            for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chvanikoff/apns4ex";
            };
          }
      ) {};

    apns = apns_0_0_11;

    apostle_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, poison_1_4_0, httpoison_0_7_5 }:
          buildMix {
            name = "apostle";
            version = "0.0.3";
            src = fetchHex {
              pkg = "apostle";
              version = "0.0.3";
              sha256 =
                "3bb6b358236bbf730df69fa775f230355235a7e24dae73a9f17e4237c3fdb583";
            };
            beamDeps  = [ poison_1_4_0 httpoison_0_7_5 ];

            meta = {
              description = ''Elixir client for Apostle.io.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamesotron/apostle-elixir";
            };
          }
      ) {};

    apostle = apostle_0_0_3;

    ar2ecto_0_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ar2ecto";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ar2ecto";
              version = "0.1.2";
              sha256 =
                "a32322d39f1c0cff335b05b5c2252e531091565c3cf754811087edd2e115a718";
            };

            meta = {
              description = ''Ar2ecto is a set of mix tasks to help you migrate
                            from ActiveRecord to Ecto.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/aforward/ar2ecto";
            };
          }
      ) {};

    ar2ecto = ar2ecto_0_1_2;

    arc_0_3_0 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, ex_aws_0_4_17 }:
          buildMix {
            name = "arc";
            version = "0.3.0";
            src = fetchHex {
              pkg = "arc";
              version = "0.3.0";
              sha256 =
                "cc0bb4e31e9b4eccb164959bfc4f438390d5ddaed5762c49761a69d7e2f75e48";
            };
            beamDeps  = [ httpoison_0_8_1 ex_aws_0_4_17 ];

            meta = {
              description = ''Flexible file upload and attachment library for
                            Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/stavro/arc";
            };
          }
      ) {};

    arc = arc_0_3_0;

    arc_ecto_0_3_2 = callPackage
      (
        {  buildMix, fetchHex, ecto_2_0_0_beta_0, arc_0_3_0 }:
          buildMix {
            name = "arc_ecto";
            version = "0.3.2";
            src = fetchHex {
              pkg = "arc_ecto";
              version = "0.3.2";
              sha256 =
                "92cb9e81eb75a1a9fdb4f4fc8e83714b9ee67e3ddb96db9d53c46e7002bf7e8d";
            };
            beamDeps  = [ ecto_2_0_0_beta_0 arc_0_3_0 ];

            meta = {
              description = ''An integration with Arc and Ecto.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/stavro/arc_ecto";
            };
          }
      ) {};

    arc_ecto = arc_ecto_0_3_2;

    argent_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "argent";
            version = "0.0.1";
            src = fetchHex {
              pkg = "argent";
              version = "0.0.1";
              sha256 =
                "dde0920308efca2c8dd9681057e5196f625b53ed8dff86a27242807c3653d645";
            };

            meta = {
              description = ''A currency management library for elixir.'';

            };
          }
      ) {};

    argent = argent_0_0_1;

    argument_parser_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "argument_parser";
            version = "0.1.1";
            src = fetchHex {
              pkg = "argument_parser";
              version = "0.1.1";
              sha256 =
                "beebcf7216bce18d953a832209ec0e9a3b669f108bf49c09f964060f0a10cb85";
            };

            meta = {
              description = ''More powerful argument parser for creating nice
                            scripts'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jisaacstone/ex_argument_parser";
            };
          }
      ) {};

    argument_parser = argument_parser_0_1_1;

    array_1_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "array";
            version = "1.0.1";
            src = fetchHex {
              pkg = "array";
              version = "1.0.1";
              sha256 =
                "626ac1383566dadee3a10357cd6d192151c6d604ee3266809daf0da6b5e33bbb";
            };

            meta = {
              description = ''An elixir wrapper library for Erlang`s array.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/takscape/elixir-array";
            };
          }
      ) {};

    array = array_1_0_1;

    artifact_0_1_0 = callPackage
      (
        {
          buildMix, fetchHex, porcelain_2_0_1, poolboy_1_5_1, plug_1_1_1
        }:
          buildMix {
            name = "artifact";
            version = "0.1.0";
            src = fetchHex {
              pkg = "artifact";
              version = "0.1.0";
              sha256 =
                "1b03c29afa283429fbd158ce70345b0612a6bc87b743164ddc5b86213b42d9f5";
            };
            beamDeps  = [ porcelain_2_0_1 poolboy_1_5_1 plug_1_1_1 ];

            meta = {
              description = ''File upload and on-the-fly processing for
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/doomspork/artifact";
            };
          }
      ) {};

    artifact = artifact_0_1_0;

    aruspex_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, zipper_tree_0_1_1, exyz_1_0_0 }:
          buildMix {
            name = "aruspex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "aruspex";
              version = "0.1.0";
              sha256 =
                "2effd16e1081a7af2e5ade9c58cdf4c4d90e2095749ccf733332be2924a6d771";
            };
            beamDeps  = [ zipper_tree_0_1_1 exyz_1_0_0 ];

            meta = {
              description = ''A configurable constraint solver with an API
                            based on JSR 331.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://www.github.com/dkendal/aruspex";
            };
          }
      ) {};

    aruspex = aruspex_0_1_0;

    asanaficator_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_7_5, exjsx_3_2_0 }:
          buildMix {
            name = "asanaficator";
            version = "0.0.1";
            src = fetchHex {
              pkg = "asanaficator";
              version = "0.0.1";
              sha256 =
                "891ca378a0b83d7018c10073ab14f35930186098d777e24550fff84a9683bfa3";
            };
            beamDeps  = [ httpoison_0_7_5 exjsx_3_2_0 ];

            meta = {
              description = ''Simple Elixir wrapper for the Asana API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/trenpixster/asanaficator";
            };
          }
      ) {};

    asanaficator = asanaficator_0_0_1;

    ashes_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ashes";
            version = "0.0.3";
            src = fetchHex {
              pkg = "ashes";
              version = "0.0.3";
              sha256 =
                "2178ab8c0fa1cf53b6d6152773ae79ca6100c80861d59e55e5fa06c5979b042b";
            };

            meta = {
              description = ''A code generation tool for the phoenix web
                            framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nickgartmann/ashes";
            };
          }
      ) {};

    ashes = ashes_0_0_3;

    assembla_api_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "assembla_api";
            version = "0.1.0";
            src = fetchHex {
              pkg = "assembla_api";
              version = "0.1.0";
              sha256 =
                "b4a3898de536e4820702c0f119993fd2804e91e2525d1e7eba57d8744983ef24";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Assembla API client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Assembla/ex_assembla_api";
            };
          }
      ) {};

    assembla_api = assembla_api_0_1_0;

    assert_diff_0_0_5 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "assert_diff";
            version = "0.0.5";
            src = fetchHex {
              pkg = "assert_diff";
              version = "0.0.5";
              sha256 =
                "ad53a2819c33d39ad2f71404a964625691e9d6bf3d63dbc28442acda71109426";
            };

            meta = {
              description = ''assert_diff which fallbacks to git diff'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ske77/assert_diff";
            };
          }
      ) {};

    assert_diff = assert_diff_0_0_5;

    atlas_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "atlas";
            version = "0.2.0";
            src = fetchHex {
              pkg = "atlas";
              version = "0.2.0";
              sha256 =
                "1c887e4a6224f3189a92e4e4684a2623161a70c7fbd0fd7db79233d5d2f6facf";
            };

            meta = {
              description = ''Object Relational Mapper for Elixir '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrismccord/atlas";
            };
          }
      ) {};

    atlas = atlas_0_2_0;

    authentic_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "authentic";
            version = "0.0.1";
            src = fetchHex {
              pkg = "authentic";
              version = "0.0.1";
              sha256 =
                "2fba6e1efde9fef4866d17499907811a3957ded8c07866c7b34474f0f0d59e29";
            };

            meta = {
              description = ''Auth for Phoenix'';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    authentic = authentic_0_0_1;

    auto_doc_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, plug_1_1_1 }:
          buildMix {
            name = "auto_doc";
            version = "0.0.2";
            src = fetchHex {
              pkg = "auto_doc";
              version = "0.0.2";
              sha256 =
                "9c4b30c526e59f63173fe2f0d0c360ac678f1e7a11adcf209dfc843a3e63e6f7";
            };
            beamDeps  = [ poison_1_5_2 plug_1_1_1 ];

            meta = {
              description = ''A package that will create REST API docs based on
                            your ExUnit tests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meatherly/auto_doc";
            };
          }
      ) {};

    auto_doc = auto_doc_0_0_2;

    autobots_license_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "autobots_license";
            version = "0.1.0";
            src = fetchHex {
              pkg = "autobots_license";
              version = "0.1.0";
              sha256 =
                "7cfa258ce5eff01018dfd6faf509b430d03770fb733c1b10217b9e52770014b3";
            };
            beamDeps  = [ plug_1_1_1 cowboy_1_0_4 ];

            meta = {    };
          }
      ) {};

    autobots_license = autobots_license_0_1_0;

    avex_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "avex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "avex";
              version = "0.2.0";
              sha256 =
                "e63970026cc566e9aa9c24c261f43843a7553835d2009b16e838217644ded815";
            };

            meta = {
              description = ''Awesome validations for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jonhkr/avex";
            };
          }
      ) {};

    avex = avex_0_2_0;

    aws_0_0_8 = callPackage
      (
        {
          buildMix, fetchHex, timex_1_0_1, poison_1_5_2, httpoison_0_8_1
        }:
          buildMix {
            name = "aws";
            version = "0.0.8";
            src = fetchHex {
              pkg = "aws";
              version = "0.0.8";
              sha256 =
                "4cd03efff629c01847ec82777ba1af2a8543fde288fe48ab36d9b8aa66ba7e9f";
            };
            beamDeps  = [ timex_1_0_1 poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''AWS clients for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jkakar/aws-elixir";
            };
          }
      ) {};

    aws = aws_0_0_8;

    aws_auth_0_2_5 = callPackage
      (
        {  buildMix, fetchHex, timex_1_0_1 }:
          buildMix {
            name = "aws_auth";
            version = "0.2.5";
            src = fetchHex {
              pkg = "aws_auth";
              version = "0.2.5";
              sha256 =
                "646f1f42652adfb329b5eedde28ddda516c6d02dce45932108b85e2d8bd91b0a";
            };
            beamDeps  = [ timex_1_0_1 ];

            meta = {
              description = ''AWS Signature Version 4 Signing Library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bryanjos/aws_auth";
            };
          }
      ) {};

    aws_auth = aws_auth_0_2_5;

    aws_erlang_0_1_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          jsx_2_8_0,
          hackney_1_4_8,
          erlware_commons_0_18_0
        }:
          buildMix {
            name = "aws_erlang";
            version = "0.1.0";
            src = fetchHex {
              pkg = "aws_erlang";
              version = "0.1.0";
              sha256 =
                "274e5232cda0ae883ffd813eb172dc0c00134ee04b3deaad1f34e1d4b42b282e";
            };
            beamDeps  = [ jsx_2_8_0 hackney_1_4_8 erlware_commons_0_18_0 ];

            meta = {
              description = ''aws clients for erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jkakar/aws-erlang";
            };
          }
      ) {};

    aws_erlang = aws_erlang_0_1_0;

    aws_http_0_2_4 = callPackage
      (
        {  buildRebar3, fetchHex, lhttpc_1_3_0, barrel_jiffy_0_14_4 }:
          buildRebar3 {
            name = "aws_http";
            version = "0.2.4";
            src = fetchHex {
              pkg = "aws_http";
              version = "0.2.4";
              sha256 =
                "96065da0d348a8e47e01531cfa720615e15a21c1bd4e5c82decf56026cde128f";
            };

            beamDeps  = [ lhttpc_1_3_0 barrel_jiffy_0_14_4 ];

            meta = {
              description = ''Amazon AWS HTTP helpers'';

              homepage = "https://github.com/anha0825/erl_aws_http";
            };
          }
      ) {};

    aws_http = aws_http_0_2_4;

    b2_0_0_6 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "b2";
            version = "0.0.6";
            src = fetchHex {
              pkg = "b2";
              version = "0.0.6";
              sha256 =
                "f8b33d1ec36576dfbca3f2f4c5fad1a9a227207d1ef63b3a388778e8fad3333a";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Elixir B2 cloud API wrapper'';

            };
          }
      ) {};

    b2 = b2_0_0_6;

    backoff_1_1_3 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "backoff";
            version = "1.1.3";
            src = fetchHex {
              pkg = "backoff";
              version = "1.1.3";
              sha256 =
                "30cead738d20e4c8d36cd37857dd5e23aeba57cb868bf64766d47d371422bdff";
            };

            meta = {
              description = ''Exponential backoffs library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ferd/backoff";
            };
          }
      ) {};

    backoff = backoff_1_1_3;

    balanced_3_1_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_2_1, httpotion_1_0_0 }:
          buildMix {
            name = "balanced";
            version = "3.1.0";
            src = fetchHex {
              pkg = "balanced";
              version = "3.1.0";
              sha256 =
                "f86f199d76ac66407fbb82fb927e999ec4119a617500965b824ceb4071fcd2d2";
            };
            beamDeps  = [ poison_1_2_1 httpotion_1_0_0 ];

            meta = {
              description = ''Balanced API for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/balanced-elixir";
            };
          }
      ) {};

    balanced = balanced_3_1_0;

    bamboo_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_7_5 }:
          buildMix {
            name = "bamboo";
            version = "0.2.0";
            src = fetchHex {
              pkg = "bamboo";
              version = "0.2.0";
              sha256 =
                "f75790da6235225840be3cf6ea9dcfe91abb51bb20ab8e42425a4d207296bbe5";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_7_5 ];

            meta = {
              longDescription = ''Straightforward, composable, and adapter
                                based Elixir email library for people that love
                                piping. Adapters for Mandrill, Sendgrid,
                                in-memory, and test.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/paulcsmith/bamboo";
            };
          }
      ) {};

    bamboo = bamboo_0_2_0;

    bandwidth_1_2_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_4_0, httpoison_0_7_5 }:
          buildMix {
            name = "bandwidth";
            version = "1.2.1";
            src = fetchHex {
              pkg = "bandwidth";
              version = "1.2.1";
              sha256 =
                "cfc31517bd160cc9a2e6c55b664eccadc001fc650bd8ea9f01418feb8e7194b5";
            };
            beamDeps  = [ poison_1_4_0 httpoison_0_7_5 ];

            meta = {
              description = ''An Elixir client library for the Bandwidth
                            Application Platform'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wtcross/elixir-bandwidth";
            };
          }
      ) {};

    bandwidth = bandwidth_1_2_1;

    bankster_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "bankster";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bankster";
              version = "0.1.0";
              sha256 =
                "c56909377e5246b37043b4b19a940a4eac8ef57d8e8006d10e201928fd2bbcb7";
            };

            meta = {
              description = ''Bankster is an IBAN and BIC validation tool for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/railsmechanic/bankster";
            };
          }
      ) {};

    bankster = bankster_0_1_0;

    banner_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "banner";
            version = "0.1.0";
            src = fetchHex {
              pkg = "banner";
              version = "0.1.0";
              sha256 =
                "309a752cd592bd8dda3526865d050b1e20a953baed8b7480d0489001688f7a0f";
            };

            meta = {
              description = ''It is Elixir sysvbanner port from
                            https://github.com/uffejakobsen/sysvbanner.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/winebarrel/elixir-sysvbanner";
            };
          }
      ) {};

    banner = banner_0_1_0;

    barrel_ibrowse_4_2_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "barrel_ibrowse";
            version = "4.2.0";
            src = fetchHex {
              pkg = "barrel_ibrowse";
              version = "4.2.0";
              sha256 =
                "58bd9e45932c10fd3d0ceb5c4e47952c3243ea300b388192761ac20be197b2ca";
            };

            meta = {
              description = ''Erlang HTTP client application'';

              homepage = "https://github.com/barrel-db/ibrowse";
            };
          }
      ) {};

    barrel_ibrowse = barrel_ibrowse_4_2_0;

    barrel_jiffy_0_14_4 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "barrel_jiffy";
            version = "0.14.4";
            src = fetchHex {
              pkg = "barrel_jiffy";
              version = "0.14.4";
              sha256 =
                "3b730d6a18e988b8411f449bbb5df3637eb7bea864302924581b2391dd6b6e71";
            };
            compilePorts = true;

            meta = {
              description = ''JSON Decoder/Encoder.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/barrel-db/jiffy";
            };
          }
      ) {};

    barrel_jiffy_0_14_5 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "barrel_jiffy";
            version = "0.14.5";
            src = fetchHex {
              pkg = "barrel_jiffy";
              version = "0.14.5";
              sha256 =
                "8a874c6dbcf439a7d7b300b4463f47e088fd54e2b715ef7261e21807ee421f47";
            };
            compilePorts = true;

            meta = {
              description = ''JSON Decoder/Encoder.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/barrel-db/jiffy";
            };
          }
      ) {};

    barrel_jiffy = barrel_jiffy_0_14_5;

    barrel_oauth_1_6_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "barrel_oauth";
            version = "1.6.0";
            src = fetchHex {
              pkg = "barrel_oauth";
              version = "1.6.0";
              sha256 =
                "b2a800b771d45f32a9a55d416054b3bdfab3a925b62e8000f2c08b719390d4dd";
            };

            meta = {
              description = ''An Erlang OAuth 1.0 implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/barrel-db/erlang-oauth";
            };
          }
      ) {};

    barrel_oauth = barrel_oauth_1_6_0;

    base16_1_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "base16";
            version = "1.0.0";
            src = fetchHex {
              pkg = "base16";
              version = "1.0.0";
              sha256 =
                "02afd0827e61a7b07093873e063575ca3a2b07520567c7f8cec7c5d42f052d76";
            };

            meta = {
              description = ''Base16 encoding and decoding'';
              license = with stdenv.lib.licenses; [ bsd3 free ];
              homepage = "https://github.com/goj/base16";
            };
          }
      ) {};

    base16 = base16_1_0_0;

    base58_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "base58";
            version = "0.1.0";
            src = fetchHex {
              pkg = "base58";
              version = "0.1.0";
              sha256 =
                "e9746b7fa618f15d22e3098e06b35083977aff8fe0594628baae282769a2ceff";
            };

            meta = {
              description = ''Base58 encoding/decoding for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jrdnull/base58";
            };
          }
      ) {};

    base58 = base58_0_1_0;

    base58check_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "base58check";
            version = "0.1.0";
            src = fetchHex {
              pkg = "base58check";
              version = "0.1.0";
              sha256 =
                "29617beb2aaffe27ef40d7232a60beb5ad208667df4f2b619552367698cd4ca4";
            };

            meta = {
              description = ''Elixir implementation of Base58Check encoding
                            meant for Bitcoin '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gjaldon/base58check";
            };
          }
      ) {};

    base58check = base58check_0_1_0;

    base62_1_1_0 = callPackage
      (
        {  buildMix, fetchHex, custom_base_0_1_0 }:
          buildMix {
            name = "base62";
            version = "1.1.0";
            src = fetchHex {
              pkg = "base62";
              version = "1.1.0";
              sha256 =
                "3e6d5e21aed7875951236ae25a69ac5a22767c685e4e49e973918ae4ba7d9a2a";
            };
            beamDeps  = [ custom_base_0_1_0 ];

            meta = {
              description = ''Base62 encoder/decoder in pure Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/igas/base62";
            };
          }
      ) {};

    base62 = base62_1_1_0;

    base64url_0_0_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "base64url";
            version = "0.0.1";
            src = fetchHex {
              pkg = "base64url";
              version = "0.0.1";
              sha256 =
                "fab09b20e3f5db886725544cbcf875b8e73ec93363954eb8a1a9ed834aa8c1f9";
            };

            meta = {
              description = ''URL safe base64-compatible codec'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dvv/base64url";
            };
          }
      ) {};

    base64url = base64url_0_0_1;

    basho_stats_1_0_3 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "basho_stats";
            version = "1.0.3";
            src = fetchHex {
              pkg = "basho_stats";
              version = "1.0.3";
              sha256 =
                "d739e733b1c8afcaa467289fca50221753fc8cde6e7b53a79b67f98a2a261f5a";
            };

            meta = {
              description = ''Basic Erlang statistics library'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/basho/basho_stats";
            };
          }
      ) {};

    basho_stats = basho_stats_1_0_3;

    basic_auth_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, plug_0_8_1, cowboy_1_0_4 }:
          buildMix {
            name = "basic_auth";
            version = "1.0.0";
            src = fetchHex {
              pkg = "basic_auth";
              version = "1.0.0";
              sha256 =
                "e8ed4b5ca05c06dc1c19c69f1f00611e93d17bfa913eefbb6bed4a209af3a5a9";
            };
            beamDeps  = [ plug_0_8_1 cowboy_1_0_4 ];

            meta = {
              description = ''Basic Authentication Plug'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cultivatehq/basic_auth";
            };
          }
      ) {};

    basic_auth = basic_auth_1_0_0;

    batcher_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "batcher";
            version = "0.0.1";
            src = fetchHex {
              pkg = "batcher";
              version = "0.0.1";
              sha256 =
                "738a930f809603dc21e6612c1df38cbc452887ddf34670d20f05e136231f3671";
            };

            meta = {
              longDescription = ''Process a backlog of items after it has grown
                                to a certain size or a defined time has
                                passed'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/behe/batcher";
            };
          }
      ) {};

    batcher = batcher_0_0_1;

    battlenet_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "battlenet";
            version = "0.0.2";
            src = fetchHex {
              pkg = "battlenet";
              version = "0.0.2";
              sha256 =
                "cdd4e182da5a2db478e0da9ac1a467fc8f2b8ec638e3e38dd7962ff3fe8c9342";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Elixir library for the Battle.net API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cazrin/battlenet";
            };
          }
      ) {};

    battlenet = battlenet_0_0_2;

    bbmustache_1_0_3 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "bbmustache";
            version = "1.0.3";
            src = fetchHex {
              pkg = "bbmustache";
              version = "1.0.3";
              sha256 =
                "d79d9f3f90d14e20bda0c801063801ce9b72b71f5831d70b8d36065fb1a52208";
            };

            meta = {
              description = ''Binary pattern match Based Mustache template
                            engine for Erlang/OTP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/soranoba/bbmustache";
            };
          }
      ) {};

    bbmustache_1_0_4 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "bbmustache";
            version = "1.0.4";
            src = fetchHex {
              pkg = "bbmustache";
              version = "1.0.4";
              sha256 =
                "03b0d47db66e86df993896dce7578d7e4aae5f84636809b45fa8a3e34ee59b12";
            };

            meta = {
              description = ''Binary pattern match Based Mustache template
                            engine for Erlang/OTP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/soranoba/bbmustache";
            };
          }
      ) {};

    bbmustache_1_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "bbmustache";
            version = "1.1.0";
            src = fetchHex {
              pkg = "bbmustache";
              version = "1.1.0";
              sha256 =
                "aa22469836bb8a9928ad741bdd2038d49116228bfbe0c2d6c792e1bdd4b256d9";
            };

            meta = {
              description = ''Binary pattern match Based Mustache template
                            engine for Erlang/OTP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/soranoba/bbmustache";
            };
          }
      ) {};

    bbmustache = bbmustache_1_1_0;

    beaker_1_2_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          phoenix_1_1_4,
          ecto_2_0_0_beta_0,
          bureaucrat_0_1_2
        }:
          buildMix {
            name = "beaker";
            version = "1.2.0";
            src = fetchHex {
              pkg = "beaker";
              version = "1.2.0";
              sha256 =
                "f792ee661db3e31f4c6cacae992e81bbcc302ce05aec29c16bab9853bd763438";
            };
            beamDeps  = [ phoenix_1_1_4 ecto_2_0_0_beta_0 bureaucrat_0_1_2 ];

            meta = {
              longDescription = ''Measure your Elixir! A metrics library that
                                will help Elixirists keep track of their
                                application`s performance, as well as any custom
                                statistics they like.'';

              homepage = "http://github.com/hahuang65/beaker";
            };
          }
      ) {};

    beaker = beaker_1_2_0;

    beam_analyzer_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "beam_analyzer";
            version = "0.0.3";
            src = fetchHex {
              pkg = "beam_analyzer";
              version = "0.0.3";
              sha256 =
                "acfb7b4d92c1147401f2de8e0fe5ad33236814a57fdcfbcb184e9292e43c7d27";
            };

            meta = {
              description = ''Get information about Erlang/Elixir modules and
                            BEAM files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joeyates/beam_analyzer";
            };
          }
      ) {};

    beam_analyzer = beam_analyzer_0_0_3;

    bear_0_8_3 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "bear";
            version = "0.8.3";
            src = fetchHex {
              pkg = "bear";
              version = "0.8.3";
              sha256 =
                "0a04ce4702e00e0a43c0fcdd63e38c9c7d64dceb32b27ffed261709e7c3861ad";
            };

            meta = {
              description = ''Statistics functions for Erlang'';

              homepage = "https://github.com/puzza007/bear";
            };
          }
      ) {};

    bear = bear_0_8_3;

    belvedere_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "belvedere";
            version = "0.0.1";
            src = fetchHex {
              pkg = "belvedere";
              version = "0.0.1";
              sha256 =
                "b222f5c3ab855655b7950681542e2c3941c52533bd8b6cbb08be60f91427113e";
            };

            meta = {
              description = ''An example Elixir project with CircleCI, Docker,
                            Dialyzer integration.'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://nirvana.io";
            };
          }
      ) {};

    belvedere = belvedere_0_0_1;

    benchfella_0_3_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "benchfella";
            version = "0.3.2";
            src = fetchHex {
              pkg = "benchfella";
              version = "0.3.2";
              sha256 =
                "322270993f38246b02c8a98d64491a2b46a4efef5667a479d55a49ec53ea6dcf";
            };

            meta = {
              description = ''Microbenchmarking tool for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alco/benchfella";
            };
          }
      ) {};

    benchfella = benchfella_0_3_2;

    benchmark_ips_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "benchmark_ips";
            version = "0.2.0";
            src = fetchHex {
              pkg = "benchmark_ips";
              version = "0.2.0";
              sha256 =
                "7c55c4317dae5b8dae6a655e25a7aa491acd076e36efb9c9852a789a3592b703";
            };

            meta = {
              description = ''A tool to run benchmarks to determine iteration
                            per second.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mxhold/benchmark_ips";
            };
          }
      ) {};

    benchmark_ips = benchmark_ips_0_2_0;

    benchwarmer_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "benchwarmer";
            version = "0.0.2";
            src = fetchHex {
              pkg = "benchwarmer";
              version = "0.0.2";
              sha256 =
                "8b98b39c1c50df624f9c2d13ca953eeed465eed6feda975da26b479df2b4c9f5";
            };

            meta = {
              longDescription = ''Benchwarmer is an Elixir micro-benchmarking
                                utility that runs a function (or list of
                                functions) repeatedly against a dataset for a
                                period of time, and then reports on the average
                                time each operation took to complete, allowing
                                for easy comparison. '';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/mroth/benchwarmer";
            };
          }
      ) {};

    benchwarmer = benchwarmer_0_0_2;

    bencode_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, eqc_ex_1_2_4 }:
          buildMix {
            name = "bencode";
            version = "0.2.0";
            src = fetchHex {
              pkg = "bencode";
              version = "0.2.0";
              sha256 =
                "78ec5fbfa24cb98795d80d4982fc30563af4d7cd7c77ee86a3bffeb1b3a312dd";
            };
            beamDeps  = [ eqc_ex_1_2_4 ];

            meta = {
              longDescription = ''A bencode encoder and decoder. The decoder
                                will return the info hash with along with the
                                decoded data, and the encoder is implemented as
                                a protocol, allowing any data structure to be
                                bcode encoded.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gausby/bencode";
            };
          }
      ) {};

    bencode = bencode_0_2_0;

    bencoder_0_0_7 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "bencoder";
            version = "0.0.7";
            src = fetchHex {
              pkg = "bencoder";
              version = "0.0.7";
              sha256 =
                "1fd5478490f0ef03e5afee0c0392226efe07a76c9f537697176bc46bc46500b8";
            };

            meta = {
              description = ''a library to handle bencode in elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alehander42/bencoder";
            };
          }
      ) {};

    bencoder = bencoder_0_0_7;

    bencodex_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "bencodex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "bencodex";
              version = "1.0.0";
              sha256 =
                "a70c319eed907d4d0520bf2ed6eedc77cbf1312274b144341dc4ecc74136124d";
            };

            meta = {
              description = ''Encoder and decoder for the bencode format'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/patrickgombert/bencodex";
            };
          }
      ) {};

    bencodex = bencodex_1_0_0;

    bert_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "bert";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bert";
              version = "0.1.0";
              sha256 =
                "2a561521ec3529b248658a3e2d3d4bfe6729b0ab8291c701bf15ef413eda1506";
            };

            meta = {
              description = ''BERT Encoder/Decoder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuce/bert.erl";
            };
          }
      ) {};

    bert = bert_0_1_0;

    bertex_1_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "bertex";
            version = "1.2.0";
            src = fetchHex {
              pkg = "bertex";
              version = "1.2.0";
              sha256 =
                "5e6db198c106dbfbd6e419201ec15facd71fac320f24e3e85a856d624ac4096a";
            };

            meta = {
              description = '' Elixir BERT encoder/decoder '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/bertex";
            };
          }
      ) {};

    bertex = bertex_1_2_0;

    bgg_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, quinn_0_0_4, httpoison_0_8_1 }:
          buildMix {
            name = "bgg";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bgg";
              version = "0.1.0";
              sha256 =
                "d26593e7ebb23f76e6c0e73a9a1acb6a45ec25ea53b6ee716a2291f07c5f1fb6";
            };
            beamDeps  = [ quinn_0_0_4 httpoison_0_8_1 ];

            meta = {
              description = ''A BoardGameGeek API wrapper in Elixir
                            http://boardgamegeek.com/xmlapi/'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peralmq/bgg-elixir";
            };
          }
      ) {};

    bgg = bgg_0_1_0;

    billiards_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "billiards";
            version = "0.0.1";
            src = fetchHex {
              pkg = "billiards";
              version = "0.0.1";
              sha256 =
                "5b8d8eab12e35c0c7eff5be02a4adf0a7aa4cf10688a5faeec9b10f2c2f04046";
            };
             meta = {    };
          }
      ) {};

    billiards = billiards_0_0_1;

    bin_format_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "bin_format";
            version = "0.0.1";
            src = fetchHex {
              pkg = "bin_format";
              version = "0.0.1";
              sha256 =
                "f73b9d1691499964d248b4a19b56284b2c51652015a63b77c2688b92cb55d66a";
            };

            meta = {
              longDescription = ''Automatically generate the boilerplate to
                                convert between binaries and Elixir structs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/willpenington/bin_format";
            };
          }
      ) {};

    bin_format = bin_format_0_0_1;

    bing_translator_0_2_3 = callPackage
      (
        {
          buildMix,
          fetchHex,
          timex_1_0_0_rc4,
          poison_1_5_2,
          httpoison_0_8_1,
          floki_0_7_1
        }:
          buildMix {
            name = "bing_translator";
            version = "0.2.3";
            src = fetchHex {
              pkg = "bing_translator";
              version = "0.2.3";
              sha256 =
                "a1a953a96728e0531c41c96befe4301d80370c2f09a2ed412a8c8a817d7333c9";
            };
            beamDeps  = [
                          timex_1_0_0_rc4
                          poison_1_5_2
                          httpoison_0_8_1
                          floki_0_7_1
                        ];

            meta = {
              longDescription = ''Translate strings using the Bing HTTP API.
                                Requires that you have a Client ID and Secret.
                                See README.md for information.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/bing_translator";
            };
          }
      ) {};

    bing_translator = bing_translator_0_2_3;

    binstructor_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "binstructor";
            version = "0.0.1";
            src = fetchHex {
              pkg = "binstructor";
              version = "0.0.1";
              sha256 =
                "ab6e619628d4308a47744dcf9dd0c9ff48f4a5cc5e00ce6bb3852d92e654ba74";
            };

            meta = {
              longDescription = ''Automatically generate the boilerplate to
                                convert between binaries and Elixir structs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/willpenington/binstructor";
            };
          }
      ) {};

    binstructor = binstructor_0_0_1;

    bit_field_set_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, eqc_ex_1_2_4 }:
          buildMix {
            name = "bit_field_set";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bit_field_set";
              version = "0.1.0";
              sha256 =
                "63a9c8eb05dc0f9cd79590d718db56ccc1b41cd48d91457d94754a44a2663044";
            };
            beamDeps  = [ eqc_ex_1_2_4 ];

            meta = {
              longDescription = ''Store and manipulate a set of bit flags,
                                mostly used for syncing the state between peers
                                in a peer to peer network, such as
                                BitTorrent.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gausby/bit_field_set";
            };
          }
      ) {};

    bit_field_set = bit_field_set_0_1_0;

    bitbucket_api_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, jsx_2_8_0, httpoison_0_7_5, jsex_2_0_0 }:
          buildMix {
            name = "bitbucket_api";
            version = "0.0.2";
            src = fetchHex {
              pkg = "bitbucket_api";
              version = "0.0.2";
              sha256 =
                "25fbdda8ed1813f0ade92b4f28b3290b3efd6be63ff25c84ab9e24b512464245";
            };
            beamDeps  = [ jsx_2_8_0 httpoison_0_7_5 jsex_2_0_0 ];

            meta = {
              description = ''Create hooks for Bitbucket. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Blackrush/bitbucket_api";
            };
          }
      ) {};

    bitbucket_api = bitbucket_api_0_0_2;

    bitfield_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "bitfield";
            version = "1.0.0";
            src = fetchHex {
              pkg = "bitfield";
              version = "1.0.0";
              sha256 =
                "0f1ca3f3e9f8661cc2686561717c326309541f95e4f82f7b7d927e150f5f7b5a";
            };

            meta = {
              description = ''Simple bitfields for erlang/elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/bitfield.erl";
            };
          }
      ) {};

    bitfield = bitfield_1_0_0;

    bitmap_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "bitmap";
            version = "1.0.0";
            src = fetchHex {
              pkg = "bitmap";
              version = "1.0.0";
              sha256 =
                "c33ca1dd28d6979e61f3517140ef71e80f8ded4029debabbb6482ef650384b34";
            };

            meta = {
              longDescription = ''Package to help you create and work with
                                bitmaps
                                (https://en.wikipedia.org/wiki/Bitmap)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hashd/bitmap-elixir";
            };
          }
      ) {};

    bitmap = bitmap_1_0_0;

    bitpay_0_2_5 = callPackage
      (
        {
          buildMix, fetchHex, uuid_0_1_5, httpotion_1_0_0, exjsx_3_1_0
        }:
          buildMix {
            name = "bitpay";
            version = "0.2.5";
            src = fetchHex {
              pkg = "bitpay";
              version = "0.2.5";
              sha256 =
                "25a0b2dbf6619ddc0db4cf1ee03b3d097adac47dc47c65b71a2661eba0f2e3a2";
            };
            beamDeps  = [ uuid_0_1_5 httpotion_1_0_0 exjsx_3_1_0 ];

            meta = {
              longDescription = ''Library to allow elixir apps to easily use
                                the BitPay REST API to authenticate, generate
                                invoices, and retrieve invoices. Includes
                                Utilities for using Erlangs library for Elliptic
                                Curve Keys.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitpay/elixir-client";
            };
          }
      ) {};

    bitpay = bitpay_0_2_5;

    blackbook_0_3_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          timex_ecto_0_5_0,
          timex_0_19_5,
          secure_random_0_2_0,
          postgrex_0_11_1,
          ecto_2_0_0_beta_0,
          earmark_0_2_1,
          comeonin_1_6_0
        }:
          buildMix {
            name = "blackbook";
            version = "0.3.1";
            src = fetchHex {
              pkg = "blackbook";
              version = "0.3.1";
              sha256 =
                "deecf1248ec5ef7911e3b440a968d8cb2dae54d50e36bf80173a2593f0e4ecde";
            };
            beamDeps  = [
                          timex_ecto_0_5_0
                          timex_0_19_5
                          secure_random_0_2_0
                          postgrex_0_11_1
                          ecto_2_0_0_beta_0
                          earmark_0_2_1
                          comeonin_1_6_0
                        ];

            meta = {    };
          }
      ) {};

    blackbook = blackbook_0_3_1;

    blacksmith_0_1_3 = callPackage
      (
        {  buildMix, fetchHex, faker_0_6_0 }:
          buildMix {
            name = "blacksmith";
            version = "0.1.3";
            src = fetchHex {
              pkg = "blacksmith";
              version = "0.1.3";
              sha256 =
                "d070295cac13fef8d05cc50b900413e8e6dd863f4958bd55986b56d3874a20b4";
            };
            beamDeps  = [ faker_0_6_0 ];

            meta = {
              description = ''Elixir fake data generation for testing and
                            development'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/batate/blacksmith";
            };
          }
      ) {};

    blacksmith = blacksmith_0_1_3;

    blaguth_1_2_1 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "blaguth";
            version = "1.2.1";
            src = fetchHex {
              pkg = "blaguth";
              version = "1.2.1";
              sha256 =
                "2900dc5b7c6f7810bdf5e0ede8749632997811ae5b72ada34f59699b4310a65a";
            };
            beamDeps  = [ plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              description = ''Basic Access Authentication in Plug
                            applications.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/blaguth";
            };
          }
      ) {};

    blaguth = blaguth_1_2_1;

    blanket_0_3_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "blanket";
            version = "0.3.1";
            src = fetchHex {
              pkg = "blanket";
              version = "0.3.1";
              sha256 =
                "9d7f382c1254b83ba3334d143b942afd4a03c0ae1d32f7fee5fd3de184f4c016";
            };

            meta = {
              description = ''Blanket covers your tables ! Don`t loose your ETS
                            tables with Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niahoo/blanket";
            };
          }
      ) {};

    blanket = blanket_0_3_1;

    block_timer_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "block_timer";
            version = "0.0.1";
            src = fetchHex {
              pkg = "block_timer";
              version = "0.0.1";
              sha256 =
                "1dec7d6590de5b5d2cecd101ea4b276180b7d428e8b36863c424223dd0a97782";
            };

            meta = {
              description = ''Macros to use :timer.apply_after and
                            :timer.apply_interval with a block'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamkittelson/block_timer";
            };
          }
      ) {};

    block_timer = block_timer_0_0_1;

    blocking_queue_1_3_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "blocking_queue";
            version = "1.3.0";
            src = fetchHex {
              pkg = "blocking_queue";
              version = "1.3.0";
              sha256 =
                "10f2b942a29f83c3bfef6285096d7f42028201c89f317c731e708b528a7fc17d";
            };

            meta = {
              longDescription = ''BlockingQueue is a simple queue implemented
                                as a GenServer. It has a fixed maximum length
                                established when it is created.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joekain/BlockingQueue";
            };
          }
      ) {};

    blocking_queue = blocking_queue_1_3_0;

    bloodhound_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "bloodhound";
            version = "0.1.1";
            src = fetchHex {
              pkg = "bloodhound";
              version = "0.1.1";
              sha256 =
                "6aaab638fe90fc3714b650b659df774c7cdb12d098fee3910952e0a0f8fcd6ec";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''An ElasticSearch library for Elixir that can be
                            easily integrated with Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianwalter/bloodhound";
            };
          }
      ) {};

    bloodhound = bloodhound_0_1_1;

    bloomex_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "bloomex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "bloomex";
              version = "1.0.0";
              sha256 =
                "598f414e8bb23054843430fff449861ce7d8f6a81a220cbfed8cf42dcd1dd299";
            };

            meta = {
              description = ''Bloomex is a pure Elixir implementation of
                            Scalable Bloom Filters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmcabrita/bloomex";
            };
          }
      ) {};

    bloomex = bloomex_1_0_0;

    bmark_1_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "bmark";
            version = "1.0.2";
            src = fetchHex {
              pkg = "bmark";
              version = "1.0.2";
              sha256 =
                "70204b013c75d3b95d58acc42ff62461eaebe1e5345ef029fe59ba30a15b1747";
            };

            meta = {
              longDescription = ''A benchmarking tool for Elixir with a focus
                                on comparing results with confidence.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joekain/bmark";
            };
          }
      ) {};

    bmark = bmark_1_0_2;

    boltun_0_0_4 = callPackage
      (
        {  buildMix, fetchHex, postgrex_0_11_1 }:
          buildMix {
            name = "boltun";
            version = "0.0.4";
            src = fetchHex {
              pkg = "boltun";
              version = "0.0.4";
              sha256 =
                "fcf18b4bfab0afcd1c31133c9c5232776ededd1fb3caa1536ded8265002ab867";
            };
            beamDeps  = [ postgrex_0_11_1 ];

            meta = {
              longDescription = ''Transforms notifications from the Postgres
                                LISTEN/NOTIFY mechanism into callback
                                execution'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/briksoftware/boltun";
            };
          }
      ) {};

    boltun = boltun_0_0_4;

    booter_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "booter";
            version = "0.1.0";
            src = fetchHex {
              pkg = "booter";
              version = "0.1.0";
              sha256 =
                "bb14263b5d5dc74c3f4086f764153a0d09b2b05a9cda6f4b121cc7789159a80e";
            };

            meta = {
              description = ''Boot an Elixir application step by step'';
              license = stdenv.lib.licenses.mpl11;
              homepage = "https://github.com/eraserewind/booter";
            };
          }
      ) {};

    booter = booter_0_1_0;

    botan_0_1_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "botan";
            version = "0.1.2";
            src = fetchHex {
              pkg = "botan";
              version = "0.1.2";
              sha256 =
                "43541b5c52c91e46295a015f58857c347c85a7753d7c3cd3a1f835b25fdedaa9";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Elixir wrapper for Botan.io'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mendab1e/exBotan";
            };
          }
      ) {};

    botan = botan_0_1_2;

    bottler_0_5_0 = callPackage
      (
        {  buildMix, fetchHex, sshex_1_1_0 }:
          buildMix {
            name = "bottler";
            version = "0.5.0";
            src = fetchHex {
              pkg = "bottler";
              version = "0.5.0";
              sha256 =
                "a76b2ddfc98ef943ceb6730dd09fb3d085cb9dcc8feb8c739abbe0dcc77d8ffe";
            };
            beamDeps  = [ sshex_1_1_0 ];

            meta = {
              longDescription = ''Help you bottle, ship and serve your Elixir
                                apps. Bottler is a collection of tools that aims
                                to help you generate releases, ship them to your
                                servers, install them there, and get them live
                                on production.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elpulgardelpanda/bottler";
            };
          }
      ) {};

    bottler = bottler_0_5_0;

    bouncer_0_1_5 = callPackage
      (
        {
          buildMix,
          fetchHex,
          redix_0_3_4,
          poolboy_1_5_1,
          poison_1_5_2,
          plug_1_1_1,
          phoenix_1_1_4
        }:
          buildMix {
            name = "bouncer";
            version = "0.1.5";
            src = fetchHex {
              pkg = "bouncer";
              version = "0.1.5";
              sha256 =
                "82979e9c8df401cbf5eb2dd09dff3952933cf2efd9135be1f0cb51ec04deb996";
            };
            beamDeps  = [
                          redix_0_3_4
                          poolboy_1_5_1
                          poison_1_5_2
                          plug_1_1_1
                          phoenix_1_1_4
                        ];

            meta = {
              description = ''Token-based authorization and session management
                            for Phoenix (Elixir)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianwalter/bouncer";
            };
          }
      ) {};

    bouncer = bouncer_0_1_5;

    braintree_0_3_1 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1 }:
          buildMix {
            name = "braintree";
            version = "0.3.1";
            src = fetchHex {
              pkg = "braintree";
              version = "0.3.1";
              sha256 =
                "a93e78cbf8a1407035d8bcf6e7d53fc2ef2f716f3bd49b833ae105fa06a40ec1";
            };
            beamDeps  = [ httpoison_0_8_1 ];

            meta = {
              description = ''Native Braintree client library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sorentwo/braintree-elixir";
            };
          }
      ) {};

    braintree = braintree_0_3_1;

    braise_0_3_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_3_1 }:
          buildMix {
            name = "braise";
            version = "0.3.2";
            src = fetchHex {
              pkg = "braise";
              version = "0.3.2";
              sha256 =
                "5efb63b074308be51d25b1f324799b8b715b5b025bfdbdd9a39972b36a7b957c";
            };
            beamDeps  = [ poison_1_3_1 ];

            meta = {
              description = ''A library that converts JSON Schema into ember
                            models/adapters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/IoraHealth/braise";
            };
          }
      ) {};

    braise = braise_0_3_2;

    brcpfcnpj_0_0_9 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "brcpfcnpj";
            version = "0.0.9";
            src = fetchHex {
              pkg = "brcpfcnpj";
              version = "0.0.9";
              sha256 =
                "d5b7c8b473a07c3c91aa450b91ef9899a423c3f36a3027d4be5da25fdf5cef4b";
            };

            meta = {
              longDescription = ''Valida Cpf/Cnpj e Formatar em String caso
                                necessario Number format and Validate, to the
                                documents brazilians (CPF/CNPJ)'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/williamgueiros/Brcpfcnpj";
            };
          }
      ) {};

    brcpfcnpj = brcpfcnpj_0_0_9;

    breadcrumble_1_0_2 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "breadcrumble";
            version = "1.0.2";
            src = fetchHex {
              pkg = "breadcrumble";
              version = "1.0.2";
              sha256 =
                "8265e64e363df90e556125e091ba52e92a8eeaad57cc3efdd926aa0b069ad78f";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              description = ''Elixir port of Breadcrumble library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/breadcrumble_ex";
            };
          }
      ) {};

    breadcrumble = breadcrumble_1_0_2;

    briefly_0_3_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "briefly";
            version = "0.3.0";
            src = fetchHex {
              pkg = "briefly";
              version = "0.3.0";
              sha256 =
                "c6ebf8fc3dcd4950dd10c03e953fb4f553a8bcf0ff4c8c40d71542434cd7e046";
            };

            meta = {
              description = ''Simple, robust temporary file support'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/CargoSense/briefly";
            };
          }
      ) {};

    briefly = briefly_0_3_0;

    browser_0_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "browser";
            version = "0.1.2";
            src = fetchHex {
              pkg = "browser";
              version = "0.1.2";
              sha256 =
                "37919c96372654f687ee9d6645c50b8f6182baad589978326a00f671133446e7";
            };

            meta = {
              description = ''Browser detection library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tuvistavie/elixir-browser";
            };
          }
      ) {};

    browser = browser_0_1_2;

    bson_0_4_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "bson";
            version = "0.4.4";
            src = fetchHex {
              pkg = "bson";
              version = "0.4.4";
              sha256 =
                "69cbda1d27fd0f500f306c99e609593132c66b521b92a21ce6f21fea88dc3d27";
            };

            meta = {
              description = ''BSON implementation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/checkiz/elixir-bson";
            };
          }
      ) {};

    bson = bson_0_4_4;

    bstr_0_3_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "bstr";
            version = "0.3.0";
            src = fetchHex {
              pkg = "bstr";
              version = "0.3.0";
              sha256 =
                "0fb4e05619663d48dabcd21023915741277ba392f2a5710dde7ab6034760284d";
            };

            meta = {
              description = ''Erlang library that uses binaries as strings'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/jcomellas/bstr";
            };
          }
      ) {};

    bstr = bstr_0_3_0;

    bugsnag_1_1_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "bugsnag";
            version = "1.1.1";
            src = fetchHex {
              pkg = "bugsnag";
              version = "1.1.1";
              sha256 =
                "ed4d8876e9bdf841f6f08e6562ad9455ef3d06fb9d403702e7e24611fbe96247";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''An Elixir interface to the Bugsnag API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jarednorman/bugsnag-elixir";
            };
          }
      ) {};

    bugsnag = bugsnag_1_1_1;

    bugsnag_erl_0_1_2 = callPackage
      (
        {  buildRebar3, fetchHex, lager_3_0_1, jsx_2_8_0 }:
          buildRebar3 {
            name = "bugsnag_erl";
            version = "0.1.2";
            src = fetchHex {
              pkg = "bugsnag_erl";
              version = "0.1.2";
              sha256 =
                "c54c6e7fcb5e74b1d3611371ce7bd73fb31aaf27f909398a286683802c541851";
            };

            beamDeps  = [ lager_3_0_1 jsx_2_8_0 ];

            meta = {
              description = ''Bugsnag notifier'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/project-fifo/bugsnag-erlang";
            };
          }
      ) {};

    bugsnag_erl = bugsnag_erl_0_1_2;

    bump_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "bump";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bump";
              version = "0.1.0";
              sha256 =
                "068b418026a90382f9809ffe0504579f7ccea981f794ff6257ba2a0925b91360";
            };

            meta = {
              description = ''A library for writing BMP files from binary data.
                            '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/evanfarrar/ex_bump";
            };
          }
      ) {};

    bump = bump_0_1_0;

    bunt_0_1_5 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "bunt";
            version = "0.1.5";
            src = fetchHex {
              pkg = "bunt";
              version = "0.1.5";
              sha256 =
                "5a365df70e90a021617d1bcf6dedada848176728c84a33b463e59fb0c9b8cc65";
            };

            meta = {
              description = ''256 color ANSI coloring in the terminal'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/bunt";
            };
          }
      ) {};

    bunt = bunt_0_1_5;

    bureaucrat_0_1_2 = callPackage
      (
        {  buildMix, fetchHex, plug_0_8_1 }:
          buildMix {
            name = "bureaucrat";
            version = "0.1.2";
            src = fetchHex {
              pkg = "bureaucrat";
              version = "0.1.2";
              sha256 =
                "cd746f6f9ee9927b1b81ae7834c7b0a045df7e53151674d8b3d8de5832ec7402";
            };
            beamDeps  = [ plug_0_8_1 ];

            meta = {
              description = ''Generate Phoenix API documentation from tests'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/api-hogs/bureaucrat";
            };
          }
      ) {};

    bureaucrat = bureaucrat_0_1_2;

    butler_0_6_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_7_5 }:
          buildMix {
            name = "butler";
            version = "0.6.2";
            src = fetchHex {
              pkg = "butler";
              version = "0.6.2";
              sha256 =
                "28d681c4986c6711bf72c645084a83ea108a35039cedf5d03d6779d86cb7db19";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_7_5 ];

            meta = {
              description = ''A simple elixir robot to help you get things
                            done'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keathley/butler";
            };
          }
      ) {};

    butler_0_7_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_7_5 }:
          buildMix {
            name = "butler";
            version = "0.7.1";
            src = fetchHex {
              pkg = "butler";
              version = "0.7.1";
              sha256 =
                "fdc4226c0347ea94e6b535c7d352c098720bdfad280357dad9b4d8bd3c346bd7";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_7_5 ];

            meta = {
              description = ''A simple elixir robot to help you get things
                            done'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keathley/butler";
            };
          }
      ) {};

    butler = butler_0_7_1;

    butler_cage_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, butler_0_7_1 }:
          buildMix {
            name = "butler_cage";
            version = "0.0.2";
            src = fetchHex {
              pkg = "butler_cage";
              version = "0.0.2";
              sha256 =
                "22c5d1d0cbe6c19fffae260b02717a984ee5632c34492ee4254972ca4ab8e059";
            };
            beamDeps  = [ butler_0_7_1 ];

            meta = {
              description = ''A Butler plugin for showing silly photos of Nick
                            Cage.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keathley/butler_cage";
            };
          }
      ) {};

    butler_cage = butler_cage_0_0_2;

    butler_cowsay_0_2_1 = callPackage
      (
        {  buildMix, fetchHex, cowsay_0_0_1, butler_0_6_2 }:
          buildMix {
            name = "butler_cowsay";
            version = "0.2.1";
            src = fetchHex {
              pkg = "butler_cowsay";
              version = "0.2.1";
              sha256 =
                "d5b6ef82ebd387666c8b8d4fd93df3d11ff2ed7a129ae3aa7d7faac9ae803195";
            };
            beamDeps  = [ cowsay_0_0_1 butler_0_6_2 ];

            meta = {
              description = ''ButlerCowsay plugin for Butler SlackBot'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bbrock25/butler_cowsay";
            };
          }
      ) {};

    butler_cowsay = butler_cowsay_0_2_1;

    butler_new_0_4_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "butler_new";
            version = "0.4.3";
            src = fetchHex {
              pkg = "butler_new";
              version = "0.4.3";
              sha256 =
                "ef68a4957dde207e7663c3947d8ec93d8e24c9872619bd66b47d52abfb2b3d90";
            };
             meta = {    };
          }
      ) {};

    butler_new = butler_new_0_4_3;

    butler_tableflip_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, butler_0_7_1 }:
          buildMix {
            name = "butler_tableflip";
            version = "0.0.3";
            src = fetchHex {
              pkg = "butler_tableflip";
              version = "0.0.3";
              sha256 =
                "327840e6a07b8a3f2cc461920aea0a1cf39898b6fc0e1484e94867810dfea444";
            };
            beamDeps  = [ butler_0_7_1 ];

            meta = {
              description = ''Butler Plugin for flipping tables.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keathley/butler_tableflip";
            };
          }
      ) {};

    butler_tableflip = butler_tableflip_0_0_3;

    bypass_0_5_1 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "bypass";
            version = "0.5.1";
            src = fetchHex {
              pkg = "bypass";
              version = "0.5.1";
              sha256 =
                "bbff87f453cd98a81c9caeb305e5bcee25fe4fe31089cb19127a36dd224c2454";
            };
            beamDeps  = [ plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              longDescription = ''Bypass provides a quick way to create a
                                custom plug that can be put in place instead of
                                an actual HTTP server to return prebaked
                                responses to client requests. This is most
                                useful in tests, when you want to create a mock
                                HTTP server and test how your HTTP client
                                handles different types of responses from the
                                server.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pspdfkit-labs/bypass";
            };
          }
      ) {};

    bypass = bypass_0_5_1;

    cache_tab_1_0_2 = callPackage
      (
        {  buildRebar3, fetchHex, p1_utils_1_0_3 }:
          buildRebar3 {
            name = "cache_tab";
            version = "1.0.2";
            src = fetchHex {
              pkg = "cache_tab";
              version = "1.0.2";
              sha256 =
                "1d802a8bdf01178e1c6171037cc6e66da1a0c9fbb6589f644919d9a7402ebcd2";
            };

            beamDeps  = [ p1_utils_1_0_3 ];

            meta = {
              description = ''In-memory cache Erlang / Elixir library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/cache_tab";
            };
          }
      ) {};

    cache_tab = cache_tab_1_0_2;

    calecto_0_5_0 = callPackage
      (
        {  buildMix, fetchHex, ecto_1_1_3, calendar_0_12_4 }:
          buildMix {
            name = "calecto";
            version = "0.5.0";
            src = fetchHex {
              pkg = "calecto";
              version = "0.5.0";
              sha256 =
                "3414a87a3a355eeb8116c2fc993e3827772f1dc9064aab00a81a76a5ef00ab5b";
            };
            beamDeps  = [ ecto_1_1_3 calendar_0_12_4 ];

            meta = {
              longDescription = ''Library for using Calendar with Ecto. This
                                lets you save Calendar types in Ecto and work
                                with date-times in multiple timezones.'';

              homepage = "https://github.com/lau/calecto";
            };
          }
      ) {};

    calecto = calecto_0_5_0;

    calendar_0_12_3 = callPackage
      (
        {  buildMix, fetchHex, tzdata_0_1_8 }:
          buildMix {
            name = "calendar";
            version = "0.12.3";
            src = fetchHex {
              pkg = "calendar";
              version = "0.12.3";
              sha256 =
                "19aba4c9660239a710ac70e9bef56d8c8db73ebb48a2c89e3ac02cec64838aad";
            };
            beamDeps  = [ tzdata_0_1_8 ];

            meta = {
              longDescription = ''Calendar is a datetime library for Elixir.
                                Providing explicit types for datetimes, dates
                                and times. Full timezone support via its sister
                                package `tzdata`. Safe parsing and formatting of
                                standard formats (ISO, RFC, Unix, JS etc.) plus
                                strftime formatting. Easy and safe
                                interoperability with erlang style datetime
                                tuples. Extendable through protocols. Related
                                packages are available for i18n, Ecto and
                                Phoenix interoperability.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/calendar";
            };
          }
      ) {};

    calendar_0_12_4 = callPackage
      (
        {  buildMix, fetchHex, tzdata_0_1_8 }:
          buildMix {
            name = "calendar";
            version = "0.12.4";
            src = fetchHex {
              pkg = "calendar";
              version = "0.12.4";
              sha256 =
                "1df7cc23b7dfa3228498fff3bd298495d8431433be94db62a60e93ffa455a060";
            };
            beamDeps  = [ tzdata_0_1_8 ];

            meta = {
              longDescription = ''Calendar is a datetime library for Elixir.
                                Providing explicit types for datetimes, dates
                                and times. Full timezone support via its sister
                                package `tzdata`. Safe parsing and formatting of
                                standard formats (ISO, RFC, Unix, JS etc.) plus
                                strftime formatting. Easy and safe
                                interoperability with erlang style datetime
                                tuples. Extendable through protocols. Related
                                packages are available for i18n, Ecto and
                                Phoenix interoperability.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/calendar";
            };
          }
      ) {};

    calendar = calendar_0_12_4;

    calendar_translations_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, calendar_0_12_4 }:
          buildMix {
            name = "calendar_translations";
            version = "0.0.3";
            src = fetchHex {
              pkg = "calendar_translations";
              version = "0.0.3";
              sha256 =
                "b232912959f7f645a34e1a6ceca4657156e64bb5db3573fbc61c603c648dcb09";
            };
            beamDeps  = [ calendar_0_12_4 ];

            meta = {
              description = ''Translations for the Calendar library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/padde/calendar_translations";
            };
          }
      ) {};

    calendar_translations = calendar_translations_0_0_3;

    calliope_0_3_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "calliope";
            version = "0.3.0";
            src = fetchHex {
              pkg = "calliope";
              version = "0.3.0";
              sha256 =
                "0a0ccf87616459c36ff1f1551701da38485eb601500e74cffd7e42fe9862f74d";
            };

            meta = {
              description = ''An Elixir library for parsing haml templates. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/calliope";
            };
          }
      ) {};

    calliope = calliope_0_3_0;

    canada_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "canada";
            version = "1.0.0";
            src = fetchHex {
              pkg = "canada";
              version = "1.0.0";
              sha256 =
                "5f4eb50f2f2747e5f3e8750760e2683b38667e113281a7a71b502d1aa52d89d1";
            };

            meta = {
              description = '' A DSL for declarative permissions '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jarednorman/canada";
            };
          }
      ) {};

    canada = canada_1_0_0;

    canary_0_14_0 = callPackage
      (
        {
          buildMix, fetchHex, plug_1_1_1, ecto_2_0_0_beta_0, canada_1_0_0
        }:
          buildMix {
            name = "canary";
            version = "0.14.0";
            src = fetchHex {
              pkg = "canary";
              version = "0.14.0";
              sha256 =
                "5002649bbe4b9c7e00fb7f0c499c109eb34732f50f69ede797ed1e768e4f0029";
            };
            beamDeps  = [ plug_1_1_1 ecto_2_0_0_beta_0 canada_1_0_0 ];

            meta = {
              longDescription = ''An authorization library to restrict what
                                resources the current user is allowed to access,
                                and load resources for you.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cpjk/canary";
            };
          }
      ) {};

    canary = canary_0_14_0;

    carrier_1_0_4 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_7_5 }:
          buildMix {
            name = "carrier";
            version = "1.0.4";
            src = fetchHex {
              pkg = "carrier";
              version = "1.0.4";
              sha256 =
                "9ea767fa6dfc35b1b5ebcdf3d737ea741589100573406969cea7579bbb51c0de";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_7_5 ];

            meta = {
              description = ''Elixir library for interacting with
                            SmartyStreets'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mylanconnolly/carrier";
            };
          }
      ) {};

    carrier = carrier_1_0_4;

    cartographer_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "cartographer";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cartographer";
              version = "0.0.1";
              sha256 =
                "8f070615ca221b94a22e846303a3b9cc7ae31c2dea5c3d8f39a116f0d8c4b18f";
            };

            meta = {
              description = ''Geohash algorithm implementation in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/afronski/cartographer";
            };
          }
      ) {};

    cartographer = cartographer_0_0_1;

    cassius_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "cassius";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cassius";
              version = "0.0.1";
              sha256 =
                "3fe26f2b1fceed3c553871dcf954955063e01ab2e2de41d8322e58bd03348c17";
            };

            meta = {
              description = ''Monitor linux file system events'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jquadrin/cassius";
            };
          }
      ) {};

    cassius = cassius_0_0_1;

    cauldron_0_1_5 = callPackage
      (
        {  buildMix, fetchHex, httprot_0_1_7, reagent_0_1_5 }:
          buildMix {
            name = "cauldron";
            version = "0.1.5";
            src = fetchHex {
              pkg = "cauldron";
              version = "0.1.5";
              sha256 =
                "565ee9bb6800512a3c9e8a58951455904c44d8f0ec207e80e20aef9f8cb7d6b1";
            };
            beamDeps  = [ httprot_0_1_7 reagent_0_1_5 ];

            meta = {
              description = ''Web server library written in Elixir'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/cauldron";
            };
          }
      ) {};

    cauldron = cauldron_0_1_5;

    caylir_0_2_0 = callPackage
      (
        {
          buildMix, fetchHex, poolboy_1_5_1, poison_1_5_2, hackney_1_4_8
        }:
          buildMix {
            name = "caylir";
            version = "0.2.0";
            src = fetchHex {
              pkg = "caylir";
              version = "0.2.0";
              sha256 =
                "b3699171f2bef699ce1968394cb2aee3b5ec7db529a395d8bf7d85163067f888";
            };
            beamDeps  = [ poolboy_1_5_1 poison_1_5_2 hackney_1_4_8 ];

            meta = {
              description = ''Cayley driver for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mneudert/caylir";
            };
          }
      ) {};

    caylir = caylir_0_2_0;

    ccc_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ccc";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ccc";
              version = "0.0.2";
              sha256 =
                "cb976cf81c8497a271d3c6a4b20be4d0e569d5a0db3a60a227e1e8a13ee6abf7";
            };

            meta = {
              description = ''Character Code Converter'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/ccc";
            };
          }
      ) {};

    ccc = ccc_0_0_2;

    certifi_0_1_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "certifi";
            version = "0.1.1";
            src = fetchHex {
              pkg = "certifi";
              version = "0.1.1";
              sha256 =
                "e6d1dda48fad1b1c5b454c8402e2ac375ae12bf85a9910decaf791f330a7de29";
            };

            meta = {
              description = ''An OTP library'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/certifi/erlang-certifi";
            };
          }
      ) {};

    certifi_0_3_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "certifi";
            version = "0.3.0";
            src = fetchHex {
              pkg = "certifi";
              version = "0.3.0";
              sha256 =
                "42ae85fe91c038a634a5fb8d0c77f4fc581914c508f087c7138e9366a1517f6a";
            };

            meta = {
              description = ''An OTP library'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/certifi/erlang-certifi";
            };
          }
      ) {};

    certifi = certifi_0_3_0;

    cesso_0_1_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "cesso";
            version = "0.1.3";
            src = fetchHex {
              pkg = "cesso";
              version = "0.1.3";
              sha256 =
                "54ba81e0d1358095e00305e48cd3917bc9ee06905bdaab7bc60c7ae3489a6ba7";
            };

            meta = {
              description = ''CSV handling library for Elixir.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/cesso";
            };
          }
      ) {};

    cesso = cesso_0_1_3;

    cet_0_2_2 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          lager_3_0_1,
          jsx_2_8_0,
          gen_smtp_0_9_0,
          cowboy_1_0_4,
          bstr_0_3_0,
          bbmustache_1_0_4
        }:
          buildRebar3 {
            name = "cet";
            version = "0.2.2";
            src = fetchHex {
              pkg = "cet";
              version = "0.2.2";
              sha256 =
                "3da06f36791484576e4b338a2d8b5cfa65fe81ae7ed748aa7df85de0cb3bd2b4";
            };

            beamDeps  = [
                          lager_3_0_1
                          jsx_2_8_0
                          gen_smtp_0_9_0
                          cowboy_1_0_4
                          bstr_0_3_0
                          bbmustache_1_0_4
                        ];

            meta = {
              description = ''Cielo24 Erlang Tools'';

              homepage = "https://github.com/Cielo24/cet";
            };
          }
      ) {};

    cet = cet_0_2_2;

    cf_0_1_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "cf";
            version = "0.1.2";
            src = fetchHex {
              pkg = "cf";
              version = "0.1.2";
              sha256 =
                "c86f56bca74dd3616057b28574d920973fe665ecb064aa458dc6a2447f3f4924";
            };

            meta = {
              description = ''Terminal colour helper'';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    cf_0_2_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "cf";
            version = "0.2.1";
            src = fetchHex {
              pkg = "cf";
              version = "0.2.1";
              sha256 =
                "baee9aa7ec2dfa3cb4486b67211177caa293f876780f0b313b45718edef6a0a5";
            };

            meta = {
              description = ''Terminal colour helper'';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    cf = cf_0_2_1;

    changex_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "changex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "changex";
              version = "0.1.1";
              sha256 =
                "e087a4c3cc8eb3e94eba6050c5b1cc24dba3427eb4e4e15cebdb4000582c9851";
            };

            meta = {
              description = ''Automatically generate a CHANGELOG.md file based
                            on git commit history. '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Gazler/changex";
            };
          }
      ) {};

    changex = changex_0_1_1;

    chaos_spawn_0_7_0 = callPackage
      (
        {  buildMix, fetchHex, timex_0_19_5, exactor_2_2_0 }:
          buildMix {
            name = "chaos_spawn";
            version = "0.7.0";
            src = fetchHex {
              pkg = "chaos_spawn";
              version = "0.7.0";
              sha256 =
                "c4c8e985e750706fb4351d6eb036b513a4b7ea3e689a9aecd424251991f21eaa";
            };
            beamDeps  = [ timex_0_19_5 exactor_2_2_0 ];

            meta = {
              longDescription = ''Providing tools to randomly kill proceses.
                                With the goal of creating robust supevision
                                trees.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meadsteve/chaos-spawn";
            };
          }
      ) {};

    chaos_spawn = chaos_spawn_0_7_0;

    charlotte_0_4_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          cowboy_1_0_4,
          env_conf_0_3_0,
          uuid_0_1_5,
          jazz_0_2_1
        }:
          buildMix {
            name = "charlotte";
            version = "0.4.0";
            src = fetchHex {
              pkg = "charlotte";
              version = "0.4.0";
              sha256 =
                "2c0eb1335922bec0c6bc5e8f3dc4d84192657b708c2558742f676ed430f0950f";
            };
            beamDeps  = [ cowboy_1_0_4 env_conf_0_3_0 uuid_0_1_5 jazz_0_2_1
                      ];

            meta = {
              longDescription = '' Charlotte is a Web Framework. It takes a
                                little from Rails and a little from Sinatra and
                                does a few things it`s own way. The goal is to
                                be light weight, fun and get out of your way.
                                defmodule Controller do use
                                Charlotte.Handlers.HTTP def routes do [
                                {"/path", :path}, {"/path/:part",
                                :path_with_part} ] end def path("GET", _params,
                                conn) do render [message: "hello from path"],
                                conn end def path(verb, _params, conn) do
                                respond 405, {"Allowed", "GET"}, "#{verb} not
                                allowed", conn end end '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/LeakyBucket/charlotte.git";
            };
          }
      ) {};

    charlotte = charlotte_0_4_0;

    charm_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "charm";
            version = "0.0.1";
            src = fetchHex {
              pkg = "charm";
              version = "0.0.1";
              sha256 =
                "97a05c37c76b2efa5e8bd3c47333e9ebfe4f7c8777540900fcbec70c287bffa7";
            };

            meta = {
              description = ''Use ansi terminal characters to write colors and
                            cursor positions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tomgco/elixir-charm";
            };
          }
      ) {};

    charm = charm_0_0_1;

    chartkick_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, uuid_1_1_3, poison_1_5_2 }:
          buildMix {
            name = "chartkick";
            version = "0.0.2";
            src = fetchHex {
              pkg = "chartkick";
              version = "0.0.2";
              sha256 =
                "6a4f4170b162117f3be9d0a9d98b63b58da8ec2cea4e29155d14441a0b12ac6c";
            };
            beamDeps  = [ uuid_1_1_3 poison_1_5_2 ];

            meta = {    };
          }
      ) {};

    chartkick = chartkick_0_0_2;

    chash_0_1_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "chash";
            version = "0.1.1";
            src = fetchHex {
              pkg = "chash";
              version = "0.1.1";
              sha256 =
                "607d369e56016a51218c42f2692312cd116834193805c99debbe02889013c84a";
            };

            meta = {
              description = ''Riaks CHash implementation'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/project-fifo/chash";
            };
          }
      ) {};

    chash = chash_0_1_1;

    chinese_translation_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1 }:
          buildMix {
            name = "chinese_translation";
            version = "0.1.0";
            src = fetchHex {
              pkg = "chinese_translation";
              version = "0.1.0";
              sha256 =
                "d5e4f59421bad59e465322ce7a8f366179e5f6a732d7e06435e8a7c01f42e7ab";
            };
            beamDeps  = [ httpoison_0_8_1 ];

            meta = {
              longDescription = ''ChineseTranslation provides traditional
                                chinese <-> simplified chinese translation, as
                                well as pinyin translation and slugify for
                                chinese phrases/characters. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tyrchen/chinese_translation";
            };
          }
      ) {};

    chinese_translation = chinese_translation_0_1_0;

    chronos_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "chronos";
            version = "1.0.0";
            src = fetchHex {
              pkg = "chronos";
              version = "1.0.0";
              sha256 =
                "cfe0087dcf2ab401b3c2c1faa977571f9880f527b54a8c22cda5a8023a8420af";
            };

            meta = {
              longDescription = ''An Elixir library for handling dates. It can
                                be used to quickly determine a date. In a human
                                readable format.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/chronos";
            };
          }
      ) {};

    chronos_1_5_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "chronos";
            version = "1.5.1";
            src = fetchHex {
              pkg = "chronos";
              version = "1.5.1";
              sha256 =
                "015d881b1d095b53f626dc32f8db05e5faca8635b199d3cc2022a057c469904b";
            };

            meta = {
              longDescription = ''An Elixir library for handling dates. It can
                                be used to quickly determine a date. In a human
                                readable format.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/chronos";
            };
          }
      ) {};

    chronos = chronos_1_5_1;

    chunky_svg_0_0_4 = callPackage
      (
        {  buildMix, fetchHex, xml_builder_0_0_8 }:
          buildMix {
            name = "chunky_svg";
            version = "0.0.4";
            src = fetchHex {
              pkg = "chunky_svg";
              version = "0.0.4";
              sha256 =
                "c8d7212148d72b03b6ed102410017a2cf77987a09fb889320fc381d383e68c75";
            };
            beamDeps  = [ xml_builder_0_0_8 ];

            meta = {
              description = '' A library for drawing things with SVG '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mmmries/chunky_svg";
            };
          }
      ) {};

    chunky_svg = chunky_svg_0_0_4;

    cidr_0_5_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "cidr";
            version = "0.5.0";
            src = fetchHex {
              pkg = "cidr";
              version = "0.5.0";
              sha256 =
                "876baa94135d058a5ff617c8a072cdb2e5381661eb93b70d07844c0f9e00f38d";
            };

            meta = {
              description = ''Classless Inter-Domain Routing (CIDR) for
                            Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/c-rack/cidr-elixir";
            };
          }
      ) {};

    cidr = cidr_0_5_0;

    cipher_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "cipher";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cipher";
              version = "0.1.0";
              sha256 =
                "f70300294a15cc9db597f2c5f2251e87572cf701a6fe4e2981420fc902e640e5";
            };

            meta = {
              longDescription = ''Elixir crypto library to encrypt/decrypt
                                arbitrary binaries. It uses Erlang Crypto, so
                                it`s not big deal. Mostly a collection of
                                helpers wrapping it. It allows to use a crypted
                                key to validate signed requests. The exact same
                                cipher is implemented for Python, Ruby and
                                Elixir, so it can be used to integrate apps from
                                different languages.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rubencaro/cipher";
            };
          }
      ) {};

    cipher = cipher_0_1_0;

    cirru_parser_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "cirru_parser";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cirru_parser";
              version = "0.0.1";
              sha256 =
                "259f533ee97805c50eb12fa8472b5553eaca5bfd58216d54a734dfa1c4d0c678";
            };

            meta = {
              description = ''Cirru Parser in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Cirru/parser.ex";
            };
          }
      ) {};

    cirru_parser = cirru_parser_0_0_1;

    ckan_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpotion_2_1_0 }:
          buildMix {
            name = "ckan";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ckan";
              version = "0.0.2";
              sha256 =
                "471a58f1d38df7a6ff36af9a1e9d4c6cb9d310c5acb2db95ff3184717d7762a0";
            };
            beamDeps  = [ poison_1_5_2 httpotion_2_1_0 ];

            meta = {
              description = ''A small library for interacting with CKAN
                            (ckan.org) instances'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rossjones/ckan_ex";
            };
          }
      ) {};

    ckan = ckan_0_0_2;

    cldr_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "cldr";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cldr";
              version = "0.0.1";
              sha256 =
                "12e38f1ac12957606db8bd63314d98e40db007ff413de8f2ec94e0520a078201";
            };

            meta = {
              description = ''cldr is a library to use information from CLDR
                            data. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/magicienap/cldr";
            };
          }
      ) {};

    cldr = cldr_0_0_1;

    cleverbot_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_7_5 }:
          buildMix {
            name = "cleverbot";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cleverbot";
              version = "0.0.1";
              sha256 =
                "2a6f1bedbfd03fa0bbceff1134976d720e349cd7551cd5033eadf79f6cea4622";
            };
            beamDeps  = [ httpoison_0_7_5 ];

            meta = {
              description = ''A Cleverbot API wrapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/Elixir-Cleverbot";
            };
          }
      ) {};

    cleverbot = cleverbot_0_0_1;

    clint_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, plug_0_11_3, cowboy_1_0_4 }:
          buildMix {
            name = "clint";
            version = "0.0.1";
            src = fetchHex {
              pkg = "clint";
              version = "0.0.1";
              sha256 =
                "41c6781b5f4b986bce14c3578d39c497bcb8427f1d36d8cde5fcaa6e03cae2b1";
            };
            beamDeps  = [ plug_0_11_3 cowboy_1_0_4 ];

            meta = {
              description = ''An Elixir web micro-framework, inspired by
                            Sinatra'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/clint";
            };
          }
      ) {};

    clint = clint_0_0_1;

    cloak_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, poison_2_1_0, ecto_2_0_0_beta_0 }:
          buildMix {
            name = "cloak";
            version = "0.2.0";
            src = fetchHex {
              pkg = "cloak";
              version = "0.2.0";
              sha256 =
                "8e2455ab420102280719efc86cee7a58d1de358a541cd7d1b49b74fa30fa8fb8";
            };
            beamDeps  = [ poison_2_1_0 ecto_2_0_0_beta_0 ];

            meta = {
              description = ''Encrypted fields for Ecto.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/cloak";
            };
          }
      ) {};

    cloak = cloak_0_2_0;

    cloudi_core_1_5_1 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          varpool_1_5_1,
          uuid_erl_1_5_1,
          trie_1_5_1,
          syslog_1_0_2,
          supool_1_5_1,
          reltool_util_1_5_1,
          quickrand_1_5_1,
          pqueue_1_5_1,
          nodefinder_1_5_1,
          keys1value_1_5_1,
          key2value_1_5_1,
          erlang_term_1_5_1,
          dynamic_compile_1_0_0,
          cpg_1_5_1
        }:
          buildRebar3 {
            name = "cloudi_core";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_core";
              version = "1.5.1";
              sha256 =
                "1dd4471c9c5d5b0e8c0ccaff2878e046c430a8b00d59c2c0a41ed29cba1102ba";
            };

            beamDeps  = [
                          varpool_1_5_1
                          uuid_erl_1_5_1
                          trie_1_5_1
                          syslog_1_0_2
                          supool_1_5_1
                          reltool_util_1_5_1
                          quickrand_1_5_1
                          pqueue_1_5_1
                          nodefinder_1_5_1
                          keys1value_1_5_1
                          key2value_1_5_1
                          erlang_term_1_5_1
                          dynamic_compile_1_0_0
                          cpg_1_5_1
                        ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_core = cloudi_core_1_5_1;

    cloudi_service_api_requests_1_5_1 = callPackage
      (
        {
          buildRebar3, fetchHex, trie_1_5_1, jsx_2_4_0, cloudi_core_1_5_1
        }:
          buildRebar3 {
            name = "cloudi_service_api_requests";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_api_requests";
              version = "1.5.1";
              sha256 =
                "3af4a6bb4ef9f428f6044a752cc5c37cd7bf9fdc7d26407044b8c716b40c86f3";
            };

            beamDeps  = [ trie_1_5_1 jsx_2_4_0 cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework API requests
                            (JSON-RPC/Erlang-term support)'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_api_requests = cloudi_service_api_requests_1_5_1;

    cloudi_service_db_1_5_1 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          uuid_erl_1_5_1,
          trie_1_5_1,
          cloudi_core_1_5_1
        }:
          buildRebar3 {
            name = "cloudi_service_db";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_db";
              version = "1.5.1";
              sha256 =
                "067fccc8ca006722021b873995245f498a86582540bf738f6648bdceebd187e9";
            };

            beamDeps  = [ uuid_erl_1_5_1 trie_1_5_1 cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Database
                            (in-memory/testing/generic)'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_db = cloudi_service_db_1_5_1;

    cloudi_service_db_cassandra_1_3_3 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_db_cassandra";
            version = "1.3.3";
            src = fetchHex {
              pkg = "cloudi_service_db_cassandra";
              version = "1.3.3";
              sha256 =
                "78c9f924df50466fc3d27ffdd38dd235562be2ba4da5c298c569b3eee2bc10ef";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Cassandra
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_db_cassandra = cloudi_service_db_cassandra_1_3_3;

    cloudi_service_db_cassandra_cql_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_db_cassandra_cql";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_db_cassandra_cql";
              version = "1.5.1";
              sha256 =
                "09173e571262745de51bb0b53732d909d846c80079ce33b976df7d61584f9ba8";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Cassandra CQL
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_db_cassandra_cql =
      cloudi_service_db_cassandra_cql_1_5_1;

    cloudi_service_db_couchdb_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_db_couchdb";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_db_couchdb";
              version = "1.5.1";
              sha256 =
                "c6e97aadacf625549c99a96435e35d0dc971a7d0e7cf5283769e3d7e8ee36812";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework CouchDB Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_db_couchdb = cloudi_service_db_couchdb_1_5_1;

    cloudi_service_db_elasticsearch_1_3_3 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_db_elasticsearch";
            version = "1.3.3";
            src = fetchHex {
              pkg = "cloudi_service_db_elasticsearch";
              version = "1.3.3";
              sha256 =
                "2e4f6c8488ce879235f0548cb15cae6f3bcbb3c0b20e51ab3faad6769220ee12";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework elasticsearch
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_db_elasticsearch =
      cloudi_service_db_elasticsearch_1_3_3;

    cloudi_service_db_http_elli_1_5_1 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          uuid_erl_1_5_1,
          trie_1_5_1,
          elli_1_0_4,
          cowlib_1_0_2,
          cloudi_core_1_5_1
        }:
          buildRebar3 {
            name = "cloudi_service_db_http_elli";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_db_http_elli";
              version = "1.5.1";
              sha256 =
                "f1dde8cbb83773fb0e9ac918ac5c6ffdf3255462d252296b9a23f02e144ea13a";
            };

            beamDeps  = [
                          uuid_erl_1_5_1
                          trie_1_5_1
                          elli_1_0_4
                          cowlib_1_0_2
                          cloudi_core_1_5_1
                        ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework elli HTTP
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_db_http_elli = cloudi_service_db_http_elli_1_5_1;

    cloudi_service_db_memcached_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_db_memcached";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_db_memcached";
              version = "1.5.1";
              sha256 =
                "edcd28714e02d1b875c0c3a754fe230d5247b7b5e10194a74ee4d425fdca0839";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework memcached
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_db_memcached = cloudi_service_db_memcached_1_5_1;

    cloudi_service_db_mysql_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_db_mysql";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_db_mysql";
              version = "1.5.1";
              sha256 =
                "9bb0dec142d903615e0a5e360bd5faae9ceeccf37f1afc705e2a9a402c273a5b";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework MySQL Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_db_mysql = cloudi_service_db_mysql_1_5_1;

    cloudi_service_db_pgsql_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_db_pgsql";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_db_pgsql";
              version = "1.5.1";
              sha256 =
                "d7cf7cb44d57e84f68310f0e146bf2c76f0aa42bca0073166c0da79ddd44b70e";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework PostgreSQL
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_db_pgsql = cloudi_service_db_pgsql_1_5_1;

    cloudi_service_db_riak_1_3_3 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_db_riak";
            version = "1.3.3";
            src = fetchHex {
              pkg = "cloudi_service_db_riak";
              version = "1.3.3";
              sha256 =
                "902b6cb52a077fa47579631c07ca5ee414001b7388aac324b668c902a75de459";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Riak Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_db_riak = cloudi_service_db_riak_1_3_3;

    cloudi_service_db_tokyotyrant_1_5_0 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_db_tokyotyrant";
            version = "1.5.0";
            src = fetchHex {
              pkg = "cloudi_service_db_tokyotyrant";
              version = "1.5.0";
              sha256 =
                "553893dfed554b3988e80f6dbc2aa301255941646fe82df57d4bca00ffeb9d1a";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Tokyo Tyrant
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_db_tokyotyrant =
      cloudi_service_db_tokyotyrant_1_5_0;

    cloudi_service_filesystem_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, cowlib_1_0_2, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_filesystem";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_filesystem";
              version = "1.5.1";
              sha256 =
                "18fa3406bd3a6cafb40cbacd01c16ff32daccf6b4eb45efa6ec351d03f08d4c3";
            };

            beamDeps  = [ cowlib_1_0_2 cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Filesystem
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_filesystem = cloudi_service_filesystem_1_5_1;

    cloudi_service_http_client_1_5_1 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          uuid_erl_1_5_1,
          trie_1_5_1,
          cloudi_core_1_5_1
        }:
          buildRebar3 {
            name = "cloudi_service_http_client";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_http_client";
              version = "1.5.1";
              sha256 =
                "674be0160e09543e9cddf0286b11d8110514b0db3d18e2f9e097796997b7a7db";
            };

            beamDeps  = [ uuid_erl_1_5_1 trie_1_5_1 cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework HTTP client
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_http_client = cloudi_service_http_client_1_5_1;

    cloudi_service_http_cowboy_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, cowboy_1_0_4, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_http_cowboy";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_http_cowboy";
              version = "1.5.1";
              sha256 =
                "e0d07bbcd33bac980b66b7854bb8804433ba4619b6c6a3be63fefa36372b7a4b";
            };

            beamDeps  = [ cowboy_1_0_4 cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework cowboy HTTP/HTTPS
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_http_cowboy = cloudi_service_http_cowboy_1_5_1;

    cloudi_service_http_rest_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, trie_1_5_1, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_http_rest";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_http_rest";
              version = "1.5.1";
              sha256 =
                "5f9f51df32defa5d383446431a0029d614732b1377933e0c682ca4556cfe63ce";
            };

            beamDeps  = [ trie_1_5_1 cloudi_core_1_5_1 ];

            meta = {
              description = ''REST HTTP CloudI Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_http_rest = cloudi_service_http_rest_1_5_1;

    cloudi_service_map_reduce_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_map_reduce";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_map_reduce";
              version = "1.5.1";
              sha256 =
                "44d31fd7f4e772bce5f508f4eb41d423bbfc347f2d7a4194326085ee5542a61d";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Map/Reduce
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_map_reduce = cloudi_service_map_reduce_1_5_1;

    cloudi_service_monitoring_1_5_1 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          key2value_1_5_1,
          folsom_0_8_3,
          cloudi_core_1_5_1
        }:
          buildRebar3 {
            name = "cloudi_service_monitoring";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_monitoring";
              version = "1.5.1";
              sha256 =
                "4cb1d89085bba3b30910d8d129dde609cc063f761a736418da0eb9491ee673d5";
            };

            beamDeps  = [ key2value_1_5_1 folsom_0_8_3 cloudi_core_1_5_1 ];

            meta = {
              description = ''CloudI Monitoring Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_monitoring = cloudi_service_monitoring_1_5_1;

    cloudi_service_queue_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_queue";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_queue";
              version = "1.5.1";
              sha256 =
                "7fc7a1f0e8a888df2f6b5a2d3c0a7134475ba99f08aeb92244bbbf12e420d4c6";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Persistent Queue
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_queue = cloudi_service_queue_1_5_1;

    cloudi_service_quorum_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_quorum";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_quorum";
              version = "1.5.1";
              sha256 =
                "2ca5f275073696f6226c7610a3933761d28081ad86d2b7a37dac41b40fe293f9";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Quorum Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_quorum = cloudi_service_quorum_1_5_1;

    cloudi_service_router_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_router";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_router";
              version = "1.5.1";
              sha256 =
                "e37d8f657183ab44fe28f27d02a6a50608c04af8f47872cbd4cb12a19a23b18f";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Router Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_router = cloudi_service_router_1_5_1;

    cloudi_service_tcp_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_tcp";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_tcp";
              version = "1.5.1";
              sha256 =
                "f0be083ef768aa356148f7fa26989139bfc5d8fb6f1119bd31eed06e5ab38469";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework TCP Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_tcp = cloudi_service_tcp_1_5_1;

    cloudi_service_timers_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_timers";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_timers";
              version = "1.5.1";
              sha256 =
                "c576fe4725493fd3303945398b0984f339a8b52877bead4deb282e7d0f4bbc64";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Timers Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_timers = cloudi_service_timers_1_5_1;

    cloudi_service_udp_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_udp";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_udp";
              version = "1.5.1";
              sha256 =
                "d2939f6eb8048a0b154463e3ee5ff986a0a5370c97019e5562ee3fbb07b8698b";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework UDP Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_udp = cloudi_service_udp_1_5_1;

    cloudi_service_validate_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_validate";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_validate";
              version = "1.5.1";
              sha256 =
                "96712d805bea5f36acbb01c90b46b87532e64a454a7c2b4deb34029508c51c78";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Validate Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_validate = cloudi_service_validate_1_5_1;

    cloudi_service_zeromq_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "cloudi_service_zeromq";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_zeromq";
              version = "1.5.1";
              sha256 =
                "dba08d714d32fc9b50658ef075a13e99285458f73f433fb6f2059afcfb1ce498";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework ZeroMQ Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    cloudi_service_zeromq = cloudi_service_zeromq_1_5_1;

    cloudinary_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_4_0, httpoison_0_8_1 }:
          buildMix {
            name = "cloudinary";
            version = "0.0.2";
            src = fetchHex {
              pkg = "cloudinary";
              version = "0.0.2";
              sha256 =
                "9e32b21717b193f90a526203725811b96294d7c88391e5ad4a57bf178678cc4c";
            };
            beamDeps  = [ poison_1_4_0 httpoison_0_8_1 ];

            meta = {
              description = ''Library to upload to Cloudinary'';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    cloudinary = cloudinary_0_0_2;

    cloudinaryex_0_0_2 = callPackage
      (
        {
          buildMix, fetchHex, timex_1_0_1, poison_1_5_2, httpoison_0_8_1
        }:
          buildMix {
            name = "cloudinaryex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "cloudinaryex";
              version = "0.0.2";
              sha256 =
                "31518baacfcca428e30ee8f1c411d76568344e7032ed93cf34535e279c8472fc";
            };
            beamDeps  = [ timex_1_0_1 poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''A library for connecting with Cloudinary in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/micahwedemeyer/cloudinaryex";
            };
          }
      ) {};

    cloudinaryex = cloudinaryex_0_0_2;

    clox_0_1_3 = callPackage
      (
        {  buildMix, fetchHex, timex_0_13_5 }:
          buildMix {
            name = "clox";
            version = "0.1.3";
            src = fetchHex {
              pkg = "clox";
              version = "0.1.3";
              sha256 =
                "a4e9330289479ecffce51346071282d8470612462b40e150d34a27475411f35b";
            };
            beamDeps  = [ timex_0_13_5 ];

            meta = {
              description = ''time series date keys'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/clox";
            };
          }
      ) {};

    clox = clox_0_1_3;

    cmark_0_6_8 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "cmark";
            version = "0.6.8";
            src = fetchHex {
              pkg = "cmark";
              version = "0.6.8";
              sha256 =
                "ee148d419684923567be4f413cf82c6f8da2d235e40d434e616febca158372cc";
            };
            compilePorts = true;

            meta = {
              longDescription = ''Elixir NIF for cmark (C), a parser library
                                following the CommonMark spec, a compatible
                                implementation of Markdown.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/cmark.ex";
            };
          }
      ) {};

    cmark = cmark_0_6_8;

    cobertura_cover_0_9_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "cobertura_cover";
            version = "0.9.0";
            src = fetchHex {
              pkg = "cobertura_cover";
              version = "0.9.0";
              sha256 =
                "870bc4658cacc5c80d13f1206b688925234d2dc4e00278e8a3e72fbbd6bea0b1";
            };

            meta = {
              longDescription = ''A plugin for `mix test --cover` that writes a
                                `coverage.xml` file compatible with Jenkins`
                                Cobertura plugin. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/PSPDFKit-labs/cobertura_cover";
            };
          }
      ) {};

    cobertura_cover = cobertura_cover_0_9_0;

    codepagex_0_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "codepagex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "codepagex";
              version = "0.1.2";
              sha256 =
                "cb6fbd1ebf1b1748aee9d956fb15115af407db3348efc26bc9d3d637c6441074";
            };

            meta = {
              longDescription = ''Codepagex is an elixir library to convert
                                between string encodings to and from utf-8. Like
                                iconv, but written in pure Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tallakt/codepagex";
            };
          }
      ) {};

    codepagex = codepagex_0_1_2;

    coffee_rotor_0_2_1 = callPackage
      (
        {  buildMix, fetchHex, rotor_0_2_2 }:
          buildMix {
            name = "coffee_rotor";
            version = "0.2.1";
            src = fetchHex {
              pkg = "coffee_rotor";
              version = "0.2.1";
              sha256 =
                "cb2f786c1abf109ed4d86ec175c02cb09adb1f1ee52d7a4ef0c9e65979d4f365";
            };
            beamDeps  = [ rotor_0_2_2 ];

            meta = {
              description = ''A [rotor](https://github.com/HashNuke/rotor) to
                            compile CoffeeScript files '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/HashNuke/coffee_rotor";
            };
          }
      ) {};

    coffee_rotor = coffee_rotor_0_2_1;

    coinbase_0_0_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          timex_0_13_5,
          poison_1_3_1,
          inflex_1_0_0,
          httpoison_0_7_5,
          dotenv_0_0_4
        }:
          buildMix {
            name = "coinbase";
            version = "0.0.1";
            src = fetchHex {
              pkg = "coinbase";
              version = "0.0.1";
              sha256 =
                "c7d59d239f219623765a596dc61a678a527d19fd0110db1ea09ab937d0df9bcc";
            };
            beamDeps  = [
                          timex_0_13_5
                          poison_1_3_1
                          inflex_1_0_0
                          httpoison_0_7_5
                          dotenv_0_0_4
                        ];

            meta = {
              description = ''Coinbase API for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gregpardo/coinbase-elixir";
            };
          }
      ) {};

    coinbase = coinbase_0_0_1;

    colixir_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "colixir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "colixir";
              version = "0.0.1";
              sha256 =
                "38dc49351419c6fcfdb76bbc785e07c3acf83cc29f632719dd601ecadbfb73b8";
            };

            meta = {
              description = ''Colixir creates colorized text for terminal
                            output'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mondok/colixir";
            };
          }
      ) {};

    colixir = colixir_0_0_1;

    color_stream_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "color_stream";
            version = "0.0.2";
            src = fetchHex {
              pkg = "color_stream";
              version = "0.0.2";
              sha256 =
                "b1181f32b310311016006f4f8d52b3418d1af6f06e71903daabafdcaa602a29d";
            };

            meta = {
              description = ''Generate random colors that are fairly spaced out
                            and look nice.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/code-lever/color-stream-elixir";
            };
          }
      ) {};

    color_stream = color_stream_0_0_2;

    color_utils_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "color_utils";
            version = "0.2.0";
            src = fetchHex {
              pkg = "color_utils";
              version = "0.2.0";
              sha256 =
                "bf16a1a9de7d837a68ede139c6e06bc9d57f9eccedff302f730105bd80d98647";
            };

            meta = {
              description = ''A Color Util library for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/barakyo/color_utils";
            };
          }
      ) {};

    color_utils = color_utils_0_2_0;

    colorful_0_6_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "colorful";
            version = "0.6.0";
            src = fetchHex {
              pkg = "colorful";
              version = "0.6.0";
              sha256 =
                "6b00225f137efdde7901d3ddc7626a3b33031c20ea145097b2442680e72adc3d";
            };

            meta = {
              description = ''Modules which manage colors'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/colorful";
            };
          }
      ) {};

    colorful = colorful_0_6_0;

    colorize_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "colorize";
            version = "0.2.0";
            src = fetchHex {
              pkg = "colorize";
              version = "0.2.0";
              sha256 =
                "d43757bae49d6da310d641cf7ec809bdc0b6a9eb40fb7ac4c57c1dbbb7d4e32e";
            };

            meta = {
              description = ''Colorize your text in the console'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shiroyasha/colorize";
            };
          }
      ) {};

    colorize = colorize_0_2_0;

    colors_1_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "colors";
            version = "1.0.1";
            src = fetchHex {
              pkg = "colors";
              version = "1.0.1";
              sha256 =
                "960aa874a3cbbf4356c64ef8194d5215c8373537a720fc0ab46c90400ecf8949";
            };

            meta = {
              description = ''a colors util'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lidashuang/colors";
            };
          }
      ) {};

    colors = colors_1_0_1;

    combination_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "combination";
            version = "0.0.2";
            src = fetchHex {
              pkg = "combination";
              version = "0.0.2";
              sha256 =
                "f3e4934d2077d161e4ec8c6e54a2c4b6b39d8189a1434866ca3e2afedd38be04";
            };

            meta = {
              description = ''Elixir library computing simple combination and
                            permutation on Enumerables.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seantanly/elixir-combination";
            };
          }
      ) {};

    combination = combination_0_0_2;

    combine_0_7_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "combine";
            version = "0.7.0";
            src = fetchHex {
              pkg = "combine";
              version = "0.7.0";
              sha256 =
                "3ac1b6622e6149204899c7069b850a53ed38d1a749cc7357aeffe86e8bfc593c";
            };

            meta = {
              description = ''A parser combinator library for Elixir
                            projects.'';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    combine = combine_0_7_0;

    comeonin_1_6_0 = callPackage
      (
        {  buildRebar3, fetchHex, comeonin_i18n_0_1_3 }:
          buildRebar3 {
            name = "comeonin";
            version = "1.6.0";
            src = fetchHex {
              pkg = "comeonin";
              version = "1.6.0";
              sha256 =
                "40dd0da2c33696d19515888fd86b9ffdcad92d49e9a6b3b13df98e824897a1b1";
            };
            compilePorts = true;
            beamDeps  = [ comeonin_i18n_0_1_3 ];

            meta = {
              description = ''Password hashing (bcrypt, pbkdf2_sha512) library
                            for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/elixircnx/comeonin";
            };
          }
      ) {};

    comeonin_2_0_3 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "comeonin";
            version = "2.0.3";
            src = fetchHex {
              pkg = "comeonin";
              version = "2.0.3";
              sha256 =
                "a9a6f87107ebf6898adeca7130adb1b9e421c1be7e8b30b13ac1e0354ea15198";
            };
            compilePorts = true;

            meta = {
              description = ''Password hashing (bcrypt, pbkdf2_sha512) library
                            for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/elixircnx/comeonin";
            };
          }
      ) {};

    comeonin_2_1_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "comeonin";
            version = "2.1.1";
            src = fetchHex {
              pkg = "comeonin";
              version = "2.1.1";
              sha256 =
                "7f85774ae5d453f664d0e7809cc1ab32ff22855d16ff6a2edd68c6d36cb1a1aa";
            };
            compilePorts = true;

            meta = {
              description = ''Password hashing (bcrypt, pbkdf2_sha512) library
                            for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/elixircnx/comeonin";
            };
          }
      ) {};

    comeonin = comeonin_2_1_1;

    comeonin_ecto_password_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, ecto_1_1_3, comeonin_2_1_1 }:
          buildMix {
            name = "comeonin_ecto_password";
            version = "0.0.3";
            src = fetchHex {
              pkg = "comeonin_ecto_password";
              version = "0.0.3";
              sha256 =
                "44c8dbf5b81fca515b91422fddb240c5d714bc81bc0d59b3ca60300edb3f856b";
            };
            beamDeps  = [ ecto_1_1_3 comeonin_2_1_1 ];

            meta = {
              description = ''Ecto custom type for storing encrypted password
                            using Comonin'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/vic/comeonin_ecto_password";
            };
          }
      ) {};

    comeonin_ecto_password = comeonin_ecto_password_0_0_3;

    comeonin_i18n_0_1_3 = callPackage
      (
        {  buildMix, fetchHex, gettext_0_10_0 }:
          buildMix {
            name = "comeonin_i18n";
            version = "0.1.3";
            src = fetchHex {
              pkg = "comeonin_i18n";
              version = "0.1.3";
              sha256 =
                "4b45ca5af3cbf20bf7d3f7e874629041a2a921ad5a62ca9b94546a1e559023a6";
            };
            beamDeps  = [ gettext_0_10_0 ];

            meta = {
              description = ''Internationalization support for the Comeonin
                            password hashing library.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/elixircnx/comeonin_i18n";
            };
          }
      ) {};

    comeonin_i18n = comeonin_i18n_0_1_3;

    commerce_billing_0_0_2 = callPackage
      (
        {
          buildMix,
          fetchHex,
          mock_0_1_1,
          jazz_0_2_1,
          httpoison_0_8_1,
          ex_doc_0_11_4
        }:
          buildMix {
            name = "commerce_billing";
            version = "0.0.2";
            src = fetchHex {
              pkg = "commerce_billing";
              version = "0.0.2";
              sha256 =
                "6bb751f496011b974cb8d536b079eb7dfaeee4be827e4cf2fe0585e10f26bd04";
            };
            beamDeps  = [ mock_0_1_1 jazz_0_2_1 httpoison_0_8_1 ex_doc_0_11_4
                      ];

            meta = {
              description = ''Credit card processing library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshnuss/commerce_billing";
            };
          }
      ) {};

    commerce_billing = commerce_billing_0_0_2;

    complex_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, exprintf_0_1_6, earmark_0_2_1 }:
          buildMix {
            name = "complex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "complex";
              version = "0.2.0";
              sha256 =
                "6db6a2850ed907c4d9e062591110dc70c35c3818ccf609f1268052a3f4bf10b0";
            };
            beamDeps  = [ exprintf_0_1_6 earmark_0_2_1 ];

            meta = {
              description = ''Complex is a library for types and mathematical
                            functions for complex numbers.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/twist-vector/elixir-complex.git";
            };
          }
      ) {};

    complex = complex_0_2_0;

    con_cache_0_11_0 = callPackage
      (
        {  buildMix, fetchHex, exactor_2_2_0 }:
          buildMix {
            name = "con_cache";
            version = "0.11.0";
            src = fetchHex {
              pkg = "con_cache";
              version = "0.11.0";
              sha256 =
                "cd6d3dd4f6900520e3975592e1bbb57ac217e15f1f350f5bcba0c63578cb0a49";
            };
            beamDeps  = [ exactor_2_2_0 ];

            meta = {
              longDescription = ''ETS based key-value storage with support for
                                row-level isolated writes, TTL auto-purge, and
                                modification callbacks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/con_cache";
            };
          }
      ) {};

    con_cache = con_cache_0_11_0;

    con_cache_0_9_0 = callPackage
      (
        {  buildMix, fetchHex, exactor_2_2_0 }:
          buildMix {
            name = "con_cache";
            version = "0.9.0";
            src = fetchHex {
              pkg = "con_cache";
              version = "0.9.0";
              sha256 =
                "600b122653d7e5f6414bb0728fa6133c656e2d24fad7f0a31bb89c1c70ec68bb";
            };
            beamDeps  = [ exactor_2_2_0 ];

            meta = {
              longDescription = ''ETS based key-value storage with support for
                                row-level isolated writes, TTL auto-purge, and
                                modification callbacks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/con_cache";
            };
          }
      ) {};

    conferl_0_0_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "conferl";
            version = "0.0.1";
            src = fetchHex {
              pkg = "conferl";
              version = "0.0.1";
              sha256 =
                "402ff3b66ff98ada2b537e2d9d329f4f6f32230c39d7a3be150cf72b7525f801";
            };

            meta = {
              description = ''Auto-Conference Service in Erlang (similar to
                            Disqus)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/conferl";
            };
          }
      ) {};

    conferl = conferl_0_0_1;

    configparser_ex_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "configparser_ex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "configparser_ex";
              version = "0.2.0";
              sha256 =
                "acc487b8671b8fadba6bf5694115c23e04c9754cb226f371f17dc7588687d8ac";
            };

            meta = {
              description = ''A module that parses INI-like files. Not unlike
                            Python configparser package.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/easco/configparser_ex";
            };
          }
      ) {};

    configparser_ex = configparser_ex_0_2_0;

    conform_0_13_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "conform";
            version = "0.13.0";
            src = fetchHex {
              pkg = "conform";
              version = "0.13.0";
              sha256 =
                "72bc5f0e55d15f8387892b664c30e969e3584e8da15d6b5d45caac4d84ee1165";
            };

            meta = {
              description = ''Easy release configuration for Elixir apps.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/conform";
            };
          }
      ) {};

    conform_0_16_0 = callPackage
      (
        {  buildMix, fetchHex, neotoma_1_7_3 }:
          buildMix {
            name = "conform";
            version = "0.16.0";
            src = fetchHex {
              pkg = "conform";
              version = "0.16.0";
              sha256 =
                "4d510e428fe05d7b505cefca66359bb4700aa7b68189624f5ba4cd1c22b5bf1a";
            };
            beamDeps  = [ neotoma_1_7_3 ];

            meta = {
              description = ''Easy release configuration for Elixir apps.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/conform";
            };
          }
      ) {};

    conform_1_0_0_rc8 = callPackage
      (
        {  buildMix, fetchHex, neotoma_1_7_3 }:
          buildMix {
            name = "conform";
            version = "1.0.0-rc8";
            src = fetchHex {
              pkg = "conform";
              version = "1.0.0-rc8";
              sha256 =
                "0177ab7eaf0f66372df9aadd1d4e198e205b76f561be0e26f6a52ca6adcadf80";
            };
            beamDeps  = [ neotoma_1_7_3 ];

            meta = {
              description = ''Easy release configuration for Elixir apps.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/conform";
            };
          }
      ) {};

    conform = conform_1_0_0_rc8;

    conform_exrm_0_3_0 = callPackage
      (
        {  buildMix, fetchHex, exrm_1_0_0_rc8, conform_1_0_0_rc8 }:
          buildMix {
            name = "conform_exrm";
            version = "0.3.0";
            src = fetchHex {
              pkg = "conform_exrm";
              version = "0.3.0";
              sha256 =
                "52baf48678b29b8986bc325877489679b597633457397d078782262ee444808e";
            };
            beamDeps  = [ exrm_1_0_0_rc8 conform_1_0_0_rc8 ];

            meta = {
              description = ''Conform plugin for ExRM'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/conform_exrm";
            };
          }
      ) {};

    conform_exrm = conform_exrm_0_3_0;

    connection_1_0_0_rc_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "connection";
            version = "1.0.0-rc.1";
            src = fetchHex {
              pkg = "connection";
              version = "1.0.0-rc.1";
              sha256 =
                "915a998f7bf30013611bf3cfc778b0d8ff163a968bd7604e7021aca272136a48";
            };

            meta = {
              description = ''Connection behaviour for connection processes'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/connection";
            };
          }
      ) {};

    connection_1_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "connection";
            version = "1.0.2";
            src = fetchHex {
              pkg = "connection";
              version = "1.0.2";
              sha256 =
                "b4ffd56c0ad3caac8dc6125a007e416ba2dab54a1d4b380766bb9e87c56120fb";
            };

            meta = {
              description = ''Connection behaviour for connection processes'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/connection";
            };
          }
      ) {};

    connection = connection_1_0_2;

    conqueuer_0_5_1 = callPackage
      (
        {  buildMix, fetchHex, poolboy_1_5_1, inflex_1_5_0 }:
          buildMix {
            name = "conqueuer";
            version = "0.5.1";
            src = fetchHex {
              pkg = "conqueuer";
              version = "0.5.1";
              sha256 =
                "7370e2a0201f73ced6b202877b4dcb6872e1b6bbb0c024b1edee3a058dd653ab";
            };
            beamDeps  = [ poolboy_1_5_1 inflex_1_5_0 ];

            meta = {
              description = ''An Elixir in memory work queue.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/midas/conqueuer";
            };
          }
      ) {};

    conqueuer = conqueuer_0_5_1;

    console_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "console";
            version = "0.0.1";
            src = fetchHex {
              pkg = "console";
              version = "0.0.1";
              sha256 =
                "55e0635d7fdde35a04694e646a01b161c142b4d814a97ed8a373fd42af35c955";
            };

            meta = {

              homepage = "https://github.com/matteosister/console";
            };
          }
      ) {};

    console = console_0_0_1;

    consul_1_0_3 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_7_5, exjsx_3_2_0 }:
          buildMix {
            name = "consul";
            version = "1.0.3";
            src = fetchHex {
              pkg = "consul";
              version = "1.0.3";
              sha256 =
                "80d5836e4cbe686bff535634e719e0892455b03e77bcde149fb221c80fdb1a52";
            };
            beamDeps  = [ httpoison_0_7_5 exjsx_3_2_0 ];

            meta = {
              description = ''An Elixir client for Consul`s HTTP API '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/undeadlabs/consul-ex";
            };
          }
      ) {};

    consul = consul_1_0_3;

    control_0_0_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "control";
            version = "0.0.4";
            src = fetchHex {
              pkg = "control";
              version = "0.0.4";
              sha256 =
                "c806da1d82614a27f876aea5d222edb1cdb52d883553ada03f1ff79c09c024d9";
            };

            meta = {
              description = ''An exploratory look into functors, applicatives,
                            and monads for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/elixir-control";
            };
          }
      ) {};

    control = control_0_0_4;

    convertat_1_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "convertat";
            version = "1.1.0";
            src = fetchHex {
              pkg = "convertat";
              version = "1.1.0";
              sha256 =
                "603229c43df6769f2166c78c5c3f31316390bf6e19fa8e15f02026170ab51a79";
            };

            meta = {
              description = ''Provides functions for converting from and to
                            arbitrary bases. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/convertat";
            };
          }
      ) {};

    convertat = convertat_1_1_0;

    core_0_14_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "core";
            version = "0.14.1";
            src = fetchHex {
              pkg = "core";
              version = "0.14.1";
              sha256 =
                "142c14544ce688b4527abeadfb3bf249678caaec1a3f3d11cb4927695f19ff33";
            };

            meta = {
              description = ''Library for selective receive OTP processes'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/core";
            };
          }
      ) {};

    core = core_0_14_1;

    core_data_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, floki_0_1_1 }:
          buildMix {
            name = "core_data";
            version = "0.1.0";
            src = fetchHex {
              pkg = "core_data";
              version = "0.1.0";
              sha256 =
                "09b308a42f0697053c68f253e7f687c0f6b5f96bb1b114a7b1852c5b6804122e";
            };
            beamDeps  = [ floki_0_1_1 ];

            meta = {
              description = ''iOS Core Data parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/evolet-project/core_data";
            };
          }
      ) {};

    core_data = core_data_0_1_0;

    cors_plug_1_1_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "cors_plug";
            version = "1.1.0";
            src = fetchHex {
              pkg = "cors_plug";
              version = "1.1.0";
              sha256 =
                "b6ae0bf0c8a993d7f94f7061774e70403726b2ffe5d648964b72d6f42fd71979";
            };
            beamDeps  = [ plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              longDescription = ''An elixir plug that adds CORS headers to
                                requests and responds to preflight requests
                                (OPTIONS)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "http://github.com/mschae/cors_plug";
            };
          }
      ) {};

    cors_plug = cors_plug_1_1_0;

    corsica_0_4_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "corsica";
            version = "0.4.0";
            src = fetchHex {
              pkg = "corsica";
              version = "0.4.0";
              sha256 =
                "9f5e7c6b3e6b52f9b07d76f207fbe39273d9cb22099b6b3d83621ded29fb42d6";
            };
            beamDeps  = [ plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              description = ''Plug-based swiss-army knife for CORS requests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/corsica";
            };
          }
      ) {};

    corsica = corsica_0_4_0;

    couch_factory_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "couch_factory";
            version = "0.1.1";
            src = fetchHex {
              pkg = "couch_factory";
              version = "0.1.1";
              sha256 =
                "79b2e2c48bf6b036f959ff70c14b0d4da767e4bca7efae8f6c758eefab1a28d5";
            };

            meta = {
              description = ''Factory Girl implementation with CouchDb
                            persistence.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/javierg/couch_factory";
            };
          }
      ) {};

    couch_factory = couch_factory_0_1_1;

    couchbeam_1_2_1 = callPackage
      (
        {  buildRebar3, fetchHex, jsx_2_8_0, hackney_1_4_4 }:
          buildRebar3 {
            name = "couchbeam";
            version = "1.2.1";
            src = fetchHex {
              pkg = "couchbeam";
              version = "1.2.1";
              sha256 =
                "ed19f0412aa0539ecf622ac8ade1ca0e316f424e3334ad015a3fb8db19e91194";
            };

            beamDeps  = [ jsx_2_8_0 hackney_1_4_4 ];

            meta = {
              description = ''Erlang CouchDB client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benoitc/couchbeam";
            };
          }
      ) {};

    couchbeam = couchbeam_1_2_1;

    couchdb_client_0_2_5 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_1_5_2,
          httpoison_0_7_5,
          ex_doc_0_11_4,
          earmark_0_2_1
        }:
          buildMix {
            name = "couchdb_client";
            version = "0.2.5";
            src = fetchHex {
              pkg = "couchdb_client";
              version = "0.2.5";
              sha256 =
                "243c2fde196762dd6b664d3a91d111ac70336b22d91ca9aafc7c778e61ccb496";
            };
            beamDeps  = [
                          poison_1_5_2
                          httpoison_0_7_5
                          ex_doc_0_11_4
                          earmark_0_2_1
                        ];

            meta = {
              description = ''A partial yet functional CouchDB client, with
                            attachment support.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gutschilla/elixir-couchdb-client";
            };
          }
      ) {};

    couchdb_client = couchdb_client_0_2_5;

    couchdb_connector_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "couchdb_connector";
            version = "0.2.0";
            src = fetchHex {
              pkg = "couchdb_connector";
              version = "0.2.0";
              sha256 =
                "05ac95c3f08038c3f17c03be5f27922b919513dfd4582f2da150f70182dac01b";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              longDescription = ''A connector for CouchDB, the Erlang-based,
                                JSON document database. The connector does not
                                implement the protocols defined in Ecto.
                                Reasons: CouchDB does not support transactions
                                as known in the world of ACID compliant,
                                relational databases. The concept of migrations
                                also does not apply to CouchDB. And since
                                CouchDB does not implement an SQL dialect, the
                                decision was taken to not follow the standards
                                established by Ecto. The connector offers
                                `create`, `update` and `read` operations through
                                its Writer and Reader modules. Basic support for
                                view operations is provided by the View
                                module.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/locolupo/couchdb_connector";
            };
          }
      ) {};

    couchdb_connector = couchdb_connector_0_2_0;

    count_buffer_0_1_5 = callPackage
      (
        {  buildMix, fetchHex, pool_ring_0_1_5 }:
          buildMix {
            name = "count_buffer";
            version = "0.1.5";
            src = fetchHex {
              pkg = "count_buffer";
              version = "0.1.5";
              sha256 =
                "6e78dc0458dac8dae9d41d7857c7185b3164cecd9992a1407265ebfa3455544e";
            };
            beamDeps  = [ pool_ring_0_1_5 ];

            meta = {
              description = ''buffer a large set of counters and flush
                            periodically'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/count_buffer";
            };
          }
      ) {};

    count_buffer = count_buffer_0_1_5;

    countries_1_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "countries";
            version = "1.1.2";
            src = fetchHex {
              pkg = "countries";
              version = "1.1.2";
              sha256 =
                "8420314185aed4152340dcab3f8643d9c312610e2c065ee8709d8a097285149c";
            };

            meta = {
              longDescription = ''Countries is a collection of all sorts of
                                useful information for every country in the [ISO
                                3166](https://de.wikipedia.org/wiki/ISO_3166)
                                standard. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SebastianSzturo/countries";
            };
          }
      ) {};

    countries = countries_1_1_2;

    coverex_1_4_8 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "coverex";
            version = "1.4.8";
            src = fetchHex {
              pkg = "coverex";
              version = "1.4.8";
              sha256 =
                "47f03bd9d00b22893fda81273c310d30d96e849026f5c1d0ad664089c875bac6";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              longDescription = ''Coverex is an Elixir Coverage tool used by
                                mix. It provides tables with overviews of module
                                and function coverage data, includings links to
                                annotated source code files and supports
                                coveralls.io.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/alfert/coverex";
            };
          }
      ) {};

    coverex = coverex_1_4_8;

    cowboy_1_0_4 = callPackage
      (
        {  buildRebar3, fetchHex, cowlib_1_0_2, ranch_1_2_1 }:
          buildRebar3 {
            name = "cowboy";
            version = "1.0.4";
            src = fetchHex {
              pkg = "cowboy";
              version = "1.0.4";
              sha256 =
                "6a0edee96885fae3a8dd0ac1f333538a42e807db638a9453064ccfdaa6b9fdac";
            };

            beamDeps  = [ cowlib_1_0_2 ranch_1_2_1 ];

            meta = {
              description = ''Small, fast, modular HTTP server written in
                            Erlang.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowboy";
            };
          }
      ) {};

    cowboy = cowboy_1_0_4;

    cowboy_oauth_0_2_14 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          oauth2_erlang_0_6_1,
          libsnarl_0_3_40,
          lager_2_1_1,
          jsxd_0_1_10,
          jsx_1_4_5,
          erlydtl2_0_11_1,
          cowboy_1_0_4
        }:
          buildRebar3 {
            name = "cowboy_oauth";
            version = "0.2.14";
            src = fetchHex {
              pkg = "cowboy_oauth";
              version = "0.2.14";
              sha256 =
                "fc6b3da2a53d8527a08f6427745c85eb3b2da1e90de1a3fe290d4193ac4e5b09";
            };

            beamDeps  = [
                          oauth2_erlang_0_6_1
                          libsnarl_0_3_40
                          lager_2_1_1
                          jsxd_0_1_10
                          jsx_1_4_5
                          erlydtl2_0_11_1
                          cowboy_1_0_4
                        ];

            meta = {
              description = ''OAuth2 endpoints for cowboy and snarl.'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/cowboy_oauth";
            };
          }
      ) {};

    cowboy_oauth = cowboy_oauth_0_2_14;

    cowgirl_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "cowgirl";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cowgirl";
              version = "0.0.1";
              sha256 =
                "3b06ca6bb82fa3674ddad182cc479d9ab1538b83a4cf616c666e0d6f873c44e5";
            };

            meta = {
              description = ''Small, fast, modular HTTP server written in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/larrylv/cowgirl";
            };
          }
      ) {};

    cowgirl = cowgirl_0_0_1;

    cowlib_1_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "cowlib";
            version = "1.0.0";
            src = fetchHex {
              pkg = "cowlib";
              version = "1.0.0";
              sha256 =
                "4dacd60356177ec8cf93dbff399de17435b613f3318202614d3d5acbccee1474";
            };

            meta = {
              description = ''Support library for manipulating Web
                            protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowlib";
            };
          }
      ) {};

    cowlib_1_0_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "cowlib";
            version = "1.0.2";
            src = fetchHex {
              pkg = "cowlib";
              version = "1.0.2";
              sha256 =
                "db622da03aa039e6366ab953e31186cc8190d32905e33788a1acb22744e6abd2";
            };

            meta = {
              description = ''Support library for manipulating Web
                            protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowlib";
            };
          }
      ) {};

    cowlib_1_3_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "cowlib";
            version = "1.3.0";
            src = fetchHex {
              pkg = "cowlib";
              version = "1.3.0";
              sha256 =
                "2b1ac020ec92e7a59cb7322779870c2d3adc7c904ecb3b9fa406f04dc9816b73";
            };

            meta = {
              description = ''Support library for manipulating Web
                            protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowlib";
            };
          }
      ) {};

    cowlib = cowlib_1_3_0;

    cowsay_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "cowsay";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cowsay";
              version = "0.0.1";
              sha256 =
                "9f8a6634710974787751279b22ef5d7cb3c6a74db42636540ae5db37c4632e2a";
            };

            meta = {
              description = ''A cow-friend who will speak your mind'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bbrock25/cowsay";
            };
          }
      ) {};

    cowsay = cowsay_0_0_1;

    cpg_1_5_1 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          trie_1_5_1,
          reltool_util_1_5_1,
          quickrand_1_5_1
        }:
          buildRebar3 {
            name = "cpg";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cpg";
              version = "1.5.1";
              sha256 =
                "3bd7b7c48a0f959985d7038d6c533ee5540d12b8adfa6693409f4f6f492f4b45";
            };

            beamDeps  = [ trie_1_5_1 reltool_util_1_5_1 quickrand_1_5_1 ];

            meta = {
              description = ''CloudI Process Groups'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/okeuday/cpg";
            };
          }
      ) {};

    cpg = cpg_1_5_1;

    cqex_0_1_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "cqex";
            version = "0.1.4";
            src = fetchHex {
              pkg = "cqex";
              version = "0.1.4";
              sha256 =
                "3c6a461605cc7e664178e6343cb585aa8c453831bb4447519007fcfe39697328";
            };

            meta = {
              description = ''Idiomatic Elixir client for Cassandra.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/matehat/cqex";
            };
          }
      ) {};

    cqex = cqex_0_1_4;

    craterl_0_2_3 = callPackage
      (
        {  buildRebar3, fetchHex, jsx_2_7_1, hackney_1_3_1 }:
          buildRebar3 {
            name = "craterl";
            version = "0.2.3";
            src = fetchHex {
              pkg = "craterl";
              version = "0.2.3";
              sha256 =
                "bbbfa254fa5834d144f9061fff03035eca9a50b5e7581ce342c495b91af02929";
            };

            beamDeps  = [ jsx_2_7_1 hackney_1_3_1 ];

            meta = {
              description = ''erlang client for crate'';

            };
          }
      ) {};

    craterl = craterl_0_2_3;

    crc_0_3_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "crc";
            version = "0.3.0";
            src = fetchHex {
              pkg = "crc";
              version = "0.3.0";
              sha256 =
                "23d7cb6a18cca461f46f5a0f341c74fd0a680cdae62460687f1a24f0a7faabd4";
            };

            meta = {
              description = ''A library used to calculate CRC checksums for
                            binary data'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/TattdCodeMonkey/crc";
            };
          }
      ) {};

    crc = crc_0_3_0;

    credit_card_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "credit_card";
            version = "1.0.0";
            src = fetchHex {
              pkg = "credit_card";
              version = "1.0.0";
              sha256 =
                "c7dee15035f4ff925f08bc806c4bd1817209c64d8ba089d0731808ee35e97ba0";
            };

            meta = {
              description = ''A library for validating credit card numbers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/abakhi/credit_card";
            };
          }
      ) {};

    credit_card = credit_card_1_0_0;

    credo_0_1_10 = callPackage
      (
        {  buildMix, fetchHex, bunt_0_1_5 }:
          buildMix {
            name = "credo";
            version = "0.1.10";
            src = fetchHex {
              pkg = "credo";
              version = "0.1.10";
              sha256 =
                "2a52a3fc144bc5c70899381a58de603eb14751f4965dfea1866b20324b9806c0";
            };
            beamDeps  = [ bunt_0_1_5 ];

            meta = {
              longDescription = ''A static code analysis tool for the Elixir
                                language with a focus on code consistency and
                                teaching.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/credo";
            };
          }
      ) {};

    credo_0_3_3 = callPackage
      (
        {  buildMix, fetchHex, bunt_0_1_5 }:
          buildMix {
            name = "credo";
            version = "0.3.3";
            src = fetchHex {
              pkg = "credo";
              version = "0.3.3";
              sha256 =
                "9cf7816093412e31bad13f08f6713ed935312d3a0d489edc76187c21e01a6afe";
            };
            beamDeps  = [ bunt_0_1_5 ];

            meta = {
              longDescription = ''A static code analysis tool for the Elixir
                                language with a focus on code consistency and
                                teaching.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/credo";
            };
          }
      ) {};

    credo = credo_0_3_3;

    croma_0_3_8 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "croma";
            version = "0.3.8";
            src = fetchHex {
              pkg = "croma";
              version = "0.3.8";
              sha256 =
                "48735ed0a450c2101a884f14fba5d5946d27601426de220e2327feffb5cc2cca";
            };

            meta = {
              description = ''Elixir macro utilities'';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    croma = croma_0_3_8;

    crudex_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, plug_auth_0_2_0 }:
          buildMix {
            name = "crudex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "crudex";
              version = "0.0.2";
              sha256 =
                "2ccf07c728dbb328b9f869a87465c8ba647931ec68f563c4ddea99ec76fa4364";
            };
            beamDeps  = [ plug_auth_0_2_0 ];

            meta = {
              description = ''A glue keeping Phoenix and Ecto together'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/briksoftware/crudex";
            };
          }
      ) {};

    crudex = crudex_0_0_2;

    crutches_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "crutches";
            version = "1.0.0";
            src = fetchHex {
              pkg = "crutches";
              version = "1.0.0";
              sha256 =
                "cfd97962a22fe30820e6ca6d0671c763232a7edf149aa11bd62ee77dff0ffff0";
            };

            meta = {
              description = ''An Elixir toolbelt freely inspired from Ruby`s
                            ActiveSupport'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mykewould/crutches";
            };
          }
      ) {};

    crutches = crutches_1_0_0;

    cryptex_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "cryptex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cryptex";
              version = "0.0.1";
              sha256 =
                "19d709c6ffbda3c74ec811190d168170db0435720cbe788c0233bea4afee1d16";
            };

            meta = {
              description = ''An Elixir library for encrypting/decrypting,
                            signing/verifying data. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/cryptex";
            };
          }
      ) {};

    cryptex = cryptex_0_0_1;

    crypto_ext_0_1_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "crypto_ext";
            version = "0.1.1";
            src = fetchHex {
              pkg = "crypto_ext";
              version = "0.1.1";
              sha256 =
                "19715a35b392c557cc9503e2aa1f8fbd1dcd3cdcb11a0d2f73a3fe75f4db76b8";
            };
            compilePorts = true;

            meta = {
              description = ''Crypto lib extension to support AES 128 ECB
                            cipher'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adrienmo/crypto_ext";
            };
          }
      ) {};

    crypto_ext = crypto_ext_0_1_1;

    crypto_rsassa_pss_1_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "crypto_rsassa_pss";
            version = "1.0.0";
            src = fetchHex {
              pkg = "crypto_rsassa_pss";
              version = "1.0.0";
              sha256 =
                "d8f48874dbef940a8954126249499714e702d8ae0a8f23230a6c2f4a92833313";
            };

            meta = {
              description = ''RSASSA-PSS Public Key Cryptographic Signature
                            Algorithm for Erlang'';
              license = stdenv.lib.licenses.mpl20;
              homepage =
                "https://github.com/potatosalad/erlang-crypto_rsassa_pss";
            };
          }
      ) {};

    crypto_rsassa_pss = crypto_rsassa_pss_1_0_0;

    cspex_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, exactor_2_2_0 }:
          buildMix {
            name = "cspex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "cspex";
              version = "1.0.0";
              sha256 =
                "f5df9923dd4250444a3e9f5f49fa76398c0b1415d468047b9a83ef5480348646";
            };
            beamDeps  = [ exactor_2_2_0 ];

            meta = {
              description = ''A library that brings all the CSP joy to the
                            Elixir land.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vidalraphael/cspex";
            };
          }
      ) {};

    cspex = cspex_1_0_0;

    csv_1_2_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "csv";
            version = "1.2.4";
            src = fetchHex {
              pkg = "csv";
              version = "1.2.4";
              sha256 =
                "66fee1eaf536347d493942cb5e085321c51e80de124ff00f4b2651870b919b99";
            };

            meta = {
              description = ''CSV Decoding and Encoding for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/beatrichartz/csv";
            };
          }
      ) {};

    csv = csv_1_2_4;

    csvlixir_2_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "csvlixir";
            version = "2.0.2";
            src = fetchHex {
              pkg = "csvlixir";
              version = "2.0.2";
              sha256 =
                "f1e4ca61af3004a66efbe5d02486519a5d6c3610b9d5404352dbf6cd8ec593ec";
            };

            meta = {
              longDescription = ''CSVLixir is a CSV reader/writer for Elixir.
                                It operates on files and strings. The reader can
                                read CSV files or CSV strings. Reading from
                                files returns a stream of lists. Reading from
                                strings returns a list of lists. The writer
                                transforms a (possibly lazy) list of lists into
                                a stream of CSV strings. It can also take a
                                single list and return a single CSV string.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jimm/csvlixir";
            };
          }
      ) {};

    csvlixir = csvlixir_2_0_2;

    cth_readable_1_2_1 = callPackage
      (
        {  buildRebar3, fetchHex, cf_0_2_1 }:
          buildRebar3 {
            name = "cth_readable";
            version = "1.2.1";
            src = fetchHex {
              pkg = "cth_readable";
              version = "1.2.1";
              sha256 =
                "923ae5bd8a044695a3223cc6539126e69f91aff89bb924ccf38da9ee615d6492";
            };

            beamDeps  = [ cf_0_2_1 ];

            meta = {
              description = ''Common Test hooks for more readable logs'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/ferd/cth_readable";
            };
          }
      ) {};

    cth_readable = cth_readable_1_2_1;

    cuckoo_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, murmur_1_0_0 }:
          buildMix {
            name = "cuckoo";
            version = "1.0.0";
            src = fetchHex {
              pkg = "cuckoo";
              version = "1.0.0";
              sha256 =
                "18f31763c50c20bb89e1fbc4b9eb5b97f6ffc23e3a90ba4cf5e97ccd96da8df2";
            };
            beamDeps  = [ murmur_1_0_0 ];

            meta = {
              description = ''Cuckoo is a pure Elixir implementation of Cuckoo
                            Filters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmcabrita/cuckoo";
            };
          }
      ) {};

    cuckoo = cuckoo_1_0_0;

    cucumberl_0_0_6 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "cucumberl";
            version = "0.0.6";
            src = fetchHex {
              pkg = "cucumberl";
              version = "0.0.6";
              sha256 =
                "3b9ea813997fd8c1e3d2b004e89288496dc21d2e5027f432e5900569d2c61cf3";
            };

            meta = {
              description = ''A pure-erlang implementation of Cucumber.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ericbmerritt/cucumberl";
            };
          }
      ) {};

    cucumberl = cucumberl_0_0_6;

    cuid_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "cuid";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cuid";
              version = "0.1.0";
              sha256 =
                "80cd46bd323e05b706c60008368e631b559307b554c0acc54292ab2c73a3340b";
            };

            meta = {
              description = ''Generate collision-resistant ids, in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/duailibe/cuid";
            };
          }
      ) {};

    cuid = cuid_0_1_0;

    cure_0_4_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "cure";
            version = "0.4.1";
            src = fetchHex {
              pkg = "cure";
              version = "0.4.1";
              sha256 =
                "92ac6e2dfed6a955cdfedc6860fb84ec968400902b27dfd068e49ff82277932b";
            };

            meta = {
              longDescription = ''Interfaces Elixir with C/C++ code in a
                                user-friendly way! Based on Erlang-ports.
                                Provides a few Mix-tasks to kickstart the
                                development process.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Primordus/Cure.git";
            };
          }
      ) {};

    cure = cure_0_4_1;

    current_streak_ex_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, floki_0_7_1 }:
          buildMix {
            name = "current_streak_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "current_streak_ex";
              version = "0.1.0";
              sha256 =
                "08b846b7347fa134d845e0654b4775eba78e995675f18ec51533e7e42aa3abaa";
            };
            beamDeps  = [ httpoison_0_8_1 floki_0_7_1 ];

            meta = {
              description = ''Get github current streak which support only
                            public repositories.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/current_streak_ex";
            };
          }
      ) {};

    current_streak_ex = current_streak_ex_0_1_0;

    current_user_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "current_user";
            version = "0.0.1";
            src = fetchHex {
              pkg = "current_user";
              version = "0.0.1";
              sha256 =
                "8a400d8cbd02da89bccf67a357733b682e0d6d4c421b7230405ac16b1988809c";
            };

            meta = {
              description = ''Configurable user authentication for Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/halogenandtoast/current_user";
            };
          }
      ) {};

    current_user = current_user_0_0_1;

    currently_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "currently";
            version = "0.0.3";
            src = fetchHex {
              pkg = "currently";
              version = "0.0.3";
              sha256 =
                "50d7f8e0c6eb1dd4f434cd50c7447eb8f9e3d4c413161948df7363c41bf90ec1";
            };

            meta = {
              description = ''Currently is a tool to display cards currently
                            assigns on Trello '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chatgris/currently";
            };
          }
      ) {};

    currently = currently_0_0_3;

    curry_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "curry";
            version = "0.0.1";
            src = fetchHex {
              pkg = "curry";
              version = "0.0.1";
              sha256 =
                "e8f56fee1cb82ae2616c36021d4dd8c2b4169490e224dea84f63feb47475d6f0";
            };

            meta = {
              description = ''A simple currying macro allowing to define
                            curried functions in Elixir modules.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niahoo/elixir-curry";
            };
          }
      ) {};

    curry = curry_0_0_1;

    curtail_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "curtail";
            version = "0.1.0";
            src = fetchHex {
              pkg = "curtail";
              version = "0.1.0";
              sha256 =
                "0d43f4bcecf91c935a89cd52af62efa62e264b4c82a07e29e9945988735fdc1f";
            };

            meta = {
              description = ''HTML-safe string truncation.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/seankay/curtail";
            };
          }
      ) {};

    curtail = curtail_0_1_0;

    curtains_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, plug_1_0_3 }:
          buildMix {
            name = "curtains";
            version = "0.0.1";
            src = fetchHex {
              pkg = "curtains";
              version = "0.0.1";
              sha256 =
                "d547bd024049630fd072994a759befaab908fa69f5e200b2b584e12f12e9842f";
            };
            beamDeps  = [ plug_1_0_3 ];

            meta = {
              longDescription = ''Curtains is a Elixir package that "takes
                                over" your Elixir website by returning content
                                of a specified file (if it exists). This makes
                                it perfect for "Under construction" and
                                "Maintenance" pages. At it`s heart, it`s just a
                                Plug.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fteem/curtains";
            };
          }
      ) {};

    curtains = curtains_0_0_1;

    cushion_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, httpotion_2_1_0 }:
          buildMix {
            name = "cushion";
            version = "0.0.3";
            src = fetchHex {
              pkg = "cushion";
              version = "0.0.3";
              sha256 =
                "1371ab210bd3b7ef7381dbe3f53fedb8afbbb0c562f45d614e4849373919482b";
            };
            beamDeps  = [ httpotion_2_1_0 ];

            meta = {
              longDescription = ''A really simple Buffer API client for sending
                                updates. Right now it only supports sending text
                                updates, but hopefully will support more in the
                                future.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryanbillingsley/cushion";
            };
          }
      ) {};

    cushion = cushion_0_0_3;

    custom_base_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "custom_base";
            version = "0.1.0";
            src = fetchHex {
              pkg = "custom_base";
              version = "0.1.0";
              sha256 =
                "3a75d9cabcad3936e9194d387966213cb13a4d14b7b69f2cea0fc22ff2f76726";
            };

            meta = {
              description = ''Allow you to make custom base conversion in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/igas/custom_base";
            };
          }
      ) {};

    custom_base_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "custom_base";
            version = "0.2.0";
            src = fetchHex {
              pkg = "custom_base";
              version = "0.2.0";
              sha256 =
                "d7c26409eb22b00d69f591fd89cc4e84550656862c655c7ae3edf63f7381899b";
            };

            meta = {
              description = ''Allow you to make custom base conversion in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/igas/custom_base";
            };
          }
      ) {};

    custom_base = custom_base_0_2_0;

    cuttlefish_2_0_7 = callPackage
      (
        {  buildRebar3, fetchHex, lager_3_0_2, getopt_0_8_2 }:
          buildRebar3 {
            name = "cuttlefish";
            version = "2.0.7";
            src = fetchHex {
              pkg = "cuttlefish";
              version = "2.0.7";
              sha256 =
                "57589747ba40a75c53872002cd251a2933102457cdcc99b8ed72823ba1288869";
            };

            beamDeps  = [ lager_3_0_2 getopt_0_8_2 ];

            meta = {
              description = ''cuttlefish configuration abstraction'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/tsloughter/cuttlefish";
            };
          }
      ) {};

    cuttlefish = cuttlefish_2_0_7;

    cypher_query_0_0_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "cypher_query";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cypher_query";
              version = "0.0.1";
              sha256 =
                "068bee4f13275d3448a4676bf113d5b2e414b47a9f84bb6e1614a009104c3f30";
            };

            meta = {
              description = ''A dumb string-based query builder for neo4j
                            Cypher queries'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/collin/cypher_query";
            };
          }
      ) {};

    cypher_query = cypher_query_0_0_1;

    database_url_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "database_url";
            version = "0.1.0";
            src = fetchHex {
              pkg = "database_url";
              version = "0.1.0";
              sha256 =
                "273c8c926761d5716fee17c8a8494583d729a4419e30479a292eb6cea3d9a756";
            };

            meta = {
              description = ''Parse database URL and renturn keyword list for
                            use with Ecto.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/s-m-i-t-a/database_url";
            };
          }
      ) {};

    database_url = database_url_0_1_0;

    datomex_0_0_5 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_1_5_2,
          httpoison_0_8_1,
          ex_doc_0_6_2,
          erldn_1_0_5
        }:
          buildMix {
            name = "datomex";
            version = "0.0.5";
            src = fetchHex {
              pkg = "datomex";
              version = "0.0.5";
              sha256 =
                "bb2a5171a5d7783e40776db7fe7a6bff73ff69a4da4205c83b39c26ff73488c0";
            };
            beamDeps  = [
                          poison_1_5_2 httpoison_0_8_1 ex_doc_0_6_2 erldn_1_0_5
                        ];

            meta = {
              description = ''Low level Elixir driver for the Datomic Database.
                            '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edubkendo/datomex";
            };
          }
      ) {};

    datomex = datomex_0_0_5;

    datomic_gen_server_1_1_0 = callPackage
      (
        {  buildMix, fetchHex, exdn_2_1_2 }:
          buildMix {
            name = "datomic_gen_server";
            version = "1.1.0";
            src = fetchHex {
              pkg = "datomic_gen_server";
              version = "1.1.0";
              sha256 =
                "c5369270fa9a21544efc359e80eff4b24d5dfbe869c211da0df6ebf216afa5a3";
            };
            beamDeps  = [ exdn_2_1_2 ];

            meta = {
              longDescription = ''An Elixir GenServer that communicates with a
                                Clojure Datomic peer running in the JVM, using
                                clojure-erlastic.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/psfblair/datomic_gen_server";
            };
          }
      ) {};

    datomic_gen_server = datomic_gen_server_1_1_0;

    db_0_9_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "db";
            version = "0.9.0";
            src = fetchHex {
              pkg = "db";
              version = "0.9.0";
              sha256 =
                "23d0307bc227782b1c0c86bb5b66130312cf3eb4363f3f39d5b1fc84140b3a91";
            };

            meta = {
              description = ''Banking Database'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/spawnproc/db";
            };
          }
      ) {};

    db = db_0_9_0;

    db_connection_0_2_3 = callPackage
      (
        {
          buildMix,
          fetchHex,
          sbroker_0_7_0,
          poolboy_1_5_1,
          connection_1_0_2
        }:
          buildMix {
            name = "db_connection";
            version = "0.2.3";
            src = fetchHex {
              pkg = "db_connection";
              version = "0.2.3";
              sha256 =
                "16a1e0a968b3610fd482f64266411bde554515572c2b184af493d749ef206fca";
            };
            beamDeps  = [ sbroker_0_7_0 poolboy_1_5_1 connection_1_0_2 ];

            meta = {
              description = ''Database connection behaviour for database
                            transactions and connection pooling'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/db_connection";
            };
          }
      ) {};

    db_connection = db_connection_0_2_3;

    dbg_1_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dbg";
            version = "1.0.1";
            src = fetchHex {
              pkg = "dbg";
              version = "1.0.1";
              sha256 =
                "866159f496a1ad9b959501f16db3d1338bb6cef029a75a67ca5615d25b38345f";
            };

            meta = {
              description = ''Distributed tracing'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/dbg";
            };
          }
      ) {};

    dbg = dbg_1_0_1;

    dbus_0_4_0 = callPackage
      (
        {  buildMix, fetchHex, poolboy_1_5_1, eredis_1_0_8 }:
          buildMix {
            name = "dbus";
            version = "0.4.0";
            src = fetchHex {
              pkg = "dbus";
              version = "0.4.0";
              sha256 =
                "d743b06a73286622af4a9390c4a16dcc5bce6be184ed660cfd76bd2f0b8ebedb";
            };
            beamDeps  = [ poolboy_1_5_1 eredis_1_0_8 ];

            meta = {
              description = ''A native erlang implementation of D-Bus'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/lizenn/erlang-dbus";
            };
          }
      ) {};

    dbus = dbus_0_4_0;

    ddb_client_0_1_17 = callPackage
      (
        {  buildRebar3, fetchHex, mmath_0_1_15, dproto_0_1_12 }:
          buildRebar3 {
            name = "ddb_client";
            version = "0.1.17";
            src = fetchHex {
              pkg = "ddb_client";
              version = "0.1.17";
              sha256 =
                "8a65ef0f4e1edb2c575f8c8b38b4fed51ea94fd6c6ec39cc464a66dab45e0892";
            };

            beamDeps  = [ mmath_0_1_15 dproto_0_1_12 ];

            meta = {
              description = ''DalmatinerDB client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/ddb_client";
            };
          }
      ) {};

    ddb_client = ddb_client_0_1_17;

    dealer_0_8_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "dealer";
            version = "0.8.0";
            src = fetchHex {
              pkg = "dealer";
              version = "0.8.0";
              sha256 =
                "c8c72d38e1cff6a181a6b6f627fb6fd5998279827519e598eb28bcef2be721ee";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''An API Client for Stockfighter.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/larrylv/dealer";
            };
          }
      ) {};

    dealer = dealer_0_8_0;

    decimal_0_2_5 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "decimal";
            version = "0.2.5";
            src = fetchHex {
              pkg = "decimal";
              version = "0.2.5";
              sha256 =
                "2e2d871c68fea7cc86eb20826cdb6fccec1b6b242bae46d958806e598dc3c947";
            };

            meta = {
              description = ''Arbitrary precision decimal arithmetic for
                            Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/decimal";
            };
          }
      ) {};

    decimal_1_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "decimal";
            version = "1.1.1";
            src = fetchHex {
              pkg = "decimal";
              version = "1.1.1";
              sha256 =
                "c73f361389c2221e2fda0e2ba63c6de88d1545b00ddc0b4d5885202ccc34c568";
            };

            meta = {
              description = ''Arbitrary precision decimal arithmetic for
                            Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/decimal";
            };
          }
      ) {};

    decimal = decimal_1_1_1;

    decks_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "decks";
            version = "0.0.1";
            src = fetchHex {
              pkg = "decks";
              version = "0.0.1";
              sha256 =
                "de75b96c66f23c365935949ec53efab1f2f5d187803c26d733dd3b2df535af7d";
            };

            meta = {
              description = ''Implements standard card decks for Elixir-based
                            card games.'';

            };
          }
      ) {};

    decks = decks_0_0_1;

    decoction_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "decoction";
            version = "0.0.1";
            src = fetchHex {
              pkg = "decoction";
              version = "0.0.1";
              sha256 =
                "cdf7ad35cdf87962e153bb56d9c68f8dd061469d58cae8923cbdcd2980d7adc0";
            };

            meta = {
              description = ''Decoction is a static site generator written in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aarvay/decoction";
            };
          }
      ) {};

    decoction = decoction_0_0_1;

    defmemo_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "defmemo";
            version = "0.1.1";
            src = fetchHex {
              pkg = "defmemo";
              version = "0.1.1";
              sha256 =
                "8fefc49ff64b06fdb1ee15292419c16919a7a3c6b8e5cac6afd7a13919715e0f";
            };

            meta = {
              description = '' A memoization macro (defmemo) for elixir using a
                            genserver backing store. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/os6sense/DefMemo";
            };
          }
      ) {};

    defmemo = defmemo_0_1_1;

    delayed_otp_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "delayed_otp";
            version = "0.0.2";
            src = fetchHex {
              pkg = "delayed_otp";
              version = "0.0.2";
              sha256 =
                "22fe457d78fe1f216dcfca8c84431ac1f31e93267fdd563a5ca86c8289e2620f";
            };

            meta = {
              longDescription = ''Delay death of supervisor children or
                                gen_server : for instance Erlang supervisor with
                                exponential backoff restart strategy.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/delayed_otp";
            };
          }
      ) {};

    delayed_otp = delayed_otp_0_0_2;

    delegate_behaviour_0_1_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "delegate_behaviour";
            version = "0.1.3";
            src = fetchHex {
              pkg = "delegate_behaviour";
              version = "0.1.3";
              sha256 =
                "15b335b5c30072ce8e0845eeb8116397ef357efbfbc64b59b6c113b96520e9c5";
            };

            meta = {
              description = ''Macros to define modules that delegate to
                            concrete implementations of behaviours'';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    delegate_behaviour = delegate_behaviour_0_1_3;

    demacro_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "demacro";
            version = "0.0.1";
            src = fetchHex {
              pkg = "demacro";
              version = "0.0.1";
              sha256 =
                "e2a83d48f6b3e03764baf2e149dd5420e632d0d4daa77c5226697a3755a89d16";
            };
             meta = {    };
          }
      ) {};

    demacro = demacro_0_0_1;

    denrei_0_2_3 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "denrei";
            version = "0.2.3";
            src = fetchHex {
              pkg = "denrei";
              version = "0.2.3";
              sha256 =
                "bc0e8cf7e085dda6027df83ef5d63c41b93988bcd7f3db7c68e4dad3cd599744";
            };

            meta = {
              description = ''Denrei - a lightweight Erlang messaging
                            system.'';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    denrei = denrei_0_2_3;

    descriptive_statistics_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "descriptive_statistics";
            version = "0.0.1";
            src = fetchHex {
              pkg = "descriptive_statistics";
              version = "0.0.1";
              sha256 =
                "52004394a60aa8b7df57dda43591de6187a34a31ef64b0a4eecd140a647e2050";
            };

            meta = {
              longDescription = ''Descriptive Statistics is a library that
                                allows you to compute simple descriptive
                                statistics in Elixir. Inspired by
                                https://github.com/thirtysixthspan/descriptive_statistics.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pusewicz/descriptive_statistics";
            };
          }
      ) {};

    descriptive_statistics = descriptive_statistics_0_0_1;

    detergent_0_3_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "detergent";
            version = "0.3.0";
            src = fetchHex {
              pkg = "detergent";
              version = "0.3.0";
              sha256 =
                "510cfb5d35b4b344762f074b73c8696b4bdde654ea046b3365cf92760ae33362";
            };

            meta = {
              description = ''An emulsifying Erlang SOAP library'';
              license = with stdenv.lib.licenses; [ unlicense bsd3 ];
              homepage = "https://github.com/devinus/detergent";
            };
          }
      ) {};

    detergent = detergent_0_3_0;

    detergentex_0_0_7 = callPackage
      (
        {  buildMix, fetchHex, detergent_0_3_0 }:
          buildMix {
            name = "detergentex";
            version = "0.0.7";
            src = fetchHex {
              pkg = "detergentex";
              version = "0.0.7";
              sha256 =
                "6bb1bc2fe9228f97e512ef012c473ed822263dc38c3dbaa727fcd111ce1c4771";
            };
            beamDeps  = [ detergent_0_3_0 ];

            meta = {
              description = ''Elixir binding to Detergent erlang library used
                            to call WSDL SOAP Services'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/r-icarus/detergentex";
            };
          }
      ) {};

    detergentex = detergentex_0_0_7;

    dexts_0_2_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dexts";
            version = "0.2.1";
            src = fetchHex {
              pkg = "dexts";
              version = "0.2.1";
              sha256 =
                "9e5cfb3c4546b2f40713b7176556dfd5a839d77b6953ddaf9f06054a5c827ca4";
            };

            meta = {
              description = ''dets wrapper for Elixir'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/dexts";
            };
          }
      ) {};

    dexts = dexts_0_2_1;

    dflow_0_1_5 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "dflow";
            version = "0.1.5";
            src = fetchHex {
              pkg = "dflow";
              version = "0.1.5";
              sha256 =
                "f08e73f22d4c620ef5f358a0b40f8fe3b91219ca3922fbdbe7e42f1cb58f737e";
            };

            meta = {
              description = ''Pipelined flow processing engine'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/dflow";
            };
          }
      ) {};

    dflow = dflow_0_1_5;

    di_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, poison_2_1_0, httpoison_0_8_1 }:
          buildMix {
            name = "di";
            version = "0.1.0";
            src = fetchHex {
              pkg = "di";
              version = "0.1.0";
              sha256 =
                "d7a89568c986c98399667faeb618d5cc42a89965717e758323aa5370d1547260";
            };
            beamDeps  = [ poison_2_1_0 httpoison_0_8_1 ];

            meta = {
              description = ''Elixir wrapper for DI.FM'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JoshuaThompson/di";
            };
          }
      ) {};

    di = di_0_1_0;

    dialyxir_0_3_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dialyxir";
            version = "0.3.3";
            src = fetchHex {
              pkg = "dialyxir";
              version = "0.3.3";
              sha256 =
                "8851d7c582ce9db43b0564f026b2f6a461df62e139a7891fde50f9b6a7fc496c";
            };

            meta = {
              description = ''Mix tasks to simplify use of Dialyzer in Elixir
                            projects.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jeremyjh/dialyxir";
            };
          }
      ) {};

    dialyxir = dialyxir_0_3_3;

    dialyze_0_1_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dialyze";
            version = "0.1.4";
            src = fetchHex {
              pkg = "dialyze";
              version = "0.1.4";
              sha256 =
                "af9d6c37d8c067aaee959d4e1701e045e011906217c9f772218a3abaa92e4505";
            };

            meta = {
              description = ''Dialyzer Mix task'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/dialyze";
            };
          }
      ) {};

    dialyze_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dialyze";
            version = "0.2.0";
            src = fetchHex {
              pkg = "dialyze";
              version = "0.2.0";
              sha256 =
                "05efe534da3b6d0a89cb655f3dc7cf3a99088b0832c5a75a9898a6241ff01cd2";
            };

            meta = {
              description = ''Dialyzer Mix task'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/dialyze";
            };
          }
      ) {};

    dialyze = dialyze_0_2_0;

    diane_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, sweet_xml_0_4_0 }:
          buildMix {
            name = "diane";
            version = "0.0.1";
            src = fetchHex {
              pkg = "diane";
              version = "0.0.1";
              sha256 =
                "cb4a9984aab545f376d32f13b4ab612ba32a603781ddd743658d9c3991a4a89d";
            };
            beamDeps  = [ sweet_xml_0_4_0 ];

            meta = {
              description = ''RSS/Atom parser for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ptrckbrwn/diane";
            };
          }
      ) {};

    diane = diane_0_0_1;

    dice_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dice";
            version = "0.0.1";
            src = fetchHex {
              pkg = "dice";
              version = "0.0.1";
              sha256 =
                "975795636d6374bf120669cdbd6008a64bdd193a2ff202ffbdeefaa03d11bb9c";
            };

            meta = {
              description = ''Library and CLI app for rolling dice '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stocks29/dice";
            };
          }
      ) {};

    dice = dice_0_0_1;

    dice_roller_1_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dice_roller";
            version = "1.0.1";
            src = fetchHex {
              pkg = "dice_roller";
              version = "1.0.1";
              sha256 =
                "a9c4b9a85dc7d26a78ff1dcc58aee9e6bcc9df473531b032d95e6cd6e2402679";
            };

            meta = {
               license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KevinGreene/DiceRoller";
            };
          }
      ) {};

    dice_roller = dice_roller_1_0_1;

    dicer_0_8_0 = callPackage
      (
        {  buildMix, fetchHex, sfmt_0_12_2 }:
          buildMix {
            name = "dicer";
            version = "0.8.0";
            src = fetchHex {
              pkg = "dicer";
              version = "0.8.0";
              sha256 =
                "834e5d3f4cd9afac655e0f27869ecfdf6fa4ea061ad9ededdc6f295f71325960";
            };
            beamDeps  = [ sfmt_0_12_2 ];

            meta = {
              description = ''Elixir library to calculate dice rolls. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/olhado/dicer";
            };
          }
      ) {};

    dicer = dicer_0_8_0;

    dicks_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_7_5, exjsx_3_1_0 }:
          buildMix {
            name = "dicks";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dicks";
              version = "0.1.0";
              sha256 =
                "66d1a93ad1753361f2fc82033805a5f4c03ff295c78123e497f1ec56b9815be3";
            };
            beamDeps  = [ httpoison_0_7_5 exjsx_3_1_0 ];

            meta = {
              longDescription = ''An Elixir client for the Dick As A Service
                                platform http://dicks-api.herokuapp.com '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Annwenn/DicksEx";
            };
          }
      ) {};

    dicks = dicks_0_1_0;

    dicon_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dicon";
            version = "0.2.0";
            src = fetchHex {
              pkg = "dicon";
              version = "0.2.0";
              sha256 =
                "7da0fb146e81f34a6112594c88682c89b8cdf0ab9ccdaa92547399c283f2f98f";
            };

            meta = {
              description = ''Simple release deliverer for Elixir'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/dicon";
            };
          }
      ) {};

    dicon = dicon_0_2_0;

    difficult_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, ex_doc_0_11_4, earmark_0_2_1 }:
          buildMix {
            name = "difficult";
            version = "0.0.2";
            src = fetchHex {
              pkg = "difficult";
              version = "0.0.2";
              sha256 =
                "5e47c31935cd81082942ac4515c24cad2630ef024e27c5e9cde96f60a93cc39b";
            };
            beamDeps  = [ ex_doc_0_11_4 earmark_0_2_1 ];

            meta = {
              description = ''Difficult, but computable functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/massn/Difficult";
            };
          }
      ) {};

    difficult = difficult_0_0_2;

    digoc_0_3_3 = callPackage
      (
        {  buildMix, fetchHex, poison_1_3_1, httpoison_0_8_1 }:
          buildMix {
            name = "digoc";
            version = "0.3.3";
            src = fetchHex {
              pkg = "digoc";
              version = "0.3.3";
              sha256 =
                "23d5c2f1b977b1f3e12567879a20bc211898efdfcac9a0b6802324bc42ea0605";
            };
            beamDeps  = [ poison_1_3_1 httpoison_0_8_1 ];

            meta = {
              description = ''An Elixir client for the Digital Ocean API v2.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kevinmontuori/digoc";
            };
          }
      ) {};

    digoc = digoc_0_3_3;

    dir_walker_0_0_6 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dir_walker";
            version = "0.0.6";
            src = fetchHex {
              pkg = "dir_walker";
              version = "0.0.6";
              sha256 =
                "5bf891b970cca8df7d6e7d94857c508d2f5b48c615903427edbcbc483358fc92";
            };

            meta = {
              longDescription = ''DirWalker lazily traverses one or more
                                directory trees, depth first, returning
                                successive file names. Initialize the walker
                                using {:ok, walker} = DirWalker.start_link(path)
                                # or [path, path...] Then return the next `n`
                                path names using paths = DirWalker.next(walker
                                <, n \ 1>) Successive calls to `next` will
                                return successive file names, until all file
                                names have been returned. These methods have
                                also been wrapped into a Stream resource. paths
                                = DirWalker.stream(path) # or [path,path...] '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/dir_walker";
            };
          }
      ) {};

    dir_walker = dir_walker_0_0_6;

    discount_0_7_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "discount";
            version = "0.7.0";
            src = fetchHex {
              pkg = "discount";
              version = "0.7.0";
              sha256 =
                "a37b7890620f93aa2fae06eee364cd906991588bc8897e659f51634179519c97";
            };

            meta = {
              description = ''Elixir NIF for discount, a Markdown parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/discount.ex";
            };
          }
      ) {};

    discount = discount_0_7_0;

    discovery_0_5_7 = callPackage
      (
        {  buildMix, fetchHex, hash_ring_ex_1_1_2, consul_1_0_3 }:
          buildMix {
            name = "discovery";
            version = "0.5.7";
            src = fetchHex {
              pkg = "discovery";
              version = "0.5.7";
              sha256 =
                "e252044547397e53c52809d5b76070f302e243992c4cbfa233fc4fa44927ccc8";
            };
            beamDeps  = [ hash_ring_ex_1_1_2 consul_1_0_3 ];

            meta = {
              description = ''An OTP application for auto-discovering services
                            with Consul '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/undeadlabs/discovery";
            };
          }
      ) {};

    discovery = discovery_0_5_7;

    dismake_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dismake";
            version = "1.0.0";
            src = fetchHex {
              pkg = "dismake";
              version = "1.0.0";
              sha256 =
                "7eeff4a362ed4b4250e4090caa6861ee7b27a524919f574b9f836067b63ac058";
            };

            meta = {
              description = ''Dismake is a "compiler" (as in Mix.compilers)
                            that just runs make. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jarednorman/dismake";
            };
          }
      ) {};

    dismake = dismake_1_0_0;

    distance_api_matrix_1_0_3 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "distance_api_matrix";
            version = "1.0.3";
            src = fetchHex {
              pkg = "distance_api_matrix";
              version = "1.0.3";
              sha256 =
                "e4b6848481f4c8f5f15ad1c9f116816a3941f7c96df37fbad350faffc7887a6a";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Google Distance Matrix API Library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/C404/distance-api-matrix";
            };
          }
      ) {};

    distance_api_matrix = distance_api_matrix_1_0_3;

    distancex_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2 }:
          buildMix {
            name = "distancex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "distancex";
              version = "0.1.0";
              sha256 =
                "62d78de83026d809dc93c1ea92452cffc6e905f157e9dfa25cbc51b44e54d6f4";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              longDescription = ''Elixir-wrapper for Google Directions API. Can
                                return the drive time and driving distance
                                between two places.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vysakh0/distancex";
            };
          }
      ) {};

    distancex = distancex_0_1_0;

    diver_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "diver";
            version = "0.1.1";
            src = fetchHex {
              pkg = "diver";
              version = "0.1.1";
              sha256 =
                "6860e05da87741be919e0b4264178e0ca1b50a108bcaeb1a2a51c9e1726d3079";
            };

            meta = {
              longDescription = ''A HBase driver for Erlang/Elixir using
                                jinterface and the Asynchbase Java client to
                                query the database. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/novabyte/diver";
            };
          }
      ) {};

    diver = diver_0_1_1;

    dlist_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dlist";
            version = "0.0.1";
            src = fetchHex {
              pkg = "dlist";
              version = "0.0.1";
              sha256 =
                "51c9d4a9e02c9a8892450876939d1e18b7f9ae78b237a683f0efad47d46e5f9a";
            };

            meta = {
              description = ''Deque implementations '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stocks29/dlist.git";
            };
          }
      ) {};

    dlist = dlist_0_0_1;

    dns_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dns";
            version = "0.0.3";
            src = fetchHex {
              pkg = "dns";
              version = "0.0.3";
              sha256 =
                "60f4ff5a01cf95bbeb7b407712bcf833092280f6cc0c34ab09d2c0415fcb842e";
            };

            meta = {
              longDescription = ''DNS library for Elixir. Currently, the
                                package provides: - Elixir structs to interface
                                with `inet_dns` module. - DNS.Server behavior -
                                DNS.Client Note: the `inet_dns` module is
                                considered internal to Erlang and subject to
                                change. If this happened this library will be
                                updated to accommodate for that, but for now
                                `inet_dns` is simple and worked for me.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/tungd/elixir-dns";
            };
          }
      ) {};

    dns = dns_0_0_3;

    dnsimple_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_7_5 }:
          buildMix {
            name = "dnsimple";
            version = "0.0.1";
            src = fetchHex {
              pkg = "dnsimple";
              version = "0.0.1";
              sha256 =
                "37acb9b7a35f9383ed98754e5bee5c479b91ac739ec566befa32d9baccdb4105";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_7_5 ];

            meta = {
              description = ''An (experimental) Elixir client for the DNSimple
                            API v2.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/weppos/dnsimple-elixir";
            };
          }
      ) {};

    dnsimple = dnsimple_0_0_1;

    doc_plug_1_0_2 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "doc_plug";
            version = "1.0.2";
            src = fetchHex {
              pkg = "doc_plug";
              version = "1.0.2";
              sha256 =
                "2813f85dcd4f7228d54c277898d3d7483d03ef27ed4f9abc9eae6f57b00e79b8";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              description = ''Plug to automatically generate and serve project
                            documentation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hild/doc_plug";
            };
          }
      ) {};

    doc_plug = doc_plug_1_0_2;

    docker_0_3_0 = callPackage
      (
        {  buildRebar3, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildRebar3 {
            name = "docker";
            version = "0.3.0";
            src = fetchHex {
              pkg = "docker";
              version = "0.3.0";
              sha256 =
                "ad97dbaa51a615a7694018d95b0b09403b6d552a03ddb3ba50f121c814cc624a";
            };

            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Elixir client for the Docker Remote API using
                            HTTPoison. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/hexedpackets/docker-elixir";
            };
          }
      ) {};

    docker = docker_0_3_0;

    dogma_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2 }:
          buildMix {
            name = "dogma";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dogma";
              version = "0.1.0";
              sha256 =
                "cd261c67d712ce4e9d8020d9cb6627c756db8dc5466c169611d81b79c5a261d0";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''A code style linter for Elixir, powered by
                            shame.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/dogma";
            };
          }
      ) {};

    dogma = dogma_0_1_0;

    dogstatsd_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dogstatsd";
            version = "0.0.3";
            src = fetchHex {
              pkg = "dogstatsd";
              version = "0.0.3";
              sha256 =
                "4632886c61e928f57359790ad345d3cc58c37b0f82fb7d35d485a8e2385cf887";
            };

            meta = {
              description = ''A client for DogStatsd, an extension of the
                            StatsD metric server for Datadog.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamkittelson/dogstatsd-elixir";
            };
          }
      ) {};

    dogstatsd = dogstatsd_0_0_3;

    dot_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dot";
            version = "0.0.3";
            src = fetchHex {
              pkg = "dot";
              version = "0.0.3";
              sha256 =
                "3411bf1f70bb8ea0caa64515054a4a161b711667a5cdb0e7c14e766ce04b06ae";
            };
             meta = {    };
          }
      ) {};

    dot = dot_0_0_3;

    dotenv_0_0_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dotenv";
            version = "0.0.4";
            src = fetchHex {
              pkg = "dotenv";
              version = "0.0.4";
              sha256 =
                "e5243714a0fa0fbb6b5f466b1302db3a5fdb28363460fd4d282167e476cf703d";
            };

            meta = {
              description = ''A port of dotenv to Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avdi/dotenv_elixir";
            };
          }
      ) {};

    dotenv_2_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dotenv";
            version = "2.0.0";
            src = fetchHex {
              pkg = "dotenv";
              version = "2.0.0";
              sha256 =
                "bff466b9c1976a17ec1536e095b192e77ec2e2554fd229f23bbb7b598838d95f";
            };

            meta = {
              description = ''A port of dotenv to Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avdi/dotenv_elixir";
            };
          }
      ) {};

    dotenv = dotenv_2_0_0;

    dotenv_elixir_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dotenv_elixir";
            version = "0.0.2";
            src = fetchHex {
              pkg = "dotenv_elixir";
              version = "0.0.2";
              sha256 =
                "b7b95bff53df3bee1f500a24543bfb4c5c90b69c741454a86509b5a26c0355b7";
            };

            meta = {
              description = ''A port of dotenv to Elixir '';

              homepage = "https://github.com/avdi/dotenv_elixir";
            };
          }
      ) {};

    dotenv_elixir = dotenv_elixir_0_0_2;

    dovetail_0_0_3 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "dovetail";
            version = "0.0.3";
            src = fetchHex {
              pkg = "dovetail";
              version = "0.0.3";
              sha256 =
                "01b6c3085ebb9cb7d43115c7a2d9780a840017e521daeb7d0a2233f61f8b0306";
            };

            meta = {
              description = ''Dovetail provides a harness for running test
                            dovecot servers.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/thusfresh/dovetail";
            };
          }
      ) {};

    dovetail = dovetail_0_0_3;

    dpd_client_0_0_6 = callPackage
      (
        {  buildMix, fetchHex, hackney_1_0_6, poison_1_0_3 }:
          buildMix {
            name = "dpd_client";
            version = "0.0.6";
            src = fetchHex {
              pkg = "dpd_client";
              version = "0.0.6";
              sha256 =
                "080d8e9e4c68db87e42ead3fa3ffbc8cde2cadac441dbe81fa7a1b903486cc2d";
            };
            beamDeps  = [ hackney_1_0_6 poison_1_0_3 ];

            meta = {
              longDescription = ''`dpd_client` is an API client for the DPD
                                service. It only supports a few of the API`s
                                endpoints at present. '';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    dpd_client = dpd_client_0_0_6;

    dproto_0_1_12 = callPackage
      (
        {  buildRebar3, fetchHex, mmath_0_1_15 }:
          buildRebar3 {
            name = "dproto";
            version = "0.1.12";
            src = fetchHex {
              pkg = "dproto";
              version = "0.1.12";
              sha256 =
                "49e2a048293a6c6213b69b5e983c581f81de0536e9acb5c47cd113ef410abbcf";
            };

            beamDeps  = [ mmath_0_1_15 ];

            meta = {
              description = ''Protocols for dalmatinerdb'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/dproto";
            };
          }
      ) {};

    dproto = dproto_0_1_12;

    dqe_0_1_33 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          qdate_0_4_2,
          poolboy_1_5_1,
          mmath_0_1_16,
          lager_3_0_2,
          dproto_0_1_12,
          dflow_0_1_5,
          ddb_client_0_1_17
        }:
          buildRebar3 {
            name = "dqe";
            version = "0.1.33";
            src = fetchHex {
              pkg = "dqe";
              version = "0.1.33";
              sha256 =
                "b3c4eded2953afff00df0e33534b36e8bcceccafa9c11fd3438e1a88d570bb41";
            };

            beamDeps  = [
                          qdate_0_4_2
                          poolboy_1_5_1
                          mmath_0_1_16
                          lager_3_0_2
                          dproto_0_1_12
                          dflow_0_1_5
                          ddb_client_0_1_17
                        ];

            meta = {
              description = ''DalmatinerDB query engine'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/dqe";
            };
          }
      ) {};

    dqe = dqe_0_1_33;

    drawille_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, ex_doc_0_10_0, earmark_0_1_19 }:
          buildMix {
            name = "drawille";
            version = "0.0.1";
            src = fetchHex {
              pkg = "drawille";
              version = "0.0.1";
              sha256 =
                "58d631fee40578dc077603c8cb969e3efa32c098c9d6295648432b07728d8ae3";
            };
            beamDeps  = [ ex_doc_0_10_0 earmark_0_1_19 ];

            meta = {
              description = ''Drawings using terminal braille characters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/massn/elixir-drawille";
            };
          }
      ) {};

    drawille = drawille_0_0_1;

    dropbox_0_0_7 = callPackage
      (
        {  buildMix, fetchHex, hackney_1_0_6, jazz_0_2_1 }:
          buildMix {
            name = "dropbox";
            version = "0.0.7";
            src = fetchHex {
              pkg = "dropbox";
              version = "0.0.7";
              sha256 =
                "d881be0c042856e0b2ff446dfac0b64337f5cbbb18479f4c81080d3d2cd7e4af";
            };
            beamDeps  = [ hackney_1_0_6 jazz_0_2_1 ];

            meta = {
              description = ''A Dropbox Core API client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ammmir/elixir-dropbox";
            };
          }
      ) {};

    dropbox = dropbox_0_0_7;

    dublin_bus_api_0_1_5 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, floki_0_7_1 }:
          buildMix {
            name = "dublin_bus_api";
            version = "0.1.5";
            src = fetchHex {
              pkg = "dublin_bus_api";
              version = "0.1.5";
              sha256 =
                "54fb2c72fa682481970b126f53a45f2a38cc8d7fdff132483534f4ff04407bc1";
            };
            beamDeps  = [ httpoison_0_8_1 floki_0_7_1 ];

            meta = {
              description = ''Access to the Real Time Passenger Information
                            (RTPI) for Dublin Bus services.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carlo-colombo/dublin-bus-api";
            };
          }
      ) {};

    dublin_bus_api = dublin_bus_api_0_1_5;

    durga_transport_1_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "durga_transport";
            version = "1.0.1";
            src = fetchHex {
              pkg = "durga_transport";
              version = "1.0.1";
              sha256 =
                "42db857eba0e78c4eb15823b5137e8ccad13711cc2c873b6f1b469c4c0771009";
            };
             meta = {    };
          }
      ) {};

    durga_transport = durga_transport_1_0_1;

    dye_0_4_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "dye";
            version = "0.4.0";
            src = fetchHex {
              pkg = "dye";
              version = "0.4.0";
              sha256 =
                "95c11e5baafc79531f37bee1256066a8fef63739707723ac1e349739a3217003";
            };

            meta = {
              description = ''Dyeing your terminal!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Kabie/dye";
            };
          }
      ) {};

    dye = dye_0_4_0;

    dynamic_compile_1_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "dynamic_compile";
            version = "1.0.0";
            src = fetchHex {
              pkg = "dynamic_compile";
              version = "1.0.0";
              sha256 =
                "eb73d8e9a6334914f79c15ee8214acad9659c42222d49beda3e8b6f6789a980a";
            };

            meta = {
              description = ''compile and load erlang modules from string
                            input'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/dynamic_compile";
            };
          }
      ) {};

    dynamic_compile = dynamic_compile_1_0_0;

    e2qc_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "e2qc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "e2qc";
              version = "0.1.0";
              sha256 =
                "3a97f9b3c60ec723002a816c041ac224dc5aba3360bd922c5e38cfd40f59c65b";
            };
            compilePorts = true;

            meta = {
              description = ''2q cache'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/project-fifo/e2qc";
            };
          }
      ) {};

    e2qc = e2qc_0_1_0;

    e_queue_1_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "e_queue";
            version = "1.0.1";
            src = fetchHex {
              pkg = "e_queue";
              version = "1.0.1";
              sha256 =
                "aff37843191c1229ec49d0d067b18d5e0871a28fe049a4a82c7884e66320b7e8";
            };

            meta = {
              longDescription = ''An Elixir wrapper around the Erlang optimized
                                `queue` that supports the FIFO, first-in
                                first-out, pattern. This is useful is when you
                                can`t predict when an item needs to be taken or
                                added to the queue. Use this instead of using
                                `++` or double reversing lists to add items to
                                the "back" of a queue.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benfalk/e_queue";
            };
          }
      ) {};

    e_queue = e_queue_1_0_1;

    earmark_0_1_14 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "earmark";
            version = "0.1.14";
            src = fetchHex {
              pkg = "earmark";
              version = "0.1.14";
              sha256 =
                "5e44505d71df50a839bde48c922357f9340168340dfc7502f581f68b6a0a29f9";
            };

            meta = {
              longDescription = ''Earmark is a pure-Elixir Markdown converter.
                                It is intended to be used as a library (just
                                call Earmark.to_html), but can also be used as a
                                command-line tool (just run mix escript.build
                                first). Output generation is pluggable.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/earmark";
            };
          }
      ) {};

    earmark_0_1_19 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "earmark";
            version = "0.1.19";
            src = fetchHex {
              pkg = "earmark";
              version = "0.1.19";
              sha256 =
                "db85f989ba3030d40d3a901d7eebbf926ee07355bf6113d730b8aaf9404a6bd7";
            };

            meta = {
              longDescription = ''Earmark is a pure-Elixir Markdown converter.
                                It is intended to be used as a library (just
                                call Earmark.to_html), but can also be used as a
                                command-line tool (just run mix escript.build
                                first). Output generation is pluggable.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/earmark";
            };
          }
      ) {};

    earmark_0_2_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "earmark";
            version = "0.2.1";
            src = fetchHex {
              pkg = "earmark";
              version = "0.2.1";
              sha256 =
                "c86afb8d22a5aa8315afd4257c7512011c0c9a48b0fea43af7612836b958098b";
            };

            meta = {
              longDescription = ''Earmark is a pure-Elixir Markdown converter.
                                It is intended to be used as a library (just
                                call Earmark.to_html), but can also be used as a
                                command-line tool (just run mix escript.build
                                first). Output generation is pluggable.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/earmark";
            };
          }
      ) {};

    earmark = earmark_0_2_1;

    eastar_0_3_8 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "eastar";
            version = "0.3.8";
            src = fetchHex {
              pkg = "eastar";
              version = "0.3.8";
              sha256 =
                "c36e6ba809fb6e228902349e6f794d0362edb4bfd4f6e814107ed9bbc8c8dd17";
            };

            meta = {
              longDescription = ''Eastar is a pure-Elixir implementation of A*
                                graph pathfinding algorithm. All graph
                                environment, like nodes connectivity, distance &
                                H-metric are abstracted away - you provide them
                                as functions.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://github.com/herenowcoder/eastar";
            };
          }
      ) {};

    eastar = eastar_0_3_8;

    easy_server_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "easy_server";
            version = "0.0.1";
            src = fetchHex {
              pkg = "easy_server";
              version = "0.0.1";
              sha256 =
                "af9faac0c7c440cf04bbb5d1f8aea1fc00b0c60da384c8103fafdaf0df00a0bb";
            };

            meta = {
              description = ''Easier GenServer for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/termoose/EasyServer";
            };
          }
      ) {};

    easy_server = easy_server_0_0_1;

    easypost_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2 }:
          buildMix {
            name = "easypost";
            version = "0.0.1";
            src = fetchHex {
              pkg = "easypost";
              version = "0.0.1";
              sha256 =
                "8339fcfb60a1d4833b99aa611d194bf1ae94f22509dc81cf90d07ee2db0e074e";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''Elixir Easypost Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Dania02525/easypost";
            };
          }
      ) {};

    easypost = easypost_0_0_1;

    ecc_0_1_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ecc";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ecc";
              version = "0.1.3";
              sha256 =
                "0255ffe6e2b2cbbc2445ec7de6d29e16b6b6d8eaf0a6ae99a299cc79162541db";
            };

            meta = {
              longDescription = ''An elixir module for elliptic curve
                                cryptography. It can be used either as a library
                                or as a GenServer-Task for signing messages and
                                verifying signatures with a public key. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/farao/elixir-ecc";
            };
          }
      ) {};

    ecc = ecc_0_1_3;

    ecdo_0_1_4 = callPackage
      (
        {
          buildMix, fetchHex, postgrex_0_11_1, mariaex_0_6_2, ecto_1_0_7
        }:
          buildMix {
            name = "ecdo";
            version = "0.1.4";
            src = fetchHex {
              pkg = "ecdo";
              version = "0.1.4";
              sha256 =
                "362c75113bca6c8379ac2b1654ae78ed099ab0faee4a1fbacb7b4b9b137b9f1d";
            };
            beamDeps  = [ postgrex_0_11_1 mariaex_0_6_2 ecto_1_0_7 ];

            meta = {
              longDescription = ''Ecdo is a dynamic interface for ecto aims to
                                simplify building dynamic query API based on
                                ecto models.'';

              homepage = "https://github.com/xerions/ecdo";
            };
          }
      ) {};

    ecdo = ecdo_0_1_4;

    echo_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "echo";
            version = "0.2.0";
            src = fetchHex {
              pkg = "echo";
              version = "0.2.0";
              sha256 =
                "e03b37ada0457fbf3e91b2e721c9367b1590a17a5fb9be35672a46206309f1a4";
            };

            meta = {
              longDescription = ''A simple & highly extendable,
                                meta-notification system; Echo checks
                                notification preferences & dispatch
                                notifications to different adapters (ex. email,
                                logger, analytics, sms, etc.)'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/zmoshansky/echo";
            };
          }
      ) {};

    echo = echo_0_2_0;

    econfig_0_7_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "econfig";
            version = "0.7.1";
            src = fetchHex {
              pkg = "econfig";
              version = "0.7.1";
              sha256 =
                "b11d68e3d288b5cb4bd34e668e03176c4ea42790c09f1f449cdbd46a649ea7f3";
            };

            meta = {
              description = ''simple Erlang config handler using INI files'';

              homepage = "https://github.com/benoitc/econfig";
            };
          }
      ) {};

    econfig = econfig_0_7_1;

    ecto_0_16_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          sbroker_0_7_0,
          postgrex_0_9_1,
          poolboy_1_5_1,
          poison_1_5_2,
          mariaex_0_4_3,
          decimal_1_1_1
        }:
          buildMix {
            name = "ecto";
            version = "0.16.0";
            src = fetchHex {
              pkg = "ecto";
              version = "0.16.0";
              sha256 =
                "45643e7a09fdd0a32cf440c5b2e71c5120f24310280da50f51713399d9bb49d6";
            };
            beamDeps  = [
                          sbroker_0_7_0
                          postgrex_0_9_1
                          poolboy_1_5_1
                          poison_1_5_2
                          mariaex_0_4_3
                          decimal_1_1_1
                        ];

            meta = {
              longDescription = ''Ecto is a domain specific language for
                                writing queries and interacting with databases
                                in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/ecto";
            };
          }
      ) {};

    ecto_0_2_4 = callPackage
      (
        {
          buildMix, fetchHex, postgrex_0_6_0, poolboy_1_2_1, decimal_0_2_5
        }:
          buildMix {
            name = "ecto";
            version = "0.2.4";
            src = fetchHex {
              pkg = "ecto";
              version = "0.2.4";
              sha256 =
                "b6918fb8a0b72220238832616c42937ac04d2f8016d687b53e3a241234cae4f3";
            };
            beamDeps  = [ postgrex_0_6_0 poolboy_1_2_1 decimal_0_2_5 ];

            meta = {
              longDescription = ''Ecto is a domain specific language for
                                writing queries and interacting with databases
                                in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/ecto";
            };
          }
      ) {};

    ecto_0_2_6 = callPackage
      (
        {
          buildMix, fetchHex, postgrex_0_6_0, poolboy_1_5_1, decimal_0_2_5
        }:
          buildMix {
            name = "ecto";
            version = "0.2.6";
            src = fetchHex {
              pkg = "ecto";
              version = "0.2.6";
              sha256 =
                "746fd42fa1a9fae304d9bb280782d9456a1f092ea71ead3a876876753c936dc8";
            };
            beamDeps  = [ postgrex_0_6_0 poolboy_1_5_1 decimal_0_2_5 ];

            meta = {
              longDescription = ''Ecto is a domain specific language for
                                writing queries and interacting with databases
                                in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/ecto";
            };
          }
      ) {};

    ecto_0_5_1 = callPackage
      (
        {
          buildMix, fetchHex, postgrex_0_6_0, poolboy_1_4_2, decimal_0_2_5
        }:
          buildMix {
            name = "ecto";
            version = "0.5.1";
            src = fetchHex {
              pkg = "ecto";
              version = "0.5.1";
              sha256 =
                "a7f1f8022f6b8c53edc91076bcc885e1124fdf14cdc2c4a11d3b9b4c26cf34a8";
            };
            beamDeps  = [ postgrex_0_6_0 poolboy_1_4_2 decimal_0_2_5 ];

            meta = {
              longDescription = ''Ecto is a domain specific language for
                                writing queries and interacting with databases
                                in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/ecto";
            };
          }
      ) {};

    ecto_1_0_7 = callPackage
      (
        {
          buildMix,
          fetchHex,
          sbroker_0_7_0,
          postgrex_0_9_1,
          poolboy_1_5_1,
          poison_1_5_2,
          mariaex_0_4_3,
          decimal_1_1_1
        }:
          buildMix {
            name = "ecto";
            version = "1.0.7";
            src = fetchHex {
              pkg = "ecto";
              version = "1.0.7";
              sha256 =
                "d56766fb8e93dcec7e6dd9ef8bfe624b9b6d1f3a433fac4f0e7532681f501086";
            };
            beamDeps  = [
                          sbroker_0_7_0
                          postgrex_0_9_1
                          poolboy_1_5_1
                          poison_1_5_2
                          mariaex_0_4_3
                          decimal_1_1_1
                        ];

            meta = {
              longDescription = ''Ecto is a domain specific language for
                                writing queries and interacting with databases
                                in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/ecto";
            };
          }
      ) {};

    ecto_1_1_3 = callPackage
      (
        {
          buildMix,
          fetchHex,
          sbroker_0_7_0,
          postgrex_0_11_1,
          poolboy_1_5_1,
          poison_1_5_2,
          mariaex_0_5_0,
          decimal_1_1_1
        }:
          buildMix {
            name = "ecto";
            version = "1.1.3";
            src = fetchHex {
              pkg = "ecto";
              version = "1.1.3";
              sha256 =
                "0db9486edf2bc98cca77e5c22f7cb7e5a2d56fdb0268e4bb2e67353cc058b060";
            };
            beamDeps  = [
                          sbroker_0_7_0
                          postgrex_0_11_1
                          poolboy_1_5_1
                          poison_1_5_2
                          mariaex_0_5_0
                          decimal_1_1_1
                        ];

            meta = {
              longDescription = ''Ecto is a domain specific language for
                                writing queries and interacting with databases
                                in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/ecto";
            };
          }
      ) {};

    ecto_2_0_0_beta_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          sbroker_0_7_0,
          postgrex_0_11_1,
          poolboy_1_5_1,
          poison_1_0_3,
          mariaex_0_6_2,
          decimal_1_1_1
        }:
          buildMix {
            name = "ecto";
            version = "2.0.0-beta.0";
            src = fetchHex {
              pkg = "ecto";
              version = "2.0.0-beta.0";
              sha256 =
                "9c281d7de07610cc1025d2d5d2910aace0b0618c60fcbd6fd6f4b720c2f4e996";
            };
            beamDeps  = [
                          sbroker_0_7_0
                          postgrex_0_11_1
                          poolboy_1_5_1
                          poison_1_0_3
                          mariaex_0_6_2
                          decimal_1_1_1
                        ];

            meta = {
              longDescription = ''Ecto is a domain specific language for
                                writing queries and interacting with databases
                                in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/ecto";
            };
          }
      ) {};

    ecto = ecto_2_0_0_beta_0;

    ecto_audit_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ecto_audit";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ecto_audit";
              version = "0.0.1";
              sha256 =
                "04829a9670d4258b96c6218043093b68a1d3b03c37ee316a1c19366a59dbbd59";
            };

            meta = {
              description = ''Ecto extension to support auditing data changes
                            in your Schema.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattweldon/ecto_audit";
            };
          }
      ) {};

    ecto_audit = ecto_audit_0_0_1;

    ecto_enum_0_3_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          postgrex_0_11_1,
          mariaex_0_6_2,
          ecto_2_0_0_beta_0
        }:
          buildMix {
            name = "ecto_enum";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ecto_enum";
              version = "0.3.0";
              sha256 =
                "2aabbeeee17c67b8336890cc1888b1104b71e29852d464a77efca4257b02a8d9";
            };
            beamDeps  = [ postgrex_0_11_1 mariaex_0_6_2 ecto_2_0_0_beta_0 ];

            meta = {
              description = ''Ecto extension to support enums in models'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gjaldon/ecto_enum";
            };
          }
      ) {};

    ecto_enum = ecto_enum_0_3_0;

    ecto_fixtures_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, uuid_1_1_3 }:
          buildMix {
            name = "ecto_fixtures";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ecto_fixtures";
              version = "0.0.2";
              sha256 =
                "64e7ea208763fbcfb089ae8693fddcbe45c70ce2879614ad4edf883ca33ce061";
            };
            beamDeps  = [ uuid_1_1_3 ];

            meta = {
              longDescription = ''Ecto Fixtures provides a simple DSL for
                                quickly creating fixture data for your test
                                suite.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dockyard/ecto_fixtures";
            };
          }
      ) {};

    ecto_fixtures = ecto_fixtures_0_0_2;

    ecto_gettext_0_1_4 = callPackage
      (
        {  buildMix, fetchHex, gettext_0_10_0 }:
          buildMix {
            name = "ecto_gettext";
            version = "0.1.4";
            src = fetchHex {
              pkg = "ecto_gettext";
              version = "0.1.4";
              sha256 =
                "fdd333fd0655a86f985bed4558132b6b382cdafbce23e21cab4a9afc08b47f82";
            };
            beamDeps  = [ gettext_0_10_0 ];

            meta = {
              description = ''EctoGettext - library for localization Ecto
                            validation errors with using Gettext'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exbugs-elixir/ecto_gettext";
            };
          }
      ) {};

    ecto_gettext = ecto_gettext_0_1_4;

    ecto_hstore_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, ecto_2_0_0_beta_0 }:
          buildMix {
            name = "ecto_hstore";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ecto_hstore";
              version = "0.0.1";
              sha256 =
                "0dca7ad14d0fa42038594e00a6f1e1fb3476644f71299f9e4ca10f1b9d6098cb";
            };
            beamDeps  = [ ecto_2_0_0_beta_0 ];

            meta = {
              description = ''Ecto.Hstore adds Postgres Hstore compatibility to
                            Ecto. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/stavro/ecto_hstore";
            };
          }
      ) {};

    ecto_hstore = ecto_hstore_0_0_1;

    ecto_it_0_2_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          postgrex_0_11_1,
          mariaex_0_6_2,
          ecto_2_0_0_beta_0
        }:
          buildMix {
            name = "ecto_it";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ecto_it";
              version = "0.2.0";
              sha256 =
                "ddbf27e85547b9812d7b49bc2252b4667468582b174045ba2bb1a804d209a860";
            };
            beamDeps  = [ postgrex_0_11_1 mariaex_0_6_2 ecto_2_0_0_beta_0 ];

            meta = {
              longDescription = ''Ecto IT is library for writing integration
                                tests(with database backend) for ecto-based
                                applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xerions/ecto_it";
            };
          }
      ) {};

    ecto_it = ecto_it_0_2_0;

    ecto_lazy_float_0_1_2 = callPackage
      (
        {  buildMix, fetchHex, ecto_2_0_0_beta_0 }:
          buildMix {
            name = "ecto_lazy_float";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ecto_lazy_float";
              version = "0.1.2";
              sha256 =
                "76f14bf8d2bf52e3143c79fdf0e9d9bbb2fb1b087e847b13347e52e5b0c5da94";
            };
            beamDeps  = [ ecto_2_0_0_beta_0 ];

            meta = {
              description = ''Ecto.LazyFloat takes integer, strings, and floats
                            and casts them to floats. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshdholtz/ecto-lazy-float";
            };
          }
      ) {};

    ecto_lazy_float = ecto_lazy_float_0_1_2;

    ecto_ldap_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, ecto_2_0_0_beta_0 }:
          buildMix {
            name = "ecto_ldap";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ecto_ldap";
              version = "0.2.0";
              sha256 =
                "9228e091811d699c530a717633f0be8f3468d80f81f721c5f4ce2bd9b401de13";
            };
            beamDeps  = [ ecto_2_0_0_beta_0 ];

            meta = {
              description = ''An Ecto adapter for LDAP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffweiss/ecto_ldap";
            };
          }
      ) {};

    ecto_ldap = ecto_ldap_0_2_0;

    ecto_migrate_0_6_3 = callPackage
      (
        {
          buildMix,
          fetchHex,
          postgrex_0_11_1,
          mariaex_0_6_2,
          ecto_it_0_2_0,
          ecto_1_0_7
        }:
          buildMix {
            name = "ecto_migrate";
            version = "0.6.3";
            src = fetchHex {
              pkg = "ecto_migrate";
              version = "0.6.3";
              sha256 =
                "a604f2fe7874c674bd42fc70f3e89776d3738571d252ec8b785a107a6fa12b5c";
            };
            beamDeps  = [
                          postgrex_0_11_1 mariaex_0_6_2 ecto_it_0_2_0 ecto_1_0_7
                        ];

            meta = {
              longDescription = ''Ecto auto migration library. It allows to
                                generate and run migrations for initial and
                                update migrations.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xerions/ecto_migrate";
            };
          }
      ) {};

    ecto_migrate = ecto_migrate_0_6_3;

    ecto_ordered_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, ecto_0_5_1 }:
          buildMix {
            name = "ecto_ordered";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ecto_ordered";
              version = "0.0.2";
              sha256 =
                "315ccd497576d800e3962874da19dae8938eb36ca4dc14193ed95ef7c9c12c1e";
            };
            beamDeps  = [ ecto_0_5_1 ];

            meta = {
              description = ''Ecto extension to support ordered list models'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/trustatom-oss/ecto-ordered";
            };
          }
      ) {};

    ecto_ordered = ecto_ordered_0_0_2;

    ecto_validation_case_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, ex_doc_0_11_4, ecto_2_0_0_beta_0 }:
          buildMix {
            name = "ecto_validation_case";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ecto_validation_case";
              version = "0.1.1";
              sha256 =
                "0bec902247929e66cb0687f09d458633385843d18ca6ec1ac2557e6754b55cbd";
            };
            beamDeps  = [ ex_doc_0_11_4 ecto_2_0_0_beta_0 ];

            meta = {
              description = ''Ecto.ValidationCase simplifies writing validation
                            tests for Ecto models. '';
              license = with stdenv.lib.licenses; [ mit asl20 ];
              homepage =
                "https://github.com/danielberkompas/ecto_validation_case";
            };
          }
      ) {};

    ecto_validation_case = ecto_validation_case_0_1_1;

    ectograph_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, graphql_0_1_2, ecto_1_1_3 }:
          buildMix {
            name = "ectograph";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ectograph";
              version = "0.0.1";
              sha256 =
                "1fe701999ff1648cdac64ed6500793f8534fe7771ed5b533c21bc42a648d3484";
            };
            beamDeps  = [ graphql_0_1_2 ecto_1_1_3 ];

            meta = {
              longDescription = ''Ectograph is a set of utility functions for
                                using Ecto in combination with GraphQL
                                (joshprice/graphql-elixir)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/icidasset/ectograph";
            };
          }
      ) {};

    ectograph = ectograph_0_0_1;

    ectoo_0_0_4 = callPackage
      (
        {  buildMix, fetchHex, postgrex_0_11_1, ecto_2_0_0_beta_0 }:
          buildMix {
            name = "ectoo";
            version = "0.0.4";
            src = fetchHex {
              pkg = "ectoo";
              version = "0.0.4";
              sha256 =
                "bf5852e97e64666ebd57df710e4cb1239d3fcf135d7ae9d5d666fc53aa0e0b46";
            };
            beamDeps  = [ postgrex_0_11_1 ecto_2_0_0_beta_0 ];

            meta = {
              longDescription = ''Make simple things easy in Ecto, e.g.
                                Ectoo.max(MyModel, :age). Also .count, .min,
                                .max, .avg.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/henrik/ectoo";
            };
          }
      ) {};

    ectoo = ectoo_0_0_4;

    ectophile_0_3_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          postgrex_0_9_1,
          poison_1_5_2,
          mariaex_0_4_3,
          ecto_2_0_0_beta_0
        }:
          buildMix {
            name = "ectophile";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ectophile";
              version = "0.3.0";
              sha256 =
                "376c7c838bc602bc64d7ae3dfa4079717f6ed5e0117113652fc281e3e17227d2";
            };
            beamDeps  = [
                          postgrex_0_9_1
                          poison_1_5_2
                          mariaex_0_4_3
                          ecto_2_0_0_beta_0
                        ];

            meta = {
              description = ''File upload extension for Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gjaldon/ectophile";
            };
          }
      ) {};

    ectophile = ectophile_0_3_0;

    edeliver_1_1_4 = callPackage
      (
        {  buildMix, fetchHex, exrm_1_0_0_rc8 }:
          buildMix {
            name = "edeliver";
            version = "1.1.4";
            src = fetchHex {
              pkg = "edeliver";
              version = "1.1.4";
              sha256 =
                "b7c95a499efb0fc9baf681dfaba3c09c64d9cde5c4cf4faafd44d6de9cba8928";
            };
            beamDeps  = [ exrm_1_0_0_rc8 ];

            meta = {
              longDescription = ''Build and Deploy Elixir Applications and
                                perform Hot-Code Upgrades and Schema
                                Migrations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/boldpoker/edeliver";
            };
          }
      ) {};

    edeliver = edeliver_1_1_4;

    eden_0_1_3 = callPackage
      (
        {  buildMix, fetchHex, timex_0_13_5, array_1_0_1 }:
          buildMix {
            name = "eden";
            version = "0.1.3";
            src = fetchHex {
              pkg = "eden";
              version = "0.1.3";
              sha256 =
                "cbada564b3beb28c350a3f01da7398329e39c24dc9780002ab842d14604ca67b";
            };
            beamDeps  = [ timex_0_13_5 array_1_0_1 ];

            meta = {
              description = ''edn (extensible data notation) encoder/decoder
                            implemented in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jfacorro/Eden/";
            };
          }
      ) {};

    eden = eden_0_1_3;

    edgarex_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, httpotion_2_0_0, exquery_0_0_11 }:
          buildMix {
            name = "edgarex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "edgarex";
              version = "0.0.2";
              sha256 =
                "99e25e685bc44a1f804729779e77d5e3d1920f42c99478cd9b712d724b4f6af4";
            };
            beamDeps  = [ httpotion_2_0_0 exquery_0_0_11 ];

            meta = {
              longDescription = '' A set of utilities for fetching documents
                                from the SEC EDGAR data portal, as well as
                                parsing them into simpler structures. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/edgarex";
            };
          }
      ) {};

    edgarex = edgarex_0_0_2;

    edib_0_5_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "edib";
            version = "0.5.1";
            src = fetchHex {
              pkg = "edib";
              version = "0.5.1";
              sha256 =
                "25218e2eca8c5b51b0344c04d635551689b4791760104227963173299b7d60e0";
            };

            meta = {
              longDescription = ''Mix task to create a docker image of your
                                application release. More detailed information
                                about release image building at:
                                https://github.com/edib-tool/elixir-docker-image-builder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edib-tool/mix-edib";
            };
          }
      ) {};

    edib = edib_0_5_1;

    edip_0_4_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "edip";
            version = "0.4.3";
            src = fetchHex {
              pkg = "edip";
              version = "0.4.3";
              sha256 =
                "b0b9f34b2048b3f03c1f25b6dc60a1567b6f3ec8c6ad945de30dc313d7608800";
            };

            meta = {
              longDescription = ''Mix task to create a docker image of your
                                application release. More detailed information
                                about release image packaging at:
                                https://github.com/asaaki/elixir-docker-image-packager'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/mix-edip";
            };
          }
      ) {};

    edip = edip_0_4_3;

    edown_0_7_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "edown";
            version = "0.7.0";
            src = fetchHex {
              pkg = "edown";
              version = "0.7.0";
              sha256 =
                "6d7365a7854cd724e8d1fd005f5faa4444eae6a87eb6df9b789b6e7f6f09110a";
            };

            meta = {
              description = ''Markdown generated from Edoc.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/uwiger/edown";
            };
          }
      ) {};

    edown = edown_0_7_0;

    eeb_0_1_3 = callPackage
      (
        {
          buildMix,
          fetchHex,
          tzdata_0_1_8,
          timex_1_0_1,
          plug_0_14_0,
          earmark_0_1_19,
          cowboy_1_0_4
        }:
          buildMix {
            name = "eeb";
            version = "0.1.3";
            src = fetchHex {
              pkg = "eeb";
              version = "0.1.3";
              sha256 =
                "c2f4bc1e6dbada6b7086e92db14a401ac1440d25d5c5ac078fc55e6545c73f4e";
            };
            beamDeps  = [
                          tzdata_0_1_8
                          timex_1_0_1
                          plug_0_14_0
                          earmark_0_1_19
                          cowboy_1_0_4
                        ];

            meta = {
              description = ''Elixir extendable blog.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aborn/eeb";
            };
          }
      ) {};

    eeb = eeb_0_1_3;

    egithub_0_2_2 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          shotgun_0_2_2,
          jiffy_0_14_7,
          lager_3_0_2,
          goldrush_0_1_7
        }:
          buildRebar3 {
            name = "egithub";
            version = "0.2.2";
            src = fetchHex {
              pkg = "egithub";
              version = "0.2.2";
              sha256 =
                "ff8e279d3868576cc2a05336c7ca4bed3972f7a01676be859b7e1750da4570f8";
            };

            beamDeps  = [
                          shotgun_0_2_2 jiffy_0_14_7 lager_3_0_2 goldrush_0_1_7
                        ];

            meta = {
              description = ''GitHub API client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/erlang-github";
            };
          }
      ) {};

    egithub = egithub_0_2_2;

    eh_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "eh";
            version = "0.2.0";
            src = fetchHex {
              pkg = "eh";
              version = "0.2.0";
              sha256 =
                "91013c78138c8854c5699ef42324e66286fed0048c4d4212c4dc3012d764c628";
            };

            meta = {
              description = ''Lookup Elixir documentation from the command line
                            '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Frost/eh.git";
            };
          }
      ) {};

    eh = eh_0_2_0;

    eight_ball_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "eight_ball";
            version = "0.0.1";
            src = fetchHex {
              pkg = "eight_ball";
              version = "0.0.1";
              sha256 =
                "1ba1b2b5f3dfaba751b51f101c3c526a09f0c989768f265e82a6a065447a6aa4";
            };

            meta = {
              description = ''Library that acts like a real life Magic 8
                            Ball.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fteem/eight_ball";
            };
          }
      ) {};

    eight_ball = eight_ball_0_0_1;

    eight_ball_dj_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "eight_ball_dj";
            version = "0.0.2";
            src = fetchHex {
              pkg = "eight_ball_dj";
              version = "0.0.2";
              sha256 =
                "5b0d4f92a76f3d48d5541936ae8540154ed2a14ccda1a45e250d6a577bb541f5";
            };

            meta = {
              description = ''Ask a question to the Magic Eight Ball'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/djkianoosh/eight_ball";
            };
          }
      ) {};

    eight_ball_dj = eight_ball_dj_0_0_2;

    eio_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "eio";
            version = "0.1.0";
            src = fetchHex {
              pkg = "eio";
              version = "0.1.0";
              sha256 =
                "f39f017c73713b36ee27d8a0635634ac2e96b4d540f28db9dd358d8744dccd88";
            };
            beamDeps  = [ poison_1_5_2 plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              description = ''Engine.io server for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/falood/eio";
            };
          }
      ) {};

    eio = eio_0_1_0;

    ejabberd_16_1_0_beta1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          stun_1_0_1,
          stringprep_1_0_2,
          sqlite3_1_1_5,
          p1_xmlrpc_1_15_1,
          p1_utils_1_0_3,
          p1_pgsql_1_0_1,
          p1_oauth2_0_6_1,
          p1_mysql_1_0_1,
          lager_3_0_2,
          jiffy_0_14_7,
          iconv_1_0_0,
          fast_yaml_1_0_2,
          fast_xml_1_1_3,
          fast_tls_1_0_1,
          ezlib_1_0_1,
          esip_1_0_2,
          eredis_1_0_8,
          cache_tab_1_0_2
        }:
          buildMix {
            name = "ejabberd";
            version = "16.1.0-beta1";
            src = fetchHex {
              pkg = "ejabberd";
              version = "16.1.0-beta1";
              sha256 =
                "c1f6b702ab0e75866979c62edeab4dcc01a2cd9d375a73799b7288dbdc77d743";
            };
            beamDeps  = [
                          stun_1_0_1
                          stringprep_1_0_2
                          sqlite3_1_1_5
                          p1_xmlrpc_1_15_1
                          p1_utils_1_0_3
                          p1_pgsql_1_0_1
                          p1_oauth2_0_6_1
                          p1_mysql_1_0_1
                          lager_3_0_2
                          jiffy_0_14_7
                          iconv_1_0_0
                          fast_yaml_1_0_2
                          fast_xml_1_1_3
                          fast_tls_1_0_1
                          ezlib_1_0_1
                          esip_1_0_2
                          eredis_1_0_8
                          cache_tab_1_0_2
                        ];

            meta = {
              longDescription = ''Robust, ubiquitous and massively scalable
                                Jabber / XMPP Instant Messaging platform.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/processone/ejabberd";
            };
          }
      ) {};

    ejabberd = ejabberd_16_1_0_beta1;

    ejabberd_dev_15_9_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ejabberd_dev";
            version = "15.9.0";
            src = fetchHex {
              pkg = "ejabberd_dev";
              version = "15.9.0";
              sha256 =
                "4c4ca5b3ee1900bd7e5babed76cae361b6350ed5793ce013cbfccc06208c291e";
            };

            meta = {
              longDescription = ''A package to help with building ejabberd
                                modules. This package includes source and header
                                files from the ejabberd project that are
                                necessary in order to build a gen_mod module.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/scrogson/ejabberd_dev";
            };
          }
      ) {};

    ejabberd_dev = ejabberd_dev_15_9_0;

    ekstat_0_2_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "ekstat";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ekstat";
              version = "0.2.2";
              sha256 =
                "fdd30052433bf7ceb453397c4cabee2d9b0a2a716842a29a1121d3474c5b9fa7";
            };
            compilePorts = true;

            meta = {
              description = ''libkstat interface for erlang'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/Licenser/ekstat";
            };
          }
      ) {};

    ekstat = ekstat_0_2_2;

    elastex_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, poison_2_1_0, httpoison_0_8_1 }:
          buildMix {
            name = "elastex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "elastex";
              version = "0.1.1";
              sha256 =
                "e08e9640f0d68250dfbe3a6d54855f75742db647ace24a42667d88e234c5849c";
            };
            beamDeps  = [ poison_2_1_0 httpoison_0_8_1 ];

            meta = {
              description = ''Data driven elixir client for Elasticsearch.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/michaeldoaty/elastex";
            };
          }
      ) {};

    elastex = elastex_0_1_1;

    elastix_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_7_5 }:
          buildMix {
            name = "elastix";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elastix";
              version = "0.1.0";
              sha256 =
                "3e24e2287bbd733e913d16092ea3fdff6b7f8f74f9eae73b07699fcf62bb5b06";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_7_5 ];

            meta = {
              description = ''A simple Elastic REST client written in
                            Elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/werbitzky/elastix";
            };
          }
      ) {};

    elastix = elastix_0_1_0;

    elaxtic_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1 }:
          buildMix {
            name = "elaxtic";
            version = "0.0.1";
            src = fetchHex {
              pkg = "elaxtic";
              version = "0.0.1";
              sha256 =
                "a912a0327bfe1c6443cec47a03d11450fed2e649bfdcd4e77bdb9176baa8cd45";
            };
            beamDeps  = [ httpoison_0_8_1 ];

            meta = {
              description = ''ElasticSearch client for Elixir and Ecto
                            driver.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/elaxtic";
            };
          }
      ) {};

    elaxtic = elaxtic_0_0_1;

    eleveldb_2_1_3 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "eleveldb";
            version = "2.1.3";
            src = fetchHex {
              pkg = "eleveldb";
              version = "2.1.3";
              sha256 =
                "91f4caccc3d0a40a6135b9a647a52c7ec5fefdd41883e1a0f32745838d7cfd3c";
            };
            compilePorts = true;

            meta = {
              description = ''Erlang LevelDB API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/eleveldb";
            };
          }
      ) {};

    eleveldb = eleveldb_2_1_3;

    elibphonenumber_0_1_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "elibphonenumber";
            version = "0.1.1";
            src = fetchHex {
              pkg = "elibphonenumber";
              version = "0.1.1";
              sha256 =
                "6dcbcd49fe7c969873a3431eaa3939298b2564308d2a8fbcc22b7d9b4bc65f27";
            };
            compilePorts = true;

            meta = {
              description = ''A port driver for libphonenumber'';

              homepage = "https://github.com/johnhamelink/elibphonenumber";
            };
          }
      ) {};

    elibphonenumber = elibphonenumber_0_1_1;

    elistrix_0_0_5 = callPackage
      (
        {  buildMix, fetchHex, timex_0_13_5 }:
          buildMix {
            name = "elistrix";
            version = "0.0.5";
            src = fetchHex {
              pkg = "elistrix";
              version = "0.0.5";
              sha256 =
                "63888c589e9ec116f4cb6f8b6ef18aec478d48563965da94594408d3c86450d3";
            };
            beamDeps  = [ timex_0_13_5 ];

            meta = {
              longDescription = ''A latency / fault tolerance library to help
                                isolate your applications from an uncertain
                                world of slow or failed services.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tobz/elistrix";
            };
          }
      ) {};

    elistrix = elistrix_0_0_5;

    elixilorem_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "elixilorem";
            version = "0.0.1";
            src = fetchHex {
              pkg = "elixilorem";
              version = "0.0.1";
              sha256 =
                "fbe0f40bed9e3e3db687e88d3afb24e1a81ae274582170d1ca0545e13638cbea";
            };

            meta = {
              description = ''A Lorem Ipsum generator for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mgamini/elixilorem";
            };
          }
      ) {};

    elixilorem = elixilorem_0_0_1;

    elixir_ale_0_4_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "elixir_ale";
            version = "0.4.1";
            src = fetchHex {
              pkg = "elixir_ale";
              version = "0.4.1";
              sha256 =
                "2ee5c6989a8005a0ab8f1aea0b4f89b5feae75be78a70bade6627c3624c59c46";
            };

            meta = {
              description = ''Elixir access to hardware I/O interfaces such as
                            GPIO, I2C, and SPI.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fhunleth/elixir_ale";
            };
          }
      ) {};

    elixir_ale = elixir_ale_0_4_1;

    elixir_ami_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "elixir_ami";
            version = "0.0.3";
            src = fetchHex {
              pkg = "elixir_ami";
              version = "0.0.3";
              sha256 =
                "781171af1bcc20466117fb119646b55ad473c93ce57549ffec4c65f7ba8a1ede";
            };

            meta = {
              longDescription = ''Elixir client for the Asterisk AMI protocol.
                                Find the user guide in the github repo at:
                                https://github.com/marcelog/elixir_ami.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/elixir_ami";
            };
          }
      ) {};

    elixir_ami = elixir_ami_0_0_3;

    elixir_authorizenet_0_2_1 = callPackage
      (
        {  buildMix, fetchHex, xml_builder_0_0_8, exmerl_0_1_1 }:
          buildMix {
            name = "elixir_authorizenet";
            version = "0.2.1";
            src = fetchHex {
              pkg = "elixir_authorizenet";
              version = "0.2.1";
              sha256 =
                "ac690facc36206982a7bc1eca4cf3d50a68194e05c2cf927e0e3f166c71e9f0f";
            };
            beamDeps  = [ xml_builder_0_0_8 exmerl_0_1_1 ];

            meta = {
              longDescription = ''Elixir client for the Authorize.Net merchant
                                API. This should help you integrate using the
                                AIM. A nice number of features are implemented
                                (probably most of the ones used on a daily basis
                                are already there), but since the API offers a
                                big number of features and combinations, I still
                                consider this as WIP, and pull requests,
                                suggestions, or other kind of feedback are very
                                welcome! Find the user guide in the github repo
                                at:
                                https://github.com/marcelog/elixir_authorizenet.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/elixir_authorizenet";
            };
          }
      ) {};

    elixir_authorizenet = elixir_authorizenet_0_2_1;

    elixir_bencode_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "elixir_bencode";
            version = "1.0.0";
            src = fetchHex {
              pkg = "elixir_bencode";
              version = "1.0.0";
              sha256 =
                "2c4c86843b2377182da7cff125784a227c7bc63ef9e92ce7257f14b132667ebe";
            };

            meta = {
              description = ''Bencode encoder / decoder in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/AntonFagerberg/elixir_bencode";
            };
          }
      ) {};

    elixir_bencode = elixir_bencode_1_0_0;

    elixir_drawille_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, ex_doc_0_10_0, earmark_0_1_19 }:
          buildMix {
            name = "elixir_drawille";
            version = "0.0.3";
            src = fetchHex {
              pkg = "elixir_drawille";
              version = "0.0.3";
              sha256 =
                "5fab2af19c8f8c68e62aa4f0a3c17d23a9519e998617470df3ae3cb59516c52c";
            };
            beamDeps  = [ ex_doc_0_10_0 earmark_0_1_19 ];

            meta = {
              description = ''Drawings using terminal braille characters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/massn/elixir-drawille";
            };
          }
      ) {};

    elixir_drawille = elixir_drawille_0_0_3;

    elixir_exif_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "elixir_exif";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_exif";
              version = "0.1.0";
              sha256 =
                "9d8e79d247495347c15d89172e86b49b3c9592b8df8d70ec0a4db126c3cd599b";
            };

            meta = {
              description = ''Parse exif and thumbnail data from jpeg/tiff
                            images.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sschneider1207/ElixirExif";
            };
          }
      ) {};

    elixir_exif = elixir_exif_0_1_0;

    elixir_feed_parser_0_9_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "elixir_feed_parser";
            version = "0.9.0";
            src = fetchHex {
              pkg = "elixir_feed_parser";
              version = "0.9.0";
              sha256 =
                "35e0164c63e513d100008a9ada090ba6f1efe89cafc7995f321c0168e39cce5c";
            };

            meta = {
              description = ''An Elixir Atom/RSS2 feed parser.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fdietz/elixir-feed-parser";
            };
          }
      ) {};

    elixir_feed_parser = elixir_feed_parser_0_9_0;

    elixir_freshbooks_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, xml_builder_0_0_8, exmerl_0_1_1 }:
          buildMix {
            name = "elixir_freshbooks";
            version = "0.0.2";
            src = fetchHex {
              pkg = "elixir_freshbooks";
              version = "0.0.2";
              sha256 =
                "a40deaaf4400c0de95b7bf4b19fc9216a063e44854113301914b7b893e8c66d4";
            };
            beamDeps  = [ xml_builder_0_0_8 exmerl_0_1_1 ];

            meta = {
              description = ''Elixir client for FreshBooks.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/elixir_freshbooks";
            };
          }
      ) {};

    elixir_freshbooks = elixir_freshbooks_0_0_2;

    elixir_ipfs_api_0_1_0 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1, ex_doc_0_10_0
        }:
          buildMix {
            name = "elixir_ipfs_api";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_ipfs_api";
              version = "0.1.0";
              sha256 =
                "b8b6656ce18ff070b2328436cfa3d55f08b3e0a2f98bee49d4b3cb49c144684b";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ex_doc_0_10_0 ];

            meta = {
              description = ''An elixir client library for the IPFS API'';

            };
          }
      ) {};

    elixir_ipfs_api = elixir_ipfs_api_0_1_0;

    elixir_locker_0_1_4 = callPackage
      (
        {  buildMix, fetchHex, locker_1_0_8 }:
          buildMix {
            name = "elixir_locker";
            version = "0.1.4";
            src = fetchHex {
              pkg = "elixir_locker";
              version = "0.1.4";
              sha256 =
                "cca190b5846f37dfaaa495981b92e34015ca0dd0a879d200be90333f3866ceb2";
            };
            beamDeps  = [ locker_1_0_8 ];

            meta = {
              description = ''Elixir wrapper for the locker Erlang library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsharju/elixir_locker";
            };
          }
      ) {};

    elixir_locker = elixir_locker_0_1_4;

    elixir_mbcs_0_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "elixir_mbcs";
            version = "0.1.2";
            src = fetchHex {
              pkg = "elixir_mbcs";
              version = "0.1.2";
              sha256 =
                "45d2572ed4c2bae10e961ddf95846ffd64f83ed7427898b8fdf3221607f610b5";
            };

            meta = {
              description = ''Convert the character encoding'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/woxtu/elixir-mbcs";
            };
          }
      ) {};

    elixir_mbcs = elixir_mbcs_0_1_2;

    elixir_mod_event_0_0_5 = callPackage
      (
        {  buildMix, fetchHex, uuid_1_1_3 }:
          buildMix {
            name = "elixir_mod_event";
            version = "0.0.5";
            src = fetchHex {
              pkg = "elixir_mod_event";
              version = "0.0.5";
              sha256 =
                "d38fe29a32107e889c52f849ceec6267709591b7db98db14bd3890683ca78b0f";
            };
            beamDeps  = [ uuid_1_1_3 ];

            meta = {
              longDescription = ''Elixir client for FreeSWITCH
                                mod_event_socket. Find the user guide in the
                                github repo at:
                                https://github.com/marcelog/elixir_mod_event.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/elixir_mod_event";
            };
          }
      ) {};

    elixir_mod_event = elixir_mod_event_0_0_5;

    elixir_nsq_1_0_3 = callPackage
      (
        {
          buildMix,
          fetchHex,
          uuid_1_1_3,
          socket_0_3_1,
          poison_1_5_2,
          httpotion_2_1_0
        }:
          buildMix {
            name = "elixir_nsq";
            version = "1.0.3";
            src = fetchHex {
              pkg = "elixir_nsq";
              version = "1.0.3";
              sha256 =
                "6d30c3754dfdd988f927b9c6ae51d3e0ec4b0d2477b99047baf7a52c96bf9494";
            };
            beamDeps  = [
                          uuid_1_1_3 socket_0_3_1 poison_1_5_2 httpotion_2_1_0
                        ];

            meta = {
              longDescription = ''A client library for NSQ, `elixir_nsq` aims
                                to be complete, easy to use, and well tested.
                                Developed at Wistia (http://wistia.com).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wistia/elixir_nsq";
            };
          }
      ) {};

    elixir_nsq = elixir_nsq_1_0_3;

    elixir_radius_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "elixir_radius";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_radius";
              version = "0.1.0";
              sha256 =
                "40f4c2a792c5967e21d4e7914a91a62fbed3712bf9c6ec5f0a549e659e4ddc94";
            };

            meta = {
              description = ''Decode & encode RADIUS packets '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bearice/elixir-radius";
            };
          }
      ) {};

    elixir_radius = elixir_radius_0_1_0;

    elixir_script_0_15_2 = callPackage
      (
        {  buildMix, fetchHex, estree_2_2_0 }:
          buildMix {
            name = "elixir_script";
            version = "0.15.2";
            src = fetchHex {
              pkg = "elixir_script";
              version = "0.15.2";
              sha256 =
                "daa98f9f065576450843e9f867c7c8afe38edb29345aec276c112e4786ff2f5c";
            };
            beamDeps  = [ estree_2_2_0 ];

            meta = {
              description = ''ElixirScript: compiles Elixir code to
                            JavaScript'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/elixirscript";
            };
          }
      ) {};

    elixir_script = elixir_script_0_15_2;

    elixir_talk_1_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "elixir_talk";
            version = "1.0.1";
            src = fetchHex {
              pkg = "elixir_talk";
              version = "1.0.1";
              sha256 =
                "846a7a66fbc11ed09aec93130da1fc034d28b8e5241b585ebeaaca5b38e0e0d2";
            };

            meta = {
              description = ''ElixirTalk is an Elixir client for beanstalkd.
                            '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jsvisa/elixir_talk";
            };
          }
      ) {};

    elixir_talk = elixir_talk_1_0_1;

    elixir_tea_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "elixir_tea";
            version = "1.0.0";
            src = fetchHex {
              pkg = "elixir_tea";
              version = "1.0.0";
              sha256 =
                "c1e46d2d7b07a926ba8730452f517db45cf4f8f35d119b84aa0f0f676048cdcc";
            };

            meta = {
              description = ''A TEA (Tiny Encryption Algorithm) implemented in
                            pure Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keichan34/elixir_tea";
            };
          }
      ) {};

    elixir_tea = elixir_tea_1_0_0;

    elixlsx_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "elixlsx";
            version = "0.0.2";
            src = fetchHex {
              pkg = "elixlsx";
              version = "0.0.2";
              sha256 =
                "59778841cecdaec28cf6b008add62a7653a4bd5eb9031e6fb0a076cc9e69fb3d";
            };

            meta = {
              description = ''a writer for XLSX spreadsheet files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/xou/elixlsx";
            };
          }
      ) {};

    elixlsx = elixlsx_0_0_2;

    elixtagram_0_2_5 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, oauth2_0_5_0, httpoison_0_7_5
        }:
          buildMix {
            name = "elixtagram";
            version = "0.2.5";
            src = fetchHex {
              pkg = "elixtagram";
              version = "0.2.5";
              sha256 =
                "71503f2bfec0d4728449321e4e1aaae7c8ae24974d53b904327bcef5b16e6900";
            };
            beamDeps  = [ poison_1_5_2 oauth2_0_5_0 httpoison_0_7_5 ];

            meta = {
              description = ''Instagram client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zensavona/elixtagram";
            };
          }
      ) {};

    elixtagram = elixtagram_0_2_5;

    elli_1_0_4 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "elli";
            version = "1.0.4";
            src = fetchHex {
              pkg = "elli";
              version = "1.0.4";
              sha256 =
                "87641b9c069b1372dac4e1bdda795076ea3142af78aac0d63896a38079e89e8e";
            };

            meta = {
              description = ''Fast and robust web server for building
                            high-throughput, low-latency apps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/knutin/elli";
            };
          }
      ) {};

    elli = elli_1_0_4;

    elmit_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, httpotion_2_1_0 }:
          buildMix {
            name = "elmit";
            version = "0.0.1";
            src = fetchHex {
              pkg = "elmit";
              version = "0.0.1";
              sha256 =
                "90e5df811553733dd7505f9cc81397c3bdaf9c336eb3542c7e44f3c2012ef96e";
            };
            beamDeps  = [ httpotion_2_1_0 ];

            meta = {
              description = ''Google Translate with speech synthesis in your
                            terminal as Hex package.'';

            };
          }
      ) {};

    elmit = elmit_0_0_1;

    email_checker_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, socket_0_3_1 }:
          buildMix {
            name = "email_checker";
            version = "0.0.3";
            src = fetchHex {
              pkg = "email_checker";
              version = "0.0.3";
              sha256 =
                "feac6fa5cc1343b437221ace18fa8fa7251dfa777e986063e13f435d6aff990c";
            };
            beamDeps  = [ socket_0_3_1 ];

            meta = {
              longDescription = ''Simple library checking the validity of an
                                email. Checks are performed in the following
                                order: - REGEX: validate the emails has a good
                                looking format - MX: validate the domain sever
                                contains MX records - SMTP: validate the SMTP
                                behind the MX records knows this email address
                                (no email sent)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kdisneur/email_checker";
            };
          }
      ) {};

    email_checker = email_checker_0_0_3;

    eministat_0_10_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "eministat";
            version = "0.10.1";
            src = fetchHex {
              pkg = "eministat";
              version = "0.10.1";
              sha256 =
                "1e581fe282e8851c036fb6e4908add91956eba62ce0cce97fceee66067157d5f";
            };

            meta = {
              description = ''Basic statistics for comparing datasets from
                            benchmarks'';

            };
          }
      ) {};

    eministat = eministat_0_10_1;

    eml_0_7_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "eml";
            version = "0.7.1";
            src = fetchHex {
              pkg = "eml";
              version = "0.7.1";
              sha256 =
                "f03a35e2684455ee9e8b641f9550d41893f5b013c1277751685414f56cee9c0a";
            };

            meta = {
              longDescription = ''Eml makes markup a first class citizen in
                                Elixir. It provides a flexible and modular
                                toolkit for generating, parsing and manipulating
                                markup. It`s main focus is html, but other
                                markup languages could be implemented as well.
                                '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zambal/eml";
            };
          }
      ) {};

    eml = eml_0_7_1;

    emodel_1_3_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "emodel";
            version = "1.3.1";
            src = fetchHex {
              pkg = "emodel";
              version = "1.3.1";
              sha256 =
                "6271ac4fb20c81b60ce568345ddec8abaea59a6b1eb63aa35ada25a009464ce2";
            };

            meta = {
              description = ''Erlang data transformation/validation library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/egobrain/emodel";
            };
          }
      ) {};

    emodel = emodel_1_3_1;

    enotify_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "enotify";
            version = "0.1.0";
            src = fetchHex {
              pkg = "enotify";
              version = "0.1.0";
              sha256 =
                "8e48da763ce15bfd75cc857ddfe5011b03189d597f47bcdd8acc6fbbe8e6b6f4";
            };
            compilePorts = true;

            meta = {
              description = ''Filesystem listener'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsloughter/enotify";
            };
          }
      ) {};

    enotify = enotify_0_1_0;

    ensq_0_1_6 = callPackage
      (
        {  buildRebar3, fetchHex, lager_2_1_1, jsxd_0_1_10, jsx_1_4_5 }:
          buildRebar3 {
            name = "ensq";
            version = "0.1.6";
            src = fetchHex {
              pkg = "ensq";
              version = "0.1.6";
              sha256 =
                "dd8c167eef061bb80384b34a81dc9a2079d42b254bd4ecbb0aa586937182a466";
            };

            beamDeps  = [ lager_2_1_1 jsxd_0_1_10 jsx_1_4_5 ];

            meta = {
              description = ''Erlang client for NSQ'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/ensq";
            };
          }
      ) {};

    ensq = ensq_0_1_6;

    env_conf_0_3_0 = callPackage
      (
        {  buildMix, fetchHex, earmark_0_1_19 }:
          buildMix {
            name = "env_conf";
            version = "0.3.0";
            src = fetchHex {
              pkg = "env_conf";
              version = "0.3.0";
              sha256 =
                "b1d9732ed635d2dea5bcd74a512e7274350361bc3de12080a03e985d7df3d900";
            };
            beamDeps  = [ earmark_0_1_19 ];

            meta = {
              description = '' A simple 12-Factor configuration service for
                            Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/leakybucket/env_conf.git";
            };
          }
      ) {};

    env_conf = env_conf_0_3_0;

    envy_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "envy";
            version = "0.0.2";
            src = fetchHex {
              pkg = "envy";
              version = "0.0.2";
              sha256 =
                "01e20425b7b5acfa1f43d7431601015e059d9363bf9d50b00f2aeb6b0e3fa03f";
            };

            meta = {
              description = ''A package for managing env files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/envy";
            };
          }
      ) {};

    envy = envy_0_0_2;

    eper_0_94_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "eper";
            version = "0.94.0";
            src = fetchHex {
              pkg = "eper";
              version = "0.94.0";
              sha256 =
                "8d853792fa61a7fd068fe9c113a8a44bc839e11ad70cb8d5d2884566e3bede39";
            };

            meta = {
              longDescription = ''Erlang Performance and Debugging Tools sherk
                                - a profiler, similar to Linux oprofile or MacOs
                                shark gperf - a graphical performance monitor;
                                shows CPU, memory and network usage dtop -
                                similar to unix top redbug- similar to the OTP
                                dbg application, but safer, better etc.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/massemanet/eper";
            };
          }
      ) {};

    eper = eper_0_94_0;

    epgsql_3_1_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "epgsql";
            version = "3.1.1";
            src = fetchHex {
              pkg = "epgsql";
              version = "3.1.1";
              sha256 =
                "4b3f478ad090aed7200b2a8c9f2d5ef45c3aaa167be896b5237bba4b40f461d8";
            };

            meta = {
              description = ''PostgreSQL Client'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/epgsql/epgsql";
            };
          }
      ) {};

    epgsql = epgsql_3_1_1;

    episcina_1_1_0 = callPackage
      (
        {  buildRebar3, fetchHex, gproc_0_3_1 }:
          buildRebar3 {
            name = "episcina";
            version = "1.1.0";
            src = fetchHex {
              pkg = "episcina";
              version = "1.1.0";
              sha256 =
                "16238717bfbc8cb226342f6b098bb1fafb48c7547265a10ad3e6e83899abc46f";
            };

            beamDeps  = [ gproc_0_3_1 ];

            meta = {
              description = ''Erlang Connection Pool'';

            };
          }
      ) {};

    episcina = episcina_1_1_0;

    eplugin_0_1_4 = callPackage
      (
        {  buildRebar3, fetchHex, lager_2_1_1 }:
          buildRebar3 {
            name = "eplugin";
            version = "0.1.4";
            src = fetchHex {
              pkg = "eplugin";
              version = "0.1.4";
              sha256 =
                "5103579323fb71e2c245fb5886c53e9ff4115282c09ecb5368b0ae293f0b20fe";
            };

            beamDeps  = [ lager_2_1_1 ];

            meta = {
              description = ''plugin provider for erlang'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/Licenser/eplugin";
            };
          }
      ) {};

    eplugin = eplugin_0_1_4;

    epubnub_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex, jsx_2_7_1, hackney_1_3_2 }:
          buildRebar3 {
            name = "epubnub";
            version = "0.1.0";
            src = fetchHex {
              pkg = "epubnub";
              version = "0.1.0";
              sha256 =
                "5a3b21ea035b1a7d89eeaf062da946fb17682a72fb9ae12d313677552f63fa69";
            };

            beamDeps  = [ jsx_2_7_1 hackney_1_3_2 ];

            meta = {
              description = ''Erlang PubNub API'';

            };
          }
      ) {};

    epubnub = epubnub_0_1_0;

    eqc_ex_1_2_4 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "eqc_ex";
            version = "1.2.4";
            src = fetchHex {
              pkg = "eqc_ex";
              version = "1.2.4";
              sha256 =
                "2d2895bedf784ffaf11144d25e6ca11a4cfff5b73c35ec6bedd3c5ec5cabc5e9";
            };

            meta = {
              description = ''Wrappers to facilitate using Quviq QuickCheck
                            with Elixir.'';
              license = stdenv.lib.licenses.bsd3;
            };
          }
      ) {};

    eqc_ex = eqc_ex_1_2_4;

    eql_0_1_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "eql";
            version = "0.1.2";
            src = fetchHex {
              pkg = "eql";
              version = "0.1.2";
              sha256 =
                "3b1a85c491d44262802058c0de97a2c90678d5d45851b88a076b1a45a8d6d4b3";
            };

            meta = {
              description = ''Erlang with SQL'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/eql";
            };
          }
      ) {};

    eql = eql_0_1_2;

    eredis_1_0_8 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "eredis";
            version = "1.0.8";
            src = fetchHex {
              pkg = "eredis";
              version = "1.0.8";
              sha256 =
                "f303533e72129b264a2d8217c4ddc977c7527ff4b8a6a55f92f62b7fcc099334";
            };

            meta = {
              description = ''Erlang Redis client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wooga/eredis";
            };
          }
      ) {};

    eredis = eredis_1_0_8;

    eredis_cluster_0_5_4 = callPackage
      (
        {  buildRebar3, fetchHex, poolboy_1_5_1, eredis_1_0_8 }:
          buildRebar3 {
            name = "eredis_cluster";
            version = "0.5.4";
            src = fetchHex {
              pkg = "eredis_cluster";
              version = "0.5.4";
              sha256 =
                "09320fe4fb737923e254d6d7ff4da421c1515fc74be9d2d9482ee4a576367681";
            };

            beamDeps  = [ poolboy_1_5_1 eredis_1_0_8 ];

            meta = {
              description = ''An erlang wrapper for eredis library to support
                            cluster mode'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adrienmo/eredis_cluster";
            };
          }
      ) {};

    eredis_cluster = eredis_cluster_0_5_4;

    erl2ex_0_0_7 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "erl2ex";
            version = "0.0.7";
            src = fetchHex {
              pkg = "erl2ex";
              version = "0.0.7";
              sha256 =
                "2df3a8441cb059784523f7e2da15e897cf211a6cfec942c63032a4e5798805f1";
            };

            meta = {
              longDescription = ''Erl2ex is an Erlang to Elixir transpiler,
                                converting well-formed Erlang source to Elixir
                                source with equivalent functionality.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/dazuma/erl2ex";
            };
          }
      ) {};

    erl2ex = erl2ex_0_0_7;

    erlang_localtime_1_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "erlang_localtime";
            version = "1.0.0";
            src = fetchHex {
              pkg = "erlang_localtime";
              version = "1.0.0";
              sha256 =
                "46e3f7b18477b377ec71f9dcd91c4d30fe82a128ffa9f89be1595d4d08414844";
            };

            meta = {
              description = ''Erlang library for conversion from one local time
                            to another'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/choptastic/erlang_localtime";
            };
          }
      ) {};

    erlang_localtime = erlang_localtime_1_0_0;

    erlang_lua_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "erlang_lua";
            version = "0.1.0";
            src = fetchHex {
              pkg = "erlang_lua";
              version = "0.1.0";
              sha256 =
                "4376a57f86e43ae1d687dca8b6c7c7f692b95d30091a9550636328358026e6eb";
            };
            compilePorts = true;

            meta = {
              longDescription = ''Erlang-lua hex package, using Erlang`s Port
                                and C Node to run Lua VM as an external Node'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rtraschke/erlang-lua";
            };
          }
      ) {};

    erlang_lua = erlang_lua_0_1_0;

    erlang_term_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "erlang_term";
            version = "1.5.1";
            src = fetchHex {
              pkg = "erlang_term";
              version = "1.5.1";
              sha256 =
                "88bae81a80306e82fd3fc43e2d8228049e666f3cfe4627687832cd7edb878e06";
            };

            meta = {
              description = ''Provide the in-memory size of Erlang terms'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/okeuday/erlang_term";
            };
          }
      ) {};

    erlang_term = erlang_term_1_5_1;

    erlang_version_0_2_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "erlang_version";
            version = "0.2.0";
            src = fetchHex {
              pkg = "erlang_version";
              version = "0.2.0";
              sha256 =
                "74daddba65a247ec57913e5de8f243af42bbbc3d6a0c411a1252da81c09ae661";
            };

            meta = {
              description = ''Retrieve Erlang/OTP version like `18.1`'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sapporo-beam/erlang_version";
            };
          }
      ) {};

    erlang_version = erlang_version_0_2_0;

    erlastic_search_1_1_1 = callPackage
      (
        {  buildRebar3, fetchHex, jsx_2_6_2, hackney_1_1_0 }:
          buildRebar3 {
            name = "erlastic_search";
            version = "1.1.1";
            src = fetchHex {
              pkg = "erlastic_search";
              version = "1.1.1";
              sha256 =
                "ac15a64db1397b616e1308b997d5de5372a3f67bd2bbdbf32b22d635befcc55a";
            };

            beamDeps  = [ jsx_2_6_2 hackney_1_1_0 ];

            meta = {
              description = ''An Erlang app for communicating with Elastic
                            Search`s rest interface.'';
              license = stdenv.lib.licenses.lpgl3;
              homepage = "https://github.com/tsloughter/erlastic_search";
            };
          }
      ) {};

    erlastic_search = erlastic_search_1_1_1;

    erlaudio_0_2_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "erlaudio";
            version = "0.2.3";
            src = fetchHex {
              pkg = "erlaudio";
              version = "0.2.3";
              sha256 =
                "cb9efb0ce80faae003ab39f8cc2d3fccbb4bd1c8f5f525aea392f28662517032";
            };

            meta = {
              description = ''Erlang audio bindings to portaudio'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/asonge/erlaudio";
            };
          }
      ) {};

    erlaudio = erlaudio_0_2_3;

    erlcloud_0_13_0 = callPackage
      (
        {  buildRebar3, fetchHex, lhttpc_1_3_0, jsx_2_8_0 }:
          buildRebar3 {
            name = "erlcloud";
            version = "0.13.0";
            src = fetchHex {
              pkg = "erlcloud";
              version = "0.13.0";
              sha256 =
                "70e1f5aa86b5f7a62d1141a7507a9e334f833793e3b909fe9c1cfc9916e516a0";
            };

            beamDeps  = [ lhttpc_1_3_0 jsx_2_8_0 ];

            meta = {
              description = ''Erlang cloud computing library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlcloud/erlcloud";
            };
          }
      ) {};

    erlcloud = erlcloud_0_13_0;

    erlcloud_0_9_2 = callPackage
      (
        {  buildRebar3, fetchHex, meck_0_8_4, lhttpc_1_3_0, jsx_2_4_0 }:
          buildRebar3 {
            name = "erlcloud";
            version = "0.9.2";
            src = fetchHex {
              pkg = "erlcloud";
              version = "0.9.2";
              sha256 =
                "739ab77c3f007b3c8466e093726fb3e62b19691d70dbff4defc4beac61e48f12";
            };

            beamDeps  = [ meck_0_8_4 lhttpc_1_3_0 jsx_2_4_0 ];

            meta = {
              description = ''Erlang cloud computing library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlcloud/erlcloud";
            };
          }
      ) {};

    erldn_1_0_5 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "erldn";
            version = "1.0.5";
            src = fetchHex {
              pkg = "erldn";
              version = "1.0.5";
              sha256 =
                "b7fdafda24884ab52dc453a18a99ad3d31fa690770d2d50f8e5bdbc3fff0f166";
            };

            meta = {
              description = ''An edn parser for the Erlang platform.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/marianoguerra/erldn";
            };
          }
      ) {};

    erldn = erldn_1_0_5;

    erlexec_1_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "erlexec";
            version = "1.1.0";
            src = fetchHex {
              pkg = "erlexec";
              version = "1.1.0";
              sha256 =
                "772162f0f0349f89ea11b9f27401cb437ccaabf480320284a13f2259bb63cb87";
            };
            compilePorts = true;

            meta = {
              description = ''OS Process Manager'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/saleyn/erlexec";
            };
          }
      ) {};

    erlexec = erlexec_1_1_0;

    erlsh_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "erlsh";
            version = "0.1.0";
            src = fetchHex {
              pkg = "erlsh";
              version = "0.1.0";
              sha256 =
                "94ef1492dd59fef211f01ffd40c47b6e51c0f59e2a3d0739366e4890961332d9";
            };
            compilePorts = true;

            meta = {
              longDescription = ''Family of functions and ports involving
                                interacting with the system shell, paths and
                                external programs.'';

            };
          }
      ) {};

    erlsh = erlsh_0_1_0;

    erlsom_1_2_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "erlsom";
            version = "1.2.1";
            src = fetchHex {
              pkg = "erlsom";
              version = "1.2.1";
              sha256 =
                "e8f4d1d83583df7d1db8346aa30b82a6599b93fcc4b2d9165007e02ed40e7cae";
            };

            meta = {
              description = ''erlsom XSD parser'';

            };
          }
      ) {};

    erlsom = erlsom_1_2_1;

    erltrace_0_1_4 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "erltrace";
            version = "0.1.4";
            src = fetchHex {
              pkg = "erltrace";
              version = "0.1.4";
              sha256 =
                "821452cb6d470cfe22cd1793c94c4e499957c72944a5d8781253aeb5b610acb0";
            };
            compilePorts = true;

            meta = {
              description = ''erlang dtrace consumer.'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/erltrace";
            };
          }
      ) {};

    erltrace = erltrace_0_1_4;

    erlware_commons_0_14_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "erlware_commons";
            version = "0.14.0";
            src = fetchHex {
              pkg = "erlware_commons";
              version = "0.14.0";
              sha256 =
                "ec36ca48ce0d4e64a7b0e00771260257e91162816254dc2d8d3cc9f83285dafe";
            };

            meta = {
              description = ''Additional standard library for Erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlware/erlware_commons";
            };
          }
      ) {};

    erlware_commons_0_15_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "erlware_commons";
            version = "0.15.0";
            src = fetchHex {
              pkg = "erlware_commons";
              version = "0.15.0";
              sha256 =
                "5f38cb1df90148a7b21d48b221f399244ce86256584e6ea7986f2de732dee3c6";
            };

            meta = {
              description = ''Additional standard library for Erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlware/erlware_commons";
            };
          }
      ) {};

    erlware_commons_0_18_0 = callPackage
      (
        {  buildRebar3, fetchHex, cf_0_2_1 }:
          buildRebar3 {
            name = "erlware_commons";
            version = "0.18.0";
            src = fetchHex {
              pkg = "erlware_commons";
              version = "0.18.0";
              sha256 =
                "e71dda7cd5dcf34c9d07255d49c67e1d229dd230c101fdb996820bcdb5b03c49";
            };

            beamDeps  = [ cf_0_2_1 ];

            meta = {
              description = ''Additional standard library for Erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlware/erlware_commons";
            };
          }
      ) {};

    erlware_commons_0_19_0 = callPackage
      (
        {  buildRebar3, fetchHex, cf_0_2_1 }:
          buildRebar3 {
            name = "erlware_commons";
            version = "0.19.0";
            src = fetchHex {
              pkg = "erlware_commons";
              version = "0.19.0";
              sha256 =
                "5bbff9402cd9e973af81745a8a40177d245b55b4c239f80a236949b856f2dabd";
            };

            beamDeps  = [ cf_0_2_1 ];

            meta = {
              description = ''Additional standard library for Erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlware/erlware_commons";
            };
          }
      ) {};

    erlware_commons = erlware_commons_0_19_0;

    erlydtl_0_11_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "erlydtl";
            version = "0.11.1";
            src = fetchHex {
              pkg = "erlydtl";
              version = "0.11.1";
              sha256 =
                "b1958c0ec95de69458c6af8b5bffbdde0070d5042710a63b1616cacdf39ae188";
            };

            meta = {
              description = ''Django Template Language for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/project-fifo/fifo_spec";
            };
          }
      ) {};

    erlydtl = erlydtl_0_11_1;

    erlydtl2_0_11_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "erlydtl2";
            version = "0.11.1";
            src = fetchHex {
              pkg = "erlydtl2";
              version = "0.11.1";
              sha256 =
                "ae0d9f293ce8a2eeaabedf2b5f950d21e14570e67e5a38c11fe1e4ca598e6d5b";
            };

            meta = {
              description = ''Django Template Language for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlydtl/erlydtl";
            };
          }
      ) {};

    erlydtl2 = erlydtl2_0_11_1;

    erlzk_0_6_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "erlzk";
            version = "0.6.1";
            src = fetchHex {
              pkg = "erlzk";
              version = "0.6.1";
              sha256 =
                "6bba045ad0b7beb566825b463ada2464929655ce01e291022c1efed81a674759";
            };

            meta = {
              description = ''A Pure Erlang ZooKeeper Client (no C
                            dependency)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/huaban/erlzk";
            };
          }
      ) {};

    erlzk = erlzk_0_6_1;

    es_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "es";
            version = "0.0.1";
            src = fetchHex {
              pkg = "es";
              version = "0.0.1";
              sha256 =
                "88a8f096177d111f82e8c05b611a3ec067abecb2612f44abb9a12eff06218d48";
            };

            meta = {
              description = ''A shell. With stuff.'';

            };
          }
      ) {};

    es = es_0_0_1;

    escalus_2_6_4 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "escalus";
            version = "2.6.4";
            src = fetchHex {
              pkg = "escalus";
              version = "2.6.4";
              sha256 =
                "f5227c39ddbdeb1056fd69eef1c8a80364fb8b690b98d662b126bb95f4108d66";
            };

            meta = {
              description = ''Escalus is an Erlang XMPP client library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/esl/escalus";
            };
          }
      ) {};

    escalus = escalus_2_6_4;

    esel_0_1_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "esel";
            version = "0.1.2";
            src = fetchHex {
              pkg = "esel";
              version = "0.1.2";
              sha256 =
                "874d1775c86d27d9e88486a37351ffc09f826ef062c8ea211e65d08e103f946c";
            };

            meta = {
              description = ''An wrapper around openssl'';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    esel = esel_0_1_2;

    esip_1_0_2 = callPackage
      (
        {
          buildRebar3, fetchHex, stun_1_0_1, p1_utils_1_0_3, fast_tls_1_0_1
        }:
          buildRebar3 {
            name = "esip";
            version = "1.0.2";
            src = fetchHex {
              pkg = "esip";
              version = "1.0.2";
              sha256 =
                "659b684d2573a52dfe411f20a36b704c41183b4c8206261229bfad12404d1cf7";
            };
            compilePorts = true;
            beamDeps  = [ stun_1_0_1 p1_utils_1_0_3 fast_tls_1_0_1 ];

            meta = {
              description = ''ProcessOne SIP server component in Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/esip";
            };
          }
      ) {};

    esip = esip_1_0_2;

    espec_0_8_11 = callPackage
      (
        {  buildMix, fetchHex, meck_0_8_4 }:
          buildMix {
            name = "espec";
            version = "0.8.11";
            src = fetchHex {
              pkg = "espec";
              version = "0.8.11";
              sha256 =
                "a30b084605a8a4eaf41004e9c25036eb493d98cbc2118f18a0e648011a5c3bd1";
            };
            beamDeps  = [ meck_0_8_4 ];

            meta = {
              description = ''BDD test framework for Elixir inspired by
                            RSpec.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/antonmi/espec";
            };
          }
      ) {};

    espec = espec_0_8_11;

    espec_phoenix_0_2_0 = callPackage
      (
        {
          buildMix, fetchHex, phoenix_1_1_4, floki_0_7_1, espec_0_8_11
        }:
          buildMix {
            name = "espec_phoenix";
            version = "0.2.0";
            src = fetchHex {
              pkg = "espec_phoenix";
              version = "0.2.0";
              sha256 =
                "069e7df74370905cdce3c87144e707174c13e13c6541ecc4ac114465292bf08e";
            };
            beamDeps  = [ phoenix_1_1_4 floki_0_7_1 espec_0_8_11 ];

            meta = {
              description = ''ESpec for Phoenix web framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/antonmi/espec_phoenix";
            };
          }
      ) {};

    espec_phoenix = espec_phoenix_0_2_0;

    esqlite_0_2_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "esqlite";
            version = "0.2.2";
            src = fetchHex {
              pkg = "esqlite";
              version = "0.2.2";
              sha256 =
                "5f15f8014baa9d31ee83817afe9164b3ecd76f77b2de7515f2cca2ca75b642e0";
            };
            compilePorts = true;

            meta = {
              description = ''A Sqlite3 NIF'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mmzeeman/esqlite";
            };
          }
      ) {};

    esqlite = esqlite_0_2_2;

    estree_2_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "estree";
            version = "2.2.0";
            src = fetchHex {
              pkg = "estree";
              version = "2.2.0";
              sha256 =
                "0adb199b79b31f05f2f01ab87f099ea84684ffffb1571fb33cde05500f9367f2";
            };

            meta = {
              longDescription = ''Represents the JavaScript AST from the ESTree
                                spec. Includes tools for building an AST and
                                generating code from it.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/elixir-estree";
            };
          }
      ) {};

    estree = estree_2_2_0;

    esync_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "esync";
            version = "0.0.1";
            src = fetchHex {
              pkg = "esync";
              version = "0.0.1";
              sha256 =
                "28a59a0cbe885ec39dec4992aac8495147d1ec9b623883b01e8aa775cb334f03";
            };

            meta = {
              description = ''Concurrently sync two or more directories so that
                            their contents are identical'';

              homepage = "https://github.com/GrahamGoudeau21/ElixirSync";
            };
          }
      ) {};

    esync = esync_0_0_1;

    etcd_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, exjsx_3_2_0 }:
          buildMix {
            name = "etcd";
            version = "0.0.2";
            src = fetchHex {
              pkg = "etcd";
              version = "0.0.2";
              sha256 =
                "c1b559bc37812b9ab488f90f322dc0b826c94ac9809d9044b42b4fb420710848";
            };
            beamDeps  = [ httpoison_0_8_1 exjsx_3_2_0 ];

            meta = {
              description = ''Etcd APIv2 Client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bearice/elixir-etcd";
            };
          }
      ) {};

    etcd = etcd_0_0_2;

    ether_0_0_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "ether";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ether";
              version = "0.0.1";
              sha256 =
                "867752143aa09e07d0a50ae9526b7c8f620e189f509326a635c304b453496f16";
            };

            meta = {
              description = ''Elixir Debugger '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/maarek/ether";
            };
          }
      ) {};

    ether = ether_0_0_1;

    ets_map_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ets_map";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ets_map";
              version = "0.0.1";
              sha256 =
                "c33d714212c56d99b2472d522e24db808cd8a407101051d407be310412d61eae";
            };

            meta = {
              description = ''A Map-like Elixir data structure that is backed
                            by an ETS table.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antipax/ets_map";
            };
          }
      ) {};

    ets_map = ets_map_0_0_1;

    etude_0_3_7 = callPackage
      (
        {  buildMix, fetchHex, rebind_0_1_3, lineo_0_1_0 }:
          buildMix {
            name = "etude";
            version = "0.3.7";
            src = fetchHex {
              pkg = "etude";
              version = "0.3.7";
              sha256 =
                "ee18b03eec697eccfd7027c4aaaa944e0d3335ece6c150504248763d94bbc338";
            };
            beamDeps  = [ rebind_0_1_3 lineo_0_1_0 ];

            meta = {
              description = ''parallel computation coordination utilities for
                            erlang/elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/etude";
            };
          }
      ) {};

    etude_0_4_0 = callPackage
      (
        {
          buildMix, fetchHex, rebind_0_1_3, parse_trans_2_9_0, lineo_0_1_0
        }:
          buildMix {
            name = "etude";
            version = "0.4.0";
            src = fetchHex {
              pkg = "etude";
              version = "0.4.0";
              sha256 =
                "602db062916cfe50b82257f1fdce039b08584d7ff285183c3a51060f197b4f01";
            };
            beamDeps  = [ rebind_0_1_3 parse_trans_2_9_0 lineo_0_1_0 ];

            meta = {
              description = ''parallel computation coordination utilities for
                            erlang/elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/etude";
            };
          }
      ) {};

    etude = etude_0_4_0;

    euler_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "euler";
            version = "0.0.1";
            src = fetchHex {
              pkg = "euler";
              version = "0.0.1";
              sha256 =
                "ab12770dd81fbb20524c751f71a31b8cc16553404665a336212d20bf351eb0fc";
            };

            meta = {
              longDescription = ''euler is a library that provides math
                                functions. ## Features * Working with integers:
                                * Greatest common divisor of two numbers (gcd)
                                '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/magicienap/euler";
            };
          }
      ) {};

    euler = euler_0_0_1;

    eunit_formatters_0_3_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "eunit_formatters";
            version = "0.3.1";
            src = fetchHex {
              pkg = "eunit_formatters";
              version = "0.3.1";
              sha256 =
                "64a40741429b7aff149c605d5a6135a48046af394a7282074e6003b3b56ae931";
            };

            meta = {
              description = ''Better output for eunit suites'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/seancribbs/eunit_formatters";
            };
          }
      ) {};

    eunit_formatters = eunit_formatters_0_3_1;

    event_source_encoder_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "event_source_encoder";
            version = "0.0.3";
            src = fetchHex {
              pkg = "event_source_encoder";
              version = "0.0.3";
              sha256 =
                "b930b7a8cf52e32913ba9bd333472253e2c100c91216c54dde043e5106d601df";
            };

            meta = {
              longDescription = ''EventSourceEncoder is a Elixir library to
                                encode data into EventSource compliant data. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chatgris/event_source_encoder";
            };
          }
      ) {};

    event_source_encoder = event_source_encoder_0_0_3;

    everex_0_1_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          plug_0_11_3,
          oauther_1_0_2,
          httpoison_0_7_5,
          cowboy_1_0_4
        }:
          buildMix {
            name = "everex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "everex";
              version = "0.1.1";
              sha256 =
                "3a85fc8d749b58c5fe87dc224cb7066cf1a45ac06d87c3661cd7a555076a901e";
            };
            beamDeps  = [
                          plug_0_11_3 oauther_1_0_2 httpoison_0_7_5 cowboy_1_0_4
                        ];

            meta = {
              longDescription = ''Evernote API client for Elixir NOTE: Everex
                                is UNDER DEVELOPMENT, and is NOT ready for
                                production use. Feedback and contributions (via
                                pull requests) are very welcome, of course!
                                UPDATE: There is now an example showing how to
                                get access using the OAuth authentication
                                process. See `examples/oauth.exs`. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jwarlander/everex";
            };
          }
      ) {};

    everex = everex_0_1_1;

    everyoneapi_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_3_1, httpoison_0_7_5 }:
          buildMix {
            name = "everyoneapi";
            version = "0.0.1";
            src = fetchHex {
              pkg = "everyoneapi";
              version = "0.0.1";
              sha256 =
                "8214fa434a10716f252bcbcb5660faddbc20909d1058d1b491c95132eb4b3182";
            };
            beamDeps  = [ poison_1_3_1 httpoison_0_7_5 ];

            meta = {
              description = ''API Client for EveryoneAPI.com.'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/knewter/everyoneapi";
            };
          }
      ) {};

    everyoneapi = everyoneapi_0_0_1;

    ewebmachine_2_0_12 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "ewebmachine";
            version = "2.0.12";
            src = fetchHex {
              pkg = "ewebmachine";
              version = "2.0.12";
              sha256 =
                "66a4ca701594da9396d6bab03f074f1ab56080a62e6545e6e455a24296c96a1a";
            };
            beamDeps  = [ plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              longDescription = ''Ewebmachine contains macros and plugs to
                                allow you to compose HTTP decision handlers and
                                run the HTTP decision tree to get your HTTP
                                response. This project is a rewrite for Elixir
                                and Plug of basho webmachine.'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/awetzel/ewebmachine";
            };
          }
      ) {};

    ewebmachine = ewebmachine_2_0_12;

    ex2ms_1_3_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex2ms";
            version = "1.3.0";
            src = fetchHex {
              pkg = "ex2ms";
              version = "1.3.0";
              sha256 =
                "ff2bfb0adb93830705cd73f2860891fd44a8f22cc2fdaf9f23bfcf2e4bdcfa79";
            };

            meta = {
              description = ''Translates Elixir functions to match
                            specifications for use with `ets`.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/ex2ms";
            };
          }
      ) {};

    ex2ms_1_4_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex2ms";
            version = "1.4.0";
            src = fetchHex {
              pkg = "ex2ms";
              version = "1.4.0";
              sha256 =
                "8a743796d9f067f047e50d9726dfd8eb2791e6ce00c79edbd5ced6a06fe5e388";
            };

            meta = {
              description = ''Translates Elixir functions to match
                            specifications for use with `ets`.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/ex2ms";
            };
          }
      ) {};

    ex2ms = ex2ms_1_4_0;

    ex_abnf_0_2_7 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_abnf";
            version = "0.2.7";
            src = fetchHex {
              pkg = "ex_abnf";
              version = "0.2.7";
              sha256 =
                "2ca070a97b392a142619f0a126e48c7e27d39353be9a76fb358c401821495e1a";
            };

            meta = {
              longDescription = ''A parser and interpreter for ABNF grammars.
                                This is not a parser generator, but an
                                interpreter. It will load up an ABNF grammar,
                                and generate an AST for it. Then one can apply
                                any of the rules to an input and the interpreter
                                will parse the input according to the rule.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/ex_abnf";
            };
          }
      ) {};

    ex_abnf = ex_abnf_0_2_7;

    ex_aerospike_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_aerospike";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_aerospike";
              version = "0.0.1";
              sha256 =
                "3420ba4b94c25aca08106d58ce4bdc941767e588bf8092747a611e38a7b5e03f";
            };
             meta = {    };
          }
      ) {};

    ex_aerospike = ex_aerospike_0_0_1;

    ex_aws_0_4_17 = callPackage
      (
        {
          buildMix,
          fetchHex,
          sweet_xml_0_6_1,
          poison_1_5_2,
          jsx_2_8_0,
          httpotion_2_2_0,
          httpoison_0_8_1
        }:
          buildMix {
            name = "ex_aws";
            version = "0.4.17";
            src = fetchHex {
              pkg = "ex_aws";
              version = "0.4.17";
              sha256 =
                "e0b28688f9409eb3132efc0d01e02854dd1a22fa7df8940ef88a75ba1448a01c";
            };
            beamDeps  = [
                          sweet_xml_0_6_1
                          poison_1_5_2
                          jsx_2_8_0
                          httpotion_2_2_0
                          httpoison_0_8_1
                        ];

            meta = {
              description = ''AWS client. Currently supports Dynamo, Kinesis,
                            Lambda, S3'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CargoSense/ex_aws";
            };
          }
      ) {};

    ex_aws = ex_aws_0_4_17;

    ex_bitcask_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_bitcask";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_bitcask";
              version = "0.1.0";
              sha256 =
                "dc771229aae3c07c31a5523303f0c4dbe3c700d5025a09dfcca9cc357222c463";
            };

            meta = {
              longDescription = ''Elixir wrapper of Basho`s Bitcask Key/Value
                                store. Bitcask as a Log-Structured Hash Table
                                for Fast Key/Value Data. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/JonGretar/ExBitcask";
            };
          }
      ) {};

    ex_bitcask = ex_bitcask_0_1_0;

    ex_brace_expansion_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_brace_expansion";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ex_brace_expansion";
              version = "0.0.2";
              sha256 =
                "d7470a00cffe4425f89e83d7288c24b641c3f6cbde136a08089e7420467cd237";
            };

            meta = {
              longDescription = ''Brace expansion, as known from sh/bash, in
                                Elixir. Quick example:
                                ExBraceExpansion.expand("file-{a,b,c}.jpg") =>
                                ["file-a.jpg", "file-b.jpg", "file-c.jpg"] '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gniquil/ex_brace_expansion";
            };
          }
      ) {};

    ex_brace_expansion = ex_brace_expansion_0_0_2;

    ex_chimp_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "ex_chimp";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_chimp";
              version = "0.0.1";
              sha256 =
                "1a4e97e2a4b7bf7401660acd61d7e35b9c758638c305324971eddc5bd1bb0bee";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Basic/minimal Mailchimp API client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/twined/ex_chimp";
            };
          }
      ) {};

    ex_chimp = ex_chimp_0_0_1;

    ex_clacks_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "ex_clacks";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_clacks";
              version = "0.1.1";
              sha256 =
                "524f966b03b1a1ac4ab3f6beeef6ce5030cf3b16927c466d42a8b08c5355b231";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              description = ''A Plug that pays homage to Terry Pratchett'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/polymetis/ex_clacks";
            };
          }
      ) {};

    ex_clacks = ex_clacks_0_1_1;

    ex_closeio_0_0_7 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "ex_closeio";
            version = "0.0.7";
            src = fetchHex {
              pkg = "ex_closeio";
              version = "0.0.7";
              sha256 =
                "8873b4c80e610ebed7a43245aaeb182a56ad6709ca318cf4ee0bf9870fd4b0b4";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Close.io client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/taylorbrooks/ex_closeio";
            };
          }
      ) {};

    ex_closeio = ex_closeio_0_0_7;

    ex_cloudinary_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "ex_cloudinary";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_cloudinary";
              version = "0.1.1";
              sha256 =
                "1473ab409152d7d61062224ae5402c6ec677c10da63e29b1332c6fd35cf91381";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''A wrapper around the HTTPoison.Base module for
                            Cloudinary.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sschneider1207/ExCloudinary";
            };
          }
      ) {};

    ex_cloudinary = ex_cloudinary_0_1_1;

    ex_conf_0_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_conf";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_conf";
              version = "0.1.2";
              sha256 =
                "0156e2b0d35a2ea9eeebe55e301035bfeb2187412a07d573cc1bc4a163b85de5";
            };

            meta = {
              description = ''Simple Elixir Configuration Management '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/ex_conf";
            };
          }
      ) {};

    ex_conf_0_1_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_conf";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ex_conf";
              version = "0.1.3";
              sha256 =
                "140dfae39127354f6efa6c295ca5407a20cf2802be199ecdc77aa38e2915ca42";
            };

            meta = {
              description = ''Simple Elixir Configuration Management '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/ex_conf";
            };
          }
      ) {};

    ex_conf = ex_conf_0_1_3;

    ex_crypto_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, timex_1_0_1, poison_2_1_0, pipe_0_0_2 }:
          buildMix {
            name = "ex_crypto";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_crypto";
              version = "0.0.1";
              sha256 =
                "f9c47326435e52154a6db97359356a44c1fe21a0d26fda24a46367ba33ccb85f";
            };
            beamDeps  = [ timex_1_0_1 poison_2_1_0 pipe_0_0_2 ];

            meta = {
              longDescription = ''A wrapper around the Erlang Crypto module
                                with sensible defaults for common tasks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ntrepid8/ex_crypto";
            };
          }
      ) {};

    ex_crypto = ex_crypto_0_0_1;

    ex_csv_0_1_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_csv";
            version = "0.1.4";
            src = fetchHex {
              pkg = "ex_csv";
              version = "0.1.4";
              sha256 =
                "56ee6b70564aa1762f5bfc2b205e55caa83aef046d974614a22b8ec0f839005e";
            };

            meta = {
              description = ''CSV for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CargoSense/ex_csv";
            };
          }
      ) {};

    ex_csv = ex_csv_0_1_4;

    ex_doc_0_10_0 = callPackage
      (
        {  buildMix, fetchHex, earmark_0_1_14 }:
          buildMix {
            name = "ex_doc";
            version = "0.10.0";
            src = fetchHex {
              pkg = "ex_doc";
              version = "0.10.0";
              sha256 =
                "3d9f15777aa3fb62700d5984eb09ceeb6c1574d61be0f70801e3390e36942b35";
            };
            beamDeps  = [ earmark_0_1_14 ];

            meta = {
              description = ''ExDoc is a documentation generation tool for
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/ex_doc";
            };
          }
      ) {};

    ex_doc_0_11_4 = callPackage
      (
        {  buildMix, fetchHex, earmark_0_1_14 }:
          buildMix {
            name = "ex_doc";
            version = "0.11.4";
            src = fetchHex {
              pkg = "ex_doc";
              version = "0.11.4";
              sha256 =
                "639e97b24c1c6c172f557163b830673646983417de9ac0da2c25c7063deed293";
            };
            beamDeps  = [ earmark_0_1_14 ];

            meta = {
              description = ''ExDoc is a documentation generation tool for
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/ex_doc";
            };
          }
      ) {};

    ex_doc = ex_doc_0_11_4;

    ex_doc_0_6_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_doc";
            version = "0.6.2";
            src = fetchHex {
              pkg = "ex_doc";
              version = "0.6.2";
              sha256 =
                "fdd21c651fbe96f39697c3acd9ee6b849348cafb4000b92a130e2df8a0a3e2b6";
            };

            meta = {
              description = ''ExDoc is a documentation generation tool for
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/ex_doc";
            };
          }
      ) {};

    ex_doc_dash_0_3_0 = callPackage
      (
        {  buildMix, fetchHex, ex_doc_0_11_4, earmark_0_1_14 }:
          buildMix {
            name = "ex_doc_dash";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_doc_dash";
              version = "0.3.0";
              sha256 =
                "0b511eecda1dd2c51fab8b1e071e3d6292f6a136232425d3f20baa9ca0fbeb43";
            };
            beamDeps  = [ ex_doc_0_11_4 earmark_0_1_14 ];

            meta = {
              description = ''Formatter for ExDoc to generate docset
                            documentation for use in Dash.app.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JonGretar/ExDocDash";
            };
          }
      ) {};

    ex_doc_dash = ex_doc_dash_0_3_0;

    ex_doc_epub_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, ex_doc_0_11_4, earmark_0_1_19 }:
          buildMix {
            name = "ex_doc_epub";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ex_doc_epub";
              version = "0.0.2";
              sha256 =
                "dbb606e86c70cff37fb2e228f9b5971ee3afb08a10c247d5734b114c5d5fdb15";
            };
            beamDeps  = [ ex_doc_0_11_4 earmark_0_1_19 ];

            meta = {
              description = ''Create documentation for Elixir projects in EPUB
                            format'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/milmazz/ex_doc_epub";
            };
          }
      ) {};

    ex_doc_epub = ex_doc_epub_0_0_2;

    ex_dockerapi_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_7_5 }:
          buildMix {
            name = "ex_dockerapi";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_dockerapi";
              version = "0.0.1";
              sha256 =
                "337481d27cb65f7d607e28f0bc129f2197c1b04fdc357446f5a07f2296b9604b";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_7_5 ];

            meta = {
              description = ''Docker API client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JonGretar/DockerAPI.ex";
            };
          }
      ) {};

    ex_dockerapi = ex_dockerapi_0_0_1;

    ex_edn_0_1_2 = callPackage
      (
        {  buildMix, fetchHex, timex_0_13_5, array_1_0_1 }:
          buildMix {
            name = "ex_edn";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_edn";
              version = "0.1.2";
              sha256 =
                "9568e79cb96bd61f26389b96ab1ac4fee57762fba6c166ddc745c521ccf2c5ca";
            };
            beamDeps  = [ timex_0_13_5 array_1_0_1 ];

            meta = {
              longDescription = ''[edn](https://github.com/edn-format/edn)
                                (extensible data notation) encoder/decoder
                                implemented in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jfacorro/ExEdn/";
            };
          }
      ) {};

    ex_edn = ex_edn_0_1_2;

    ex_fabricators_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_fabricators";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_fabricators";
              version = "0.1.0";
              sha256 =
                "edde1017f8a8fc3dbb3915c8791a6d0801f06fbe72f69ec50222dc47930c57d9";
            };

            meta = {
              description = ''Easy way to cook your structs for tests'';

              homepage = "https://github.com/alterego-labs/ex_fabricators";
            };
          }
      ) {};

    ex_fabricators = ex_fabricators_0_1_0;

    ex_hl7_0_1_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_hl7";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ex_hl7";
              version = "0.1.3";
              sha256 =
                "57ea6567e6da3cb14098bddb95a843dbfb04981578ad5a0f3c437bce8ac9cd29";
            };

            meta = {
              description = ''HL7 Parser for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jcomellas/ex_hl7";
            };
          }
      ) {};

    ex_hl7 = ex_hl7_0_1_3;

    ex_iss_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "ex_iss";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ex_iss";
              version = "1.0.0";
              sha256 =
                "8b2b2eebbd75593e814e712555c7f69138864317cf2f0093a82ca305138baa83";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              longDescription = ''This package is for interfacing with the Open
                                Notify API to information such as the ISS`s
                                current location, crew, and when it will pass
                                over a location.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/cryptobird/ex_iss";
            };
          }
      ) {};

    ex_iss = ex_iss_1_0_0;

    ex_json_schema_0_3_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_json_schema";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ex_json_schema";
              version = "0.3.1";
              sha256 =
                "928faaafb82e08f0458257b4eea9e7fb7cc0bd2551103d0ae4fcb1840d343cc4";
            };

            meta = {
              longDescription = ''A JSON Schema validator with full support for
                                the draft 4 specification and zero
                                dependencies.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jonasschmidt/ex_json_schema";
            };
          }
      ) {};

    ex_json_schema = ex_json_schema_0_3_1;

    ex_link_header_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_link_header";
            version = "0.0.3";
            src = fetchHex {
              pkg = "ex_link_header";
              version = "0.0.3";
              sha256 =
                "f4edcb2194c7480f2b03f00da68d25de03c38d217497639ebdbca6325890e153";
            };

            meta = {
              description = ''Parse HTTP link headers in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/simonrand/ex_link_header";
            };
          }
      ) {};

    ex_link_header = ex_link_header_0_0_3;

    ex_machina_0_6_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_machina";
            version = "0.6.1";
            src = fetchHex {
              pkg = "ex_machina";
              version = "0.6.1";
              sha256 =
                "f55476400ca109d24f216ee961a6d04be4a932429ecd3ae6a948d5d04f4fa2ea";
            };

            meta = {
              description = ''A factory library by the creators of
                            FactoryGirl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/thoughtbot/ex_machina";
            };
          }
      ) {};

    ex_machina = ex_machina_0_6_1;

    ex_mark2pdf_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, earmark_0_1_19 }:
          buildMix {
            name = "ex_mark2pdf";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_mark2pdf";
              version = "0.1.0";
              sha256 =
                "d1458c9b01bc53b9c365d4d12ac8187b09e06f02667639d4a63c4543427dfb1d";
            };
            beamDeps  = [ earmark_0_1_19 ];

            meta = {
              description = ''Generate a PDF from Markdown file.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/darui00kara/ex_mark2pdf";
            };
          }
      ) {};

    ex_mark2pdf = ex_mark2pdf_0_1_0;

    ex_marshal_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, decimal_1_1_1 }:
          buildMix {
            name = "ex_marshal";
            version = "0.0.3";
            src = fetchHex {
              pkg = "ex_marshal";
              version = "0.0.3";
              sha256 =
                "28eaf18799bca83519d0ac517a4fd0a9a2211bea7f96c74b27952a20be2938a8";
            };
            beamDeps  = [ decimal_1_1_1 ];

            meta = {
              description = ''Ruby Marshal format implemented in Elixir.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/gaynetdinov/ex_marshal";
            };
          }
      ) {};

    ex_marshal = ex_marshal_0_0_3;

    ex_minimatch_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, ex_brace_expansion_0_0_2 }:
          buildMix {
            name = "ex_minimatch";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_minimatch";
              version = "0.0.1";
              sha256 =
                "3255bb8496635d3ef5d86ec6829958a3573ff730ca01534b0fead9c2e3af7de4";
            };
            beamDeps  = [ ex_brace_expansion_0_0_2 ];

            meta = {
              longDescription = ''Globbing paths without walking the tree!
                                Elixir and Erlang provide `wildcard` functions
                                in the stdlib. But these will walk the directory
                                tree. If you simply want to test whether a file
                                path matches a glob, ExMinimatch is for you. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gniquil/ex_minimatch";
            };
          }
      ) {};

    ex_minimatch = ex_minimatch_0_0_1;

    ex_modbus_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, ex_doc_0_11_4, earmark_0_1_19 }:
          buildMix {
            name = "ex_modbus";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ex_modbus";
              version = "0.0.2";
              sha256 =
                "8930d2bdd867ebc649f285689723499f39af181ee84cb4e7856eaa3f9cc21d30";
            };
            beamDeps  = [ ex_doc_0_11_4 earmark_0_1_19 ];

            meta = {
              description = ''An Elixir ModbusTCP client implementation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hirschenberger/ex_modbus";
            };
          }
      ) {};

    ex_modbus = ex_modbus_0_0_2;

    ex_omegle_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, jsex_2_0_0, httpoison_0_8_1 }:
          buildMix {
            name = "ex_omegle";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_omegle";
              version = "0.1.1";
              sha256 =
                "8166d1125a2670f55fce2030367d9da381e577ad122dcf1d03784e536c78cc65";
            };
            beamDeps  = [ jsex_2_0_0 httpoison_0_8_1 ];

            meta = {
              description = ''A minimal Omegle chat client library for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/xtagon/ex_omegle";
            };
          }
      ) {};

    ex_omegle = ex_omegle_0_1_1;

    ex_orient_1_0_2 = callPackage
      (
        {
          buildMix, fetchHex, poolboy_1_2_1, poison_1_0_3, marco_polo_0_2_1
        }:
          buildMix {
            name = "ex_orient";
            version = "1.0.2";
            src = fetchHex {
              pkg = "ex_orient";
              version = "1.0.2";
              sha256 =
                "36296ba45e6d321c8c023ab110a1c80bac9e48afe0c6df00aa44223870d74796";
            };
            beamDeps  = [ poolboy_1_2_1 poison_1_0_3 marco_polo_0_2_1 ];

            meta = {
              longDescription = ''OrientDB query builder that provides nice
                                syntax and connection pooling. Uses MarcoPolo
                                under the hood to run commands.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Remesh/ex_orient/";
            };
          }
      ) {};

    ex_orient = ex_orient_1_0_2;

    ex_parametarized_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_parametarized";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ex_parametarized";
              version = "1.0.0";
              sha256 =
                "daa04087cc41608f1604f2cc52dfe3e3c3ee4612c3b6091d7b6025d10d79f31a";
            };

            meta = {
              description = ''Simple macro for parametarized testing'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/ex_parametarized";
            };
          }
      ) {};

    ex_parametarized = ex_parametarized_1_0_0;

    ex_parameterized_1_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_parameterized";
            version = "1.0.2";
            src = fetchHex {
              pkg = "ex_parameterized";
              version = "1.0.2";
              sha256 =
                "c3a9b2471060a7f2cfc4cac4617125d4272991315d6223156d67c10abd055b10";
            };

            meta = {
              description = ''Simple macro for parameterized testing'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/ex_parameterized";
            };
          }
      ) {};

    ex_parameterized = ex_parameterized_1_0_2;

    ex_parsec_0_2_1 = callPackage
      (
        {  buildMix, fetchHex, monad_1_0_5 }:
          buildMix {
            name = "ex_parsec";
            version = "0.2.1";
            src = fetchHex {
              pkg = "ex_parsec";
              version = "0.2.1";
              sha256 =
                "1564d820e0b8b265a1525454aa9914edc15b6165ae74ffa31008686cbbad67da";
            };
            beamDeps  = [ monad_1_0_5 ];

            meta = {
              description = ''A parser combinator library inspired by
                            Parsec.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alexrp/ex_parsec";
            };
          }
      ) {};

    ex_parsec = ex_parsec_0_2_1;

    ex_pool_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_pool";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_pool";
              version = "0.1.1";
              sha256 =
                "0e2a945acefa067f902dbfa6cb683884838099d6be496dc43cb7dccf31df978d";
            };

            meta = {
              description = ''A generic pooling library for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/jcabotc/ex_pool";
            };
          }
      ) {};

    ex_pool = ex_pool_0_1_1;

    ex_rated_1_2_1 = callPackage
      (
        {  buildMix, fetchHex, ex2ms_1_3_0 }:
          buildMix {
            name = "ex_rated";
            version = "1.2.1";
            src = fetchHex {
              pkg = "ex_rated";
              version = "1.2.1";
              sha256 =
                "868282cdf5b8a6698382182411ec46965204a0fbe83e65368004e944a5c608ac";
            };
            beamDeps  = [ ex2ms_1_3_0 ];

            meta = {
              longDescription = ''ExRated, the OTP GenServer with the naughty
                                name that allows you to rate-limit calls to any
                                service that requires it. For example,
                                rate-limit calls to your favorite API which
                                requires no more than `limit` API calls within a
                                `scale` milliseconds time window. You can
                                enforce limits for windows as narrow as
                                milliseconds, or as broad as you like.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/grempe/ex_rated";
            };
          }
      ) {};

    ex_rated = ex_rated_1_2_1;

    ex_rfc3966_0_2_3 = callPackage
      (
        {  buildMix, fetchHex, ex_abnf_0_2_7 }:
          buildMix {
            name = "ex_rfc3966";
            version = "0.2.3";
            src = fetchHex {
              pkg = "ex_rfc3966";
              version = "0.2.3";
              sha256 =
                "730e14d9670ab0d2b2b24c2d3bfabe861bf21d4163c01db747a91c54090cc0d5";
            };
            beamDeps  = [ ex_abnf_0_2_7 ];

            meta = {
              longDescription = ''A "tel" URI parser trying to be strictly
                                compatible with RFC3966. Uses official ABNF
                                grammar and ex_abnf as interpreter.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/ex_rfc3966";
            };
          }
      ) {};

    ex_rfc3966 = ex_rfc3966_0_2_3;

    ex_rfc3986_0_2_6 = callPackage
      (
        {  buildMix, fetchHex, ex_abnf_0_2_7 }:
          buildMix {
            name = "ex_rfc3986";
            version = "0.2.6";
            src = fetchHex {
              pkg = "ex_rfc3986";
              version = "0.2.6";
              sha256 =
                "bfc8ce510f910dbbd1f4a8433de85090375d1701e0b9a488ba7afd8efae98bfa";
            };
            beamDeps  = [ ex_abnf_0_2_7 ];

            meta = {
              longDescription = ''An URI parser trying to be strictly
                                compatible with RFC3986. Uses official ABNF
                                grammar and ex_abnf as interpreter.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/ex_rfc3986";
            };
          }
      ) {};

    ex_rfc3986 = ex_rfc3986_0_2_6;

    ex_spec_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_spec";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ex_spec";
              version = "1.0.0";
              sha256 =
                "e5f4b6ee0a918015d1d190ead7807f31ec62a8d8920fc93602bf722c171e7ae8";
            };

            meta = {
              description = ''BDD-like syntax for ExUnit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/drewolson/ex_spec";
            };
          }
      ) {};

    ex_spec = ex_spec_1_0_0;

    ex_statsd_0_5_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_statsd";
            version = "0.5.3";
            src = fetchHex {
              pkg = "ex_statsd";
              version = "0.5.3";
              sha256 =
                "357c616a327a40133e49a54db1d46b0d7c9ab2de186f7bfecdc0efca6394adf6";
            };

            meta = {
              description = ''A StatsD client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CargoSense/ex_statsd";
            };
          }
      ) {};

    ex_statsd = ex_statsd_0_5_3;

    ex_sync_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, connection_1_0_2 }:
          buildMix {
            name = "ex_sync";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_sync";
              version = "0.0.1";
              sha256 =
                "82261cf62a567b8eb0eba35dfbf0d9b546110825e8c64bb4ebc2ac8e37458499";
            };
            beamDeps  = [ connection_1_0_2 ];

            meta = {
              longDescription = ''A library to handle [Differential
                                Synchroniazation](https://neil.fraser.name/writing/sync/)
                                in an Elixir app.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/invrs/exsync";
            };
          }
      ) {};

    ex_sync = ex_sync_0_0_1;

    ex_test_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_test";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_test";
              version = "0.0.1";
              sha256 =
                "c283542766be3f9044068a6a91c22a8270987334151db7bd10f12c8db1ebfbe3";
            };

            meta = {
              description = ''Wrapper around ExUnit to support BBD (rspec) like
                            syntax'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mcb/ex_test";
            };
          }
      ) {};

    ex_test = ex_test_0_0_1;

    ex_twilio_0_1_3 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, inflex_1_0_0, httpotion_2_1_0
        }:
          buildMix {
            name = "ex_twilio";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ex_twilio";
              version = "0.1.3";
              sha256 =
                "50b949beed606a3e5dceb63c07db7f79cb0806901ea23bc109a9969429d8a2bf";
            };
            beamDeps  = [ poison_1_5_2 inflex_1_0_0 httpotion_2_1_0 ];

            meta = {
              description = ''Twilio API library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/ex_twilio";
            };
          }
      ) {};

    ex_twilio = ex_twilio_0_1_3;

    ex_twiml_2_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_twiml";
            version = "2.1.0";
            src = fetchHex {
              pkg = "ex_twiml";
              version = "2.1.0";
              sha256 =
                "7515c90ea4342e178b2894ca4cf8f03225a20c35e94c1f19e47bb839cc5f627d";
            };

            meta = {
              description = ''Generate TwiML with Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/ex_twiml";
            };
          }
      ) {};

    ex_twiml = ex_twiml_2_1_0;

    ex_unit_emacs_0_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_unit_emacs";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_unit_emacs";
              version = "0.1.2";
              sha256 =
                "f22a3c987b39b2ebedd9652a2fab07d7efd43baf376d9854398095bd220bd462";
            };

            meta = {
              description = ''Emacs integration for ExUnit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bruce/ex_unit_emacs";
            };
          }
      ) {};

    ex_unit_emacs = ex_unit_emacs_0_1_2;

    ex_unit_fixtures_0_3_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_unit_fixtures";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ex_unit_fixtures";
              version = "0.3.1";
              sha256 =
                "b4b988211bf4cd08a26eb76756e4563c94c6648c195e45af26ea62e4d37a65f6";
            };

            meta = {
              description = ''A modular fixture system for ExUnit, inspired by
                            py.test fixtures.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/obmarg/ex_unit_fixtures";
            };
          }
      ) {};

    ex_unit_fixtures = ex_unit_fixtures_0_3_1;

    ex_vmstats_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ex_vmstats";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_vmstats";
              version = "0.0.1";
              sha256 =
                "587d088696b51b0e053b2626c6de51ca7be67b5e3a49c7320da5b4e7cd96d347";
            };

            meta = {
              description = ''An Elixir package for pushing Erlang VM stats
                            into StatsD.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fanduel/ex_vmstats";
            };
          }
      ) {};

    ex_vmstats = ex_vmstats_0_0_1;

    exactor_2_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exactor";
            version = "2.2.0";
            src = fetchHex {
              pkg = "exactor";
              version = "2.2.0";
              sha256 =
                "c60cd68899db3ec0bdbd41c7ccf3ae3b52391a18704040461763f052e97b5e15";
            };

            meta = {
              description = ''Simplified creation of GenServer based processes
                            in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/exactor";
            };
          }
      ) {};

    exactor = exactor_2_2_0;

    example_files_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "example_files";
            version = "0.2.0";
            src = fetchHex {
              pkg = "example_files";
              version = "0.2.0";
              sha256 =
                "5454a42e421f5b35669fa80aeac067ca010dfb4fd7f834a530070e2a95d71689";
            };

            meta = {
              longDescription = ''Mix tasks for managing example files in your
                                project. Your project may contain files that are
                                intended to serve as explanatory samples of
                                files provided by a project contributor or user,
                                such as configuration and the like. The Mix
                                tasks provided here enable you to easily find,
                                copy, and check the freshness of example files
                                and your copies of them.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/njonsson/example_files";
            };
          }
      ) {};

    example_files = example_files_0_2_0;

    exauth_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exauth";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exauth";
              version = "0.0.1";
              sha256 =
                "40a6bbea6f6b2d524cc4a4107aa9a6a5dc725171968ce8b4aa43599f8835d3cc";
            };

            meta = {
              description = ''Wrapper for erlang-oauth'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mschae/exauth";
            };
          }
      ) {};

    exauth = exauth_0_0_1;

    exbouncer_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exbouncer";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exbouncer";
              version = "0.0.1";
              sha256 =
                "1152124b31dd00eddfb59fff015d92632744fa5cd4630a7eb8976a82aa012e41";
            };

            meta = {
              longDescription = ''An authorization library in Elixir for Plug
                                applications that restricts what resources the
                                current user/admin or any role is allowed to
                                access,'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vysakh0/exbouncer";
            };
          }
      ) {};

    exbouncer = exbouncer_0_0_1;

    excaliper_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "excaliper";
            version = "0.0.1";
            src = fetchHex {
              pkg = "excaliper";
              version = "0.0.1";
              sha256 =
                "d43430518ffcf8de60a1d44355f6a200f348ec1ca8bc4287ca17c97543e86732";
            };

            meta = {
              description = ''Fast image dimension detector inspired by the
                            Node.JS module Calipers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mgartner/excaliper";
            };
          }
      ) {};

    excaliper = excaliper_0_0_1;

    excellent_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "excellent";
            version = "0.0.1";
            src = fetchHex {
              pkg = "excellent";
              version = "0.0.1";
              sha256 =
                "a0628dce02de6a33cf441883723c480b0f07fdacade46f6d608465bb717491bd";
            };

            meta = {
              description = ''A OpenXL (Excel files ending with .xlsx) parser
                            for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/leifg/excellent";
            };
          }
      ) {};

    excellent = excellent_0_0_1;

    excheck_0_3_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "excheck";
            version = "0.3.2";
            src = fetchHex {
              pkg = "excheck";
              version = "0.3.2";
              sha256 =
                "138cf65d5ca716b94ff3368e6f089c855e59d95e503612399a231e68fc855484";
            };

            meta = {
              description = ''Property-based testing library for Elixir
                            (QuickCheck style).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/excheck";
            };
          }
      ) {};

    excheck = excheck_0_3_2;

    excoap_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "excoap";
            version = "0.0.1";
            src = fetchHex {
              pkg = "excoap";
              version = "0.0.1";
              sha256 =
                "06caae698590da85aded80db7996300127d48a4e9cf7bdca8d35113c094e5094";
            };

            meta = {
              description = ''CoAP implementation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mbialon/excoap";
            };
          }
      ) {};

    excoap = excoap_0_0_1;

    exconstructor_0_9_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exconstructor";
            version = "0.9.0";
            src = fetchHex {
              pkg = "exconstructor";
              version = "0.9.0";
              sha256 =
                "14af965ba0370d7808e16f8b2781b8a5ea3e42cf6c34012efe75e60b56b2dbbc";
            };

            meta = {
              longDescription = ''ExConstructor generates constructor functions
                                for your structs, handling map-vs-keyword-list,
                                string-vs-atom-keys, and
                                camelCase-vs-under_score issues
                                automatically.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/appcues/exconstructor";
            };
          }
      ) {};

    exconstructor = exconstructor_0_9_0;

    excountries_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_7_5 }:
          buildMix {
            name = "excountries";
            version = "0.0.3";
            src = fetchHex {
              pkg = "excountries";
              version = "0.0.3";
              sha256 =
                "ec0bbb4147b54817e7d17a7ed91e1b88046769a26020c591ed5fde336b4fb8d3";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_7_5 ];

            meta = {
              description = ''Elixir wrapper for REST Countries API
                            (http://restcountries.eu/)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fteem/excountries";
            };
          }
      ) {};

    excountries = excountries_0_0_3;

    excoveralls_0_5_1 = callPackage
      (
        {  buildMix, fetchHex, hackney_1_4_8, exjsx_3_2_0 }:
          buildMix {
            name = "excoveralls";
            version = "0.5.1";
            src = fetchHex {
              pkg = "excoveralls";
              version = "0.5.1";
              sha256 =
                "26c8bb6dadc8436c1e0155f50327e90c91d6efab88468c09ac10f12be7070324";
            };
            beamDeps  = [ hackney_1_4_8 exjsx_3_2_0 ];

            meta = {
              description = ''Coverage report tool for Elixir with coveralls.io
                            integration.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/excoveralls";
            };
          }
      ) {};

    excoveralls = excoveralls_0_5_1;

    exdatauri_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exdatauri";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exdatauri";
              version = "0.1.0";
              sha256 =
                "46d064019d4d785428226baafbc3f11fc8621838b0d633768f18182d2cf4a719";
            };

            meta = {
              description = ''A RFC 2397 URI parser for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/flupke/exdatauri";
            };
          }
      ) {};

    exdatauri = exdatauri_0_1_0;

    exddb_0_1_3 = callPackage
      (
        {  buildMix, fetchHex, erlcloud_0_9_2 }:
          buildMix {
            name = "exddb";
            version = "0.1.3";
            src = fetchHex {
              pkg = "exddb";
              version = "0.1.3";
              sha256 =
                "e57bd285110585476a457a843fdcff3cce6923c9472b6bec95ac9bf986dd27e4";
            };
            beamDeps  = [ erlcloud_0_9_2 ];

            meta = {
              description = ''Simple library for working with data in
                            DynamoDB.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/muhmi/exddb";
            };
          }
      ) {};

    exddb = exddb_0_1_3;

    exdesk_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "exdesk";
            version = "0.2.0";
            src = fetchHex {
              pkg = "exdesk";
              version = "0.2.0";
              sha256 =
                "0c1e02bb4aef9075ff4affb3354c0e318dc3be1817faae8b450ef590c7d67688";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Desk.com client library for elixir.'';

              homepage = "https://github.com/deadkarma/exdesk";
            };
          }
      ) {};

    exdesk = exdesk_0_2_0;

    exdisque_0_0_1 = callPackage
      (
        {  buildRebar3, fetchHex, eredis_1_0_8 }:
          buildRebar3 {
            name = "exdisque";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exdisque";
              version = "0.0.1";
              sha256 =
                "c3b7ec89217df46ae6cf1adadb81118877c66272266f0ee5e2c7ff45d048fb31";
            };

            beamDeps  = [ eredis_1_0_8 ];

            meta = {
              description = ''Elixir client library for Disque:
                            https://github.com/antirez/disque'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mosic/exdisque";
            };
          }
      ) {};

    exdisque = exdisque_0_0_1;

    exdjango_0_3_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          redix_0_3_4,
          poolboy_1_5_1,
          poison_1_0_3,
          plug_1_1_1,
          comeonin_2_1_1
        }:
          buildMix {
            name = "exdjango";
            version = "0.3.0";
            src = fetchHex {
              pkg = "exdjango";
              version = "0.3.0";
              sha256 =
                "62cf5e5870b28b4cdf25b0056897bb92ba3ed7b92d87c8083ebf820c35213ef6";
            };
            beamDeps  = [
                          redix_0_3_4
                          poolboy_1_5_1
                          poison_1_0_3
                          plug_1_1_1
                          comeonin_2_1_1
                        ];

            meta = {
              description = ''An elixir library for working with django'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nicksanders/exdjango";
            };
          }
      ) {};

    exdjango = exdjango_0_3_0;

    exdm_0_0_4 = callPackage
      (
        {  buildMix, fetchHex, exrm_0_19_9 }:
          buildMix {
            name = "exdm";
            version = "0.0.4";
            src = fetchHex {
              pkg = "exdm";
              version = "0.0.4";
              sha256 =
                "85e8fa483a760c46e19f0e8e0f53eb35ed74cc17f23c72d3002e47a847011e39";
            };
            beamDeps  = [ exrm_0_19_9 ];

            meta = {
              description = ''Deploy Elixir applications via mix tasks'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joeyates/exdm";
            };
          }
      ) {};

    exdm = exdm_0_0_4;

    exdn_2_1_2 = callPackage
      (
        {  buildMix, fetchHex, erldn_1_0_5, calendar_0_12_4 }:
          buildMix {
            name = "exdn";
            version = "2.1.2";
            src = fetchHex {
              pkg = "exdn";
              version = "2.1.2";
              sha256 =
                "a4414d397ccf0c86413ad18d307879f5c6c19183b430276cfb31a026dda1350c";
            };
            beamDeps  = [ erldn_1_0_5 calendar_0_12_4 ];

            meta = {
              longDescription = ''a two-way translator between Elixir data
                                structures and strings of data following the edn
                                specification.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/psfblair/exdn";
            };
          }
      ) {};

    exdn = exdn_2_1_2;

    exdweet_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_7_5 }:
          buildMix {
            name = "exdweet";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exdweet";
              version = "0.0.1";
              sha256 =
                "2b263d5d73c7af5bd824a02b56df671a609698a96ea78cb0660dbd753118f376";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_7_5 ];

            meta = {
              description = ''Elixir/Erlang Client for Dweet'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/amit-saxena/exdweet";
            };
          }
      ) {};

    exdweet = exdweet_0_0_1;

    exec_1_0_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "exec";
            version = "1.0.1";
            src = fetchHex {
              pkg = "exec";
              version = "1.0.1";
              sha256 =
                "87c7ef2dea2bb503bb0eec8cb34776172999aecc6e12d90f7629796a7a3ccb1f";
            };
            compilePorts = true;

            meta = {
              description = ''OS Process Manager'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/saleyn/erlexec";
            };
          }
      ) {};

    exec = exec_1_0_1;

    execjs_1_1_3 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2 }:
          buildMix {
            name = "execjs";
            version = "1.1.3";
            src = fetchHex {
              pkg = "execjs";
              version = "1.1.3";
              sha256 =
                "a0992d14ccc3458563be305d70fd6f6f6e9db6e8b62dd4e15bf69aeb382eb074";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''Run JavaScript code from Elixir'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/devinus/execjs";
            };
          }
      ) {};

    execjs = execjs_1_1_3;

    exelli_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exelli";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exelli";
              version = "0.1.0";
              sha256 =
                "9777493429d5b4e3f3a9391ede7706deba65b253aa0d810efa9e26859b6f269c";
            };

            meta = {
              longDescription = ''Elli wrapper in elixir, with some sugar
                                syntax. (even 2 times faster than Plug on
                                Cowboy) '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pigmej/exelli";
            };
          }
      ) {};

    exelli = exelli_0_1_0;

    exeque_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exeque";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exeque";
              version = "0.1.0";
              sha256 =
                "d860208c3a651c97cacd95e842e4dceffc84f518026c5737e93b46444f000dfa";
            };

            meta = {
              longDescription = ''Exeque allows you to queue up a list of
                                functions and specify how many workers should be
                                used to run those functions. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/duff/exeque";
            };
          }
      ) {};

    exeque = exeque_0_1_0;

    exexif_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exexif";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exexif";
              version = "0.0.1";
              sha256 =
                "48db21d8a77a9f922046ad6018266c0df32efb82331113ccb787e08fb7464a74";
            };

            meta = {
              longDescription = ''Read TIFF and EXIF information from a
                                JPEG-format image. 1. Retrieve data from a file:
                                iex> {:ok, info} =
                                Exexif.exif_from_jpeg_file(path) Retrieve data
                                from a binary containing the JPEG (you don`t
                                need the whole thing—the exif is near the
                                beginning of a JPEG, so 100k or so should do
                                fine). iex> {:ok, info} =
                                Exexif.exif_from_jpeg_buffer(buffer) 2. Access
                                the high level TIFF data: iex> info.x_resolution
                                72 iex> info.model "DSC-RX100M2" 3. The exif
                                data is in there, too. iex>
                                info.exif.color_space "sRGB" iex> info.exif |>
                                Dict.keys [:brightness_value, :color_space,
                                :component_configuration,
                                :compressed_bits_per_pixel, :contrast,
                                :custom_rendered, :datetime_original,
                                :datetime_tigitized, :digital_zoom_ratio,
                                :exif_image_height, :exif_image_width,
                                :exif_version, :exposure_bias_value,
                                :exposure_mode, :exposure_program,
                                :exposure_time, :f_number, :file_source, :flash,
                                :flash_pix_persion, :focal_length,
                                :focal_length_in_35mm_film, :iso_speed_ratings,
                                :lens_info, :light_source, :max_aperture_value,
                                :metering_mode, :recommended_exposure,
                                :saturation, :scene_capture_type, :scene_type,
                                :sensitivity_type, :sharpness, :white_balance]
                                '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/exexif";
            };
          }
      ) {};

    exexif = exexif_0_0_1;

    exfavicon_0_3_2 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, floki_0_7_1 }:
          buildMix {
            name = "exfavicon";
            version = "0.3.2";
            src = fetchHex {
              pkg = "exfavicon";
              version = "0.3.2";
              sha256 =
                "95503035ea2b6768c7d3fb8af9769830b9933b2579c7fdcfdd6b775e830213c2";
            };
            beamDeps  = [ httpoison_0_8_1 floki_0_7_1 ];

            meta = {
              description = ''A exfavicon to detect a site`s favicon.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/exfavicon";
            };
          }
      ) {};

    exfavicon = exfavicon_0_3_2;

    exfile_0_1_2 = callPackage
      (
        {
          buildMix,
          fetchHex,
          plug_1_0_3,
          phoenix_html_2_5_0,
          ecto_2_0_0_beta_0
        }:
          buildMix {
            name = "exfile";
            version = "0.1.2";
            src = fetchHex {
              pkg = "exfile";
              version = "0.1.2";
              sha256 =
                "bb0e2e1ef86017b3d6cbf6d6818abea153f194a50cc84f359146a348bcc61664";
            };
            beamDeps  = [ plug_1_0_3 phoenix_html_2_5_0 ecto_2_0_0_beta_0 ];

            meta = {
              longDescription = ''File upload handling in Elixir and Plug.
                                Supports pluggable processors and storage
                                backends.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keichan34/exfile";
            };
          }
      ) {};

    exfile = exfile_0_1_2;

    exfile_b2_0_1_0 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1, exfile_0_1_2
        }:
          buildMix {
            name = "exfile_b2";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exfile_b2";
              version = "0.1.0";
              sha256 =
                "62a58a3347387b00fdf666984b02b6b0c28fda0b60395eea08de3c7a21af61f5";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 exfile_0_1_2 ];

            meta = {
              description = ''A Backblaze B2 storage backend adapter for
                            Exfile.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keichan34/exfile-b2";
            };
          }
      ) {};

    exfile_b2 = exfile_b2_0_1_0;

    exfile_imagemagick_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, exfile_0_1_2 }:
          buildMix {
            name = "exfile_imagemagick";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exfile_imagemagick";
              version = "0.1.0";
              sha256 =
                "ab290f8a7e43678dc2289cf38558562cc433c59d1ddf8859525e22f5e4033c49";
            };
            beamDeps  = [ exfile_0_1_2 ];

            meta = {
              description = ''An ImageMagick file processor suite for
                            Exfile.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keichan34/exfile-imagemagick";
            };
          }
      ) {};

    exfile_imagemagick = exfile_imagemagick_0_1_0;

    exfile_memory_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, exfile_0_1_2 }:
          buildMix {
            name = "exfile_memory";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exfile_memory";
              version = "0.1.0";
              sha256 =
                "66330c408a73094d115227d0e16b936229721e16703197559a828bfb7795f9d7";
            };
            beamDeps  = [ exfile_0_1_2 ];

            meta = {
              description = ''In-memory (ets) storage backend for Exfile.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keichan34/exfile-memory";
            };
          }
      ) {};

    exfile_memory = exfile_memory_0_1_0;

    exfirebase_0_4_0 = callPackage
      (
        {  buildMix, fetchHex, httpotion_2_2_0, exjsx_3_2_0 }:
          buildMix {
            name = "exfirebase";
            version = "0.4.0";
            src = fetchHex {
              pkg = "exfirebase";
              version = "0.4.0";
              sha256 =
                "acd2f1fe87e83437a5d52b811b3e86bc75933bc29b0daa2da836a97ddd60b478";
            };
            beamDeps  = [ httpotion_2_2_0 exjsx_3_2_0 ];

            meta = {
              description = ''An elixir library for accessing the Firebase REST
                            API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/exfirebase";
            };
          }
      ) {};

    exfirebase = exfirebase_0_4_0;

    exfoaas_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_2_1_0, httpoison_0_8_1 }:
          buildMix {
            name = "exfoaas";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exfoaas";
              version = "0.0.1";
              sha256 =
                "ccfd3da421505d131a126d05d0def3ca99cdae6fec397956e4a5f1ee2bfae256";
            };
            beamDeps  = [ poison_2_1_0 httpoison_0_8_1 ];

            meta = {
              description = ''brings the utility of FOAAS to elixir.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/cryptobird/ExFOAAS.git";
            };
          }
      ) {};

    exfoaas = exfoaas_0_0_1;

    exfsm_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exfsm";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exfsm";
              version = "0.0.3";
              sha256 =
                "2da7b2b25f9603fc3142da3090abe85425f9852b89c230316fb6d29691ede6eb";
            };

            meta = {
              longDescription = ''Simple elixir library to define composable
                                FSM as function (not related at all with
                                `:gen_fsm`, no state/process management)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/exfsm";
            };
          }
      ) {};

    exfsm = exfsm_0_0_3;

    exfswatch_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, fs_0_9_2 }:
          buildMix {
            name = "exfswatch";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exfswatch";
              version = "0.1.1";
              sha256 =
                "b97d5e120dc9efbf31e182625e1382f09202cf66863161570221bb4e1bfa82a1";
            };
            beamDeps  = [ fs_0_9_2 ];

            meta = {
              description = ''A file change watcher wrapper based on
                            [fs](https://github.com/synrc/fs)'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/falood/exfswatch";
            };
          }
      ) {};

    exfswatch = exfswatch_0_1_1;

    exfuck_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exfuck";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exfuck";
              version = "0.1.0";
              sha256 =
                "c71358ae7a31682d84f89f7f5fdc1c6b545ea93f70391a9ec15987458d70dbe8";
            };

            meta = {
              description = ''Brainfuck interpreter written in elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shiroyasha/exfuck";
            };
          }
      ) {};

    exfuck = exfuck_0_1_0;

    exgenius_0_0_5 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, exjsx_3_2_0 }:
          buildMix {
            name = "exgenius";
            version = "0.0.5";
            src = fetchHex {
              pkg = "exgenius";
              version = "0.0.5";
              sha256 =
                "f0f4463ac9ad79a102a1bf0ded91d77ed87ce262da6045990be51450ef240fd5";
            };
            beamDeps  = [ httpoison_0_8_1 exjsx_3_2_0 ];

            meta = {
              longDescription = '' Elixir library for the (undocumented) Rap
                                Genius (and also Rock, Tech, Pop, Country, etc)
                                API '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffweiss/exgenius";
            };
          }
      ) {};

    exgenius = exgenius_0_0_5;

    exgpg_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, uuid_0_1_5, porcelain_2_0_1 }:
          buildMix {
            name = "exgpg";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exgpg";
              version = "0.0.3";
              sha256 =
                "13499da2a59567f87f5293cc874ab1256e88089784645d997406d8f95978319a";
            };
            beamDeps  = [ uuid_0_1_5 porcelain_2_0_1 ];

            meta = {    };
          }
      ) {};

    exgpg = exgpg_0_0_3;

    exgravatar_2_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exgravatar";
            version = "2.0.0";
            src = fetchHex {
              pkg = "exgravatar";
              version = "2.0.0";
              sha256 =
                "ddfcfc899f24fd98c811a6824964c85b5c87a60f41fe034380081680d5c8e765";
            };

            meta = {
              description = ''An Elixir module for generating Gravatar urls.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/exgravatar";
            };
          }
      ) {};

    exgravatar = exgravatar_2_0_0;

    exgrid_0_3_0 = callPackage
      (
        {
          buildMix, fetchHex, timex_0_13_5, json_0_3_3, httpotion_1_0_0
        }:
          buildMix {
            name = "exgrid";
            version = "0.3.0";
            src = fetchHex {
              pkg = "exgrid";
              version = "0.3.0";
              sha256 =
                "96676dfc20b2e8c7caf5f68c202eada246f192d3246922be7214a0da0d219506";
            };
            beamDeps  = [ timex_0_13_5 json_0_3_3 httpotion_1_0_0 ];

            meta = {
              description = ''Elixir bindings for SendGrid`s REST API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bradleyd/exgrid";
            };
          }
      ) {};

    exgrid = exgrid_0_3_0;

    exhal_4_0_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          uri_template_1_2_0,
          poison_2_1_0,
          httpoison_0_8_1
        }:
          buildMix {
            name = "exhal";
            version = "4.0.0";
            src = fetchHex {
              pkg = "exhal";
              version = "4.0.0";
              sha256 =
                "94a10116449d0c5dce43bddd0a96ed2dbefa032883841752a48129227ae4b426";
            };
            beamDeps  = [ uri_template_1_2_0 poison_2_1_0 httpoison_0_8_1 ];

            meta = {
              description = ''Use HAL APIs with ease'';
              license = stdenv.lib.licenses.free;
            };
          }
      ) {};

    exhal = exhal_4_0_0;

    exhcl_0_2_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exhcl";
            version = "0.2.1";
            src = fetchHex {
              pkg = "exhcl";
              version = "0.2.1";
              sha256 =
                "9c7ab6216cd978b2dd3f6573dd3ccf0a9d5055b36008a0ada01d9431198c17f7";
            };

            meta = {
              description = ''Configuration language inspired by HCL'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asakura/exhcl";
            };
          }
      ) {};

    exhcl = exhcl_0_2_1;

    exiban_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exiban";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exiban";
              version = "0.0.3";
              sha256 =
                "98c2656de7ce4c27090f482704e7e915d9046c0a3c4545d7ae4b68986de776a8";
            };

            meta = {
              description = ''Library for manipulating and validating IBAN
                            account numbers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kkempin/exiban";
            };
          }
      ) {};

    exiban = exiban_0_0_3;

    exirc_0_9_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exirc";
            version = "0.9.2";
            src = fetchHex {
              pkg = "exirc";
              version = "0.9.2";
              sha256 =
                "5b534e0a1bb3d54b57df9c8265d861e4dc3f3078c5483d7520b398458a1c6367";
            };

            meta = {
              description = ''An IRC client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/exirc";
            };
          }
      ) {};

    exirc = exirc_0_9_2;

    exjira_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, dotenv_0_0_4 }:
          buildMix {
            name = "exjira";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exjira";
              version = "0.0.1";
              sha256 =
                "da992f593939629300ddf90c0aafbcafb05c4c7e5f817c3a76dd7c0ac43f8575";
            };
            beamDeps  = [ poison_1_5_2 dotenv_0_0_4 ];

            meta = {
              description = ''JIRA client library for Elixir '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattweldon/exjira";
            };
          }
      ) {};

    exjira = exjira_0_0_1;

    exjprop_0_0_5 = callPackage
      (
        {
          buildMix,
          fetchHex,
          sweet_xml_0_6_1,
          httpoison_0_8_1,
          ex_aws_0_4_17
        }:
          buildMix {
            name = "exjprop";
            version = "0.0.5";
            src = fetchHex {
              pkg = "exjprop";
              version = "0.0.5";
              sha256 =
                "9fcc1e2e3e12f9f49b1b42cb97df917b5021933d962370dbe67557718a5adee0";
            };
            beamDeps  = [ sweet_xml_0_6_1 httpoison_0_8_1 ex_aws_0_4_17 ];

            meta = {
              description = ''Elixir library for reading Java properties files
                            from various sources'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stocks29/exjprop.git";
            };
          }
      ) {};

    exjprop = exjprop_0_0_5;

    exjson_0_5_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exjson";
            version = "0.5.0";
            src = fetchHex {
              pkg = "exjson";
              version = "0.5.0";
              sha256 =
                "749422adf4381c8089a910d0ca545282ff0bd506cd4e17a6a08f4f9e7799fa94";
            };

            meta = {
              description = ''A simple Elixir implementation of JSON with an
                            Erlang parser.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/guedes/exjson";
            };
          }
      ) {};

    exjson = exjson_0_5_0;

    exjsx_3_0_2 = callPackage
      (
        {  buildMix, fetchHex, jsx_2_4_0 }:
          buildMix {
            name = "exjsx";
            version = "3.0.2";
            src = fetchHex {
              pkg = "exjsx";
              version = "3.0.2";
              sha256 =
                "2cd67240a54e9cd2616bc83c0c352d47f87bccd2ec599eceedc00bcbe9063f07";
            };
            beamDeps  = [ jsx_2_4_0 ];

            meta = {
              description = ''json for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/exjsx";
            };
          }
      ) {};

    exjsx_3_1_0 = callPackage
      (
        {  buildMix, fetchHex, jsx_2_4_0 }:
          buildMix {
            name = "exjsx";
            version = "3.1.0";
            src = fetchHex {
              pkg = "exjsx";
              version = "3.1.0";
              sha256 =
                "588a0b67ed0c45b21f018515fc478efac83c088661bd588831e41c9073a818fb";
            };
            beamDeps  = [ jsx_2_4_0 ];

            meta = {
              description = ''json for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/exjsx";
            };
          }
      ) {};

    exjsx_3_2_0 = callPackage
      (
        {  buildMix, fetchHex, jsx_2_6_2 }:
          buildMix {
            name = "exjsx";
            version = "3.2.0";
            src = fetchHex {
              pkg = "exjsx";
              version = "3.2.0";
              sha256 =
                "9c8600822e894e3c31bed800c78a5a04812b71a6e5a5656426c6ce01ebe2cf1c";
            };
            beamDeps  = [ jsx_2_6_2 ];

            meta = {
              description = ''json for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/exjsx";
            };
          }
      ) {};

    exjsx = exjsx_3_2_0;

    exkad_0_0_2 = callPackage
      (
        {
          buildMix,
          fetchHex,
          socket_0_2_8,
          poison_1_2_1,
          plug_0_8_4,
          httpotion_1_0_0,
          cowboy_1_0_4
        }:
          buildMix {
            name = "exkad";
            version = "0.0.2";
            src = fetchHex {
              pkg = "exkad";
              version = "0.0.2";
              sha256 =
                "b12f4e48ed460521ae3b79895d1e8c43ed24df54260e5519e58708ff76468afb";
            };
            beamDeps  = [
                          socket_0_2_8
                          poison_1_2_1
                          plug_0_8_4
                          httpotion_1_0_0
                          cowboy_1_0_4
                        ];

            meta = {
              description = ''A simple kademlia implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/exkad";
            };
          }
      ) {};

    exkad = exkad_0_0_2;

    exkanji_0_2_5 = callPackage
      (
        {  buildMix, fetchHex, exromaji_0_2_8 }:
          buildMix {
            name = "exkanji";
            version = "0.2.5";
            src = fetchHex {
              pkg = "exkanji";
              version = "0.2.5";
              sha256 =
                "f88383523a4b01dbb534eb2f9f95b87cf75402b7a28962170e19919eb07f86a6";
            };
            beamDeps  = [ exromaji_0_2_8 ];

            meta = {
              longDescription = ''A Elixir library for translating between
                                hiragana, katakana, romaji and kanji. It uses
                                Mecab.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/exkanji";
            };
          }
      ) {};

    exkanji = exkanji_0_2_5;

    exkismet_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "exkismet";
            version = "0.0.2";
            src = fetchHex {
              pkg = "exkismet";
              version = "0.0.2";
              sha256 =
                "3648f010eb80891b0195f9ced0e02a5a08860a9d96e8f7bbe328c68f27b85b64";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''A client (completely unofficial) for the
                            Akismet.com comment-spam detection API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cameronp/exkismet";
            };
          }
      ) {};

    exkismet = exkismet_0_0_2;

    exldap_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exldap";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exldap";
              version = "0.1.1";
              sha256 =
                "5cade5ad64caaeb0e0d70fcd9567aa827e6f50cb375599e2887319c40807cc92";
            };

            meta = {
              description = ''A module for working with LDAP from Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jmerriweather/exldap";
            };
          }
      ) {};

    exldap = exldap_0_1_1;

    exleveldb_0_7_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exleveldb";
            version = "0.7.0";
            src = fetchHex {
              pkg = "exleveldb";
              version = "0.7.0";
              sha256 =
                "90ff2b76b58c889e60203951c1cf5072cf24fd1fad9faad3dce6c96bf34330fc";
            };

            meta = {
              longDescription = ''Exleveldb is a thin wrapper around Basho`s
                                eleveldb (github.com/basho/eleveldb). At the
                                moment, Exleveldb exposes functions for the
                                following features of LevelDB: - Opening a new
                                datastore. - Closing an open datastore. -
                                Getting values by key. - Storing individual
                                key-value pairs. - Deleting stored key-value
                                pairs. - Checking if a datastore is empty. -
                                Folding over key-value pairs in the datastore. -
                                Folding over keys in the datastore. - Batch
                                writes to the datastore (put or delete). -
                                Destroying a datastore. Additionally, the option
                                of streaming key-value pairs or keys from the
                                datastore has been added in v0.5.0. Note:
                                Because eleveldb is not a hex package, you will
                                need to include it as a separate dependency in
                                your project (See `README.md`).'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/skovsgaard/exleveldb.git";
            };
          }
      ) {};

    exleveldb = exleveldb_0_7_0;

    exlibris_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exlibris";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exlibris";
              version = "0.0.1";
              sha256 =
                "c6f957233b464eeddf590bad43368427ee9c715470e89d2f348d7d01935ad7be";
            };

            meta = {
              longDescription = ''A collection of random library functions I
                                use across multiple projects: pipe_while_ok:
                                Create pipelines that terminate early if any
                                step fails to return a tuple that starts {:ok,
                                ...} before_returning: Like Ruby`s returning, it
                                evaluates its first argument, then evalates the
                                do block. It always returns the value of its
                                first argument. '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/exlibris";
            };
          }
      ) {};

    exlibris = exlibris_0_0_1;

    exlingr_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exlingr";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exlingr";
              version = "0.0.1";
              sha256 =
                "b45acd0e10f719b88c943b3194b7fded6ece9874c7da2c1f18b2ce2425581701";
            };

            meta = {
              description = ''Lingr client library for elixir. '';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/mtwtkman/exlingr";
            };
          }
      ) {};

    exlingr = exlingr_0_0_1;

    exmatrix_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, benchfella_0_3_2 }:
          buildMix {
            name = "exmatrix";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exmatrix";
              version = "0.0.1";
              sha256 =
                "58fe316b1ee31f9394f246ec91a6a9157dfae0c38ea649a4c11f70976ca1d13b";
            };
            beamDeps  = [ benchfella_0_3_2 ];

            meta = {
              longDescription = ''ExMatrix is a small library for working with
                                matrices, originally developed for testing
                                matrix multiplication in parallel.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/a115/exmatrix";
            };
          }
      ) {};

    exmatrix = exmatrix_0_0_1;

    exmerl_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exmerl";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exmerl";
              version = "0.1.1";
              sha256 =
                "4bb5d6c1863c5e381b460416c9b517a211db9abd9abf0f32c99b07e128b842aa";
            };

            meta = {
              description = ''An Elixir wrapper for parsing XML through the
                            xmerl_* suite of modules '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pwoolcoc/exmerl";
            };
          }
      ) {};

    exmerl = exmerl_0_1_1;

    exmetrics_1_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exmetrics";
            version = "1.1.0";
            src = fetchHex {
              pkg = "exmetrics";
              version = "1.1.0";
              sha256 =
                "1f4645ca0e9ef9b1815c0b301ff2f9a5b5548bc45adb68386cb6529998513d1b";
            };

            meta = {
              longDescription = ''Exmetrics provides counters, gauges and
                                histograms for instrumenting an elixir
                                application.'';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    exmetrics = exmetrics_1_1_0;

    exml_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exml";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exml";
              version = "0.1.0";
              sha256 =
                "aeed2cc53cae303180fa18eb552241af32e7f05af94ac82de9b81d67b71dee78";
            };

            meta = {
              description = ''Most simple Elixir wrapper for xmerl xpath'';

            };
          }
      ) {};

    exml = exml_0_1_0;

    exmoji_0_2_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2 }:
          buildMix {
            name = "exmoji";
            version = "0.2.2";
            src = fetchHex {
              pkg = "exmoji";
              version = "0.2.2";
              sha256 =
                "d0123ec6fd14506da93b0e8fdb7c2efa819cc69addeb56a78f3c1e0b8a09d015";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''Emoji encoding swiss army knife for dealing with
                            Unicode and other gotchas.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mroth/exmoji";
            };
          }
      ) {};

    exmoji = exmoji_0_2_2;

    exns_0_3_1_beta = callPackage
      (
        {
          buildMix,
          fetchHex,
          uuid_1_1_3,
          poolboy_1_5_1,
          poison_1_5_2,
          msgpax_0_8_2
        }:
          buildMix {
            name = "exns";
            version = "0.3.1-beta";
            src = fetchHex {
              pkg = "exns";
              version = "0.3.1-beta";
              sha256 =
                "ac2042252d873f0449358628a83c49b80587017ed2962960bca0082809e74398";
            };
            beamDeps  = [ uuid_1_1_3 poolboy_1_5_1 poison_1_5_2 msgpax_0_8_2
                      ];

            meta = {
              longDescription = ''A library for writing clients to communicate
                                with Python nanoservices via nanomsg.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/walkr/exns";
            };
          }
      ) {};

    exns = exns_0_3_1_beta;

    exnumerable_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exnumerable";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exnumerable";
              version = "0.0.1";
              sha256 =
                "ea6041540da09b96176a37bdd71e3c6fbacb8353aca3b084deedb17cee265e2e";
            };

            meta = {
              description = ''Enumerable type definition in a simple way to be
                            used with any database.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/exnumerable";
            };
          }
      ) {};

    exnumerable = exnumerable_0_0_1;

    exnumerator_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exnumerator";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exnumerator";
              version = "1.0.0";
              sha256 =
                "7511385b408e6aa2f494444dac4fd8734b91456734adbc46f17c7185a504514a";
            };

            meta = {
              description = ''Enumerable type definition in a simple way to be
                            used with any database.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/exnumerator";
            };
          }
      ) {};

    exnumerator = exnumerator_1_0_0;

    exnumterator_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exnumterator";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exnumterator";
              version = "1.0.0";
              sha256 =
                "895b1dfff48d0459e66338ca8a8b831c2f31654fc0758a24e11a2f54a9cb1106";
            };

            meta = {
              description = ''Enumerable type definition in a simple way to be
                            used with any database.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/exnumterator";
            };
          }
      ) {};

    exnumterator = exnumterator_1_0_0;

    exoddic_1_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exoddic";
            version = "1.2.0";
            src = fetchHex {
              pkg = "exoddic";
              version = "1.2.0";
              sha256 =
                "84d79ad8365f9efb5de30afbe074d5360828b3780ff21dfd06d865a3d7773d2e";
            };

            meta = {
              description = ''Odds and probability handling and conversions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/exoddic";
            };
          }
      ) {};

    exoddic = exoddic_1_2_0;

    exometer_core_1_0_0 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          setup_1_7_0,
          parse_trans_2_9_0,
          lager_3_0_2,
          folsom_0_8_3
        }:
          buildRebar3 {
            name = "exometer_core";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exometer_core";
              version = "1.0.0";
              sha256 =
                "6fe43b22439dd89b7b307214cf18084d26fd82e024d8855bdecccf923f93d852";
            };

            beamDeps  = [
                          setup_1_7_0 parse_trans_2_9_0 lager_3_0_2 folsom_0_8_3
                        ];

            meta = {
              description = ''Code instrumentation and metrics collection
                            package.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/basho/exometer_core";
            };
          }
      ) {};

    exometer_core = exometer_core_1_0_0;

    exos_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exos";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exos";
              version = "1.0.0";
              sha256 =
                "3659fca730360d11d90db8ccb0206e978c838af48bc46ac096d47ea807b9d324";
            };

            meta = {
              longDescription = ''Create a GenServer in any language. Exos
                                contains a very simple GenServer which proxy
                                calls and casts to a given port command,
                                encoding and decoding the message to the port
                                using erlang external binary term format. (see
                                related projects : clojure|python|node_erlastic
                                on https://github.com/awetzel) '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/exos";
            };
          }
      ) {};

    exos = exos_1_0_0;

    expand_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "expand";
            version = "0.0.3";
            src = fetchHex {
              pkg = "expand";
              version = "0.0.3";
              sha256 =
                "5f2ce07ba074392100fc5f6b8e8af9ec728ce4716e592422c510997d543efa63";
            };

            meta = {
              description = ''A pretty printer'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joeyates/expand";
            };
          }
      ) {};

    expand = expand_0_0_3;

    exparticle_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "exparticle";
            version = "0.0.2";
            src = fetchHex {
              pkg = "exparticle";
              version = "0.0.2";
              sha256 =
                "ce70b77da48e84307791af00143ad4b9677d39765459865976d459d3b1bdcaf2";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''ExParticle is an elixir client to communicate
                            with Particle Cloud API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mtanzi/exparticle";
            };
          }
      ) {};

    exparticle = exparticle_0_0_2;

    expcap_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, timex_0_13_5 }:
          buildMix {
            name = "expcap";
            version = "0.1.0";
            src = fetchHex {
              pkg = "expcap";
              version = "0.1.0";
              sha256 =
                "d9d62f7cb7a3acfdb13668668c6cd4e317a125519a5b24830e4184474e8fe274";
            };
            beamDeps  = [ timex_0_13_5 ];

            meta = {
              longDescription = ''A PCAP library written in Elixir. This does
                                not wrap a C or Erlang PCAP library, rather it
                                attempts to be an idiomatic Elixir library. This
                                library parses pcap files, however it does not
                                yet support most protocols that can be contained
                                within a pcap file. The only supported protocols
                                at the moment are: * Ethernet * IPv4 * UDP * DNS
                                '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cobenian/expcap";
            };
          }
      ) {};

    expcap = expcap_0_1_0;

    experiment_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "experiment";
            version = "0.0.3";
            src = fetchHex {
              pkg = "experiment";
              version = "0.0.3";
              sha256 =
                "5acb6c232aff08719f97254ca27ed1eb165c3f2d229e03cda85e4d31ad7b3156";
            };

            meta = {
              description = ''Experiment is a library for carefully refactoring
                            critical paths in production.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrewvy/experiment";
            };
          }
      ) {};

    experiment = experiment_0_0_3;

    expinboard_0_0_1 = callPackage
      (
        {
          buildMix, fetchHex, ibrowse_4_2_2, httpotion_2_1_0, exjsx_3_2_0
        }:
          buildMix {
            name = "expinboard";
            version = "0.0.1";
            src = fetchHex {
              pkg = "expinboard";
              version = "0.0.1";
              sha256 =
                "3ff152d837293c0f53ead6cba4180ced55308d2869faa698e459abbe23d59bdc";
            };
            beamDeps  = [ ibrowse_4_2_2 httpotion_2_1_0 exjsx_3_2_0 ];

            meta = {
              description = ''A simple elixir pinboard client.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/thilko/expinboard";
            };
          }
      ) {};

    expinboard = expinboard_0_0_1;

    expletive_0_1_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "expletive";
            version = "0.1.4";
            src = fetchHex {
              pkg = "expletive";
              version = "0.1.4";
              sha256 =
                "dfb9ac919526bcb7f28b5acadad634b7e9d220203874ef124a87264a078f24b4";
            };

            meta = {
              description = ''Profanity detection and sanitization library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xavier/expletive";
            };
          }
      ) {};

    expletive = expletive_0_1_4;

    expool_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "expool";
            version = "0.1.0";
            src = fetchHex {
              pkg = "expool";
              version = "0.1.0";
              sha256 =
                "dfb6e81957a94080f33e8469c497102a36831d7fba4a902d895c3f82f5232060";
            };

            meta = {
              description = ''Simple process pooling and task submission'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/expool";
            };
          }
      ) {};

    expool = expool_0_1_0;

    expr_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "expr";
            version = "0.1.0";
            src = fetchHex {
              pkg = "expr";
              version = "0.1.0";
              sha256 =
                "5076c73cb6beaafeab5fab4731170c29dca5581eec44df3be363660a872abb97";
            };

            meta = {
              description = ''An Elixir library for parsing and evaluating
                            mathematical expressions '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Rob-bie/Expr";
            };
          }
      ) {};

    expr = expr_0_1_0;

    exprintf_0_1_6 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exprintf";
            version = "0.1.6";
            src = fetchHex {
              pkg = "exprintf";
              version = "0.1.6";
              sha256 =
                "7acb31f93cef83effd3aa1f0572f9e29d7d1b4f50a6d456e2830fa7594c16182";
            };

            meta = {
              description = ''A printf / sprintf library for Elixir. It works
                            as a wrapper for :io.format. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/exprintf";
            };
          }
      ) {};

    exprintf = exprintf_0_1_6;

    exprof_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, exprintf_0_1_6 }:
          buildMix {
            name = "exprof";
            version = "0.2.0";
            src = fetchHex {
              pkg = "exprof";
              version = "0.2.0";
              sha256 =
                "2b3b8c623873172a6c7ba1707981f51feea6b6edbabd5347752030803ad0c954";
            };
            beamDeps  = [ exprintf_0_1_6 ];

            meta = {
              description = ''A simple code profiler for Elixir using eprof.
                            '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/exprof";
            };
          }
      ) {};

    exprof = exprof_0_2_0;

    exprotobuf_0_10_2 = callPackage
      (
        {  buildMix, fetchHex, gpb_3_18_10 }:
          buildMix {
            name = "exprotobuf";
            version = "0.10.2";
            src = fetchHex {
              pkg = "exprotobuf";
              version = "0.10.2";
              sha256 =
                "dc71af3a83a51376de72de160123408cd38adfed2ad2f419465b4d1e3f87d244";
            };
            beamDeps  = [ gpb_3_18_10 ];

            meta = {
              longDescription = ''exprotobuf provides native encoding/decoding
                                of protobuf messages via generated
                                modules/structs.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/bitwalker/exprotobuf";
            };
          }
      ) {};

    exprotobuf_0_13_0 = callPackage
      (
        {  buildMix, fetchHex, gpb_3_18_10 }:
          buildMix {
            name = "exprotobuf";
            version = "0.13.0";
            src = fetchHex {
              pkg = "exprotobuf";
              version = "0.13.0";
              sha256 =
                "25921ae192f22eca89d543134a7b12bd2db617bb77992f1d4957b8b28bccbc8e";
            };
            beamDeps  = [ gpb_3_18_10 ];

            meta = {
              longDescription = ''exprotobuf provides native encoding/decoding
                                of protobuf messages via generated
                                modules/structs.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/bitwalker/exprotobuf";
            };
          }
      ) {};

    exprotobuf_1_0_0_rc1 = callPackage
      (
        {  buildMix, fetchHex, gpb_3_18_10 }:
          buildMix {
            name = "exprotobuf";
            version = "1.0.0-rc1";
            src = fetchHex {
              pkg = "exprotobuf";
              version = "1.0.0-rc1";
              sha256 =
                "e4cbf0bc2672e0d9fa3afe5acac8617a4e94443256d5fc19e5e7721681dd3eff";
            };
            beamDeps  = [ gpb_3_18_10 ];

            meta = {
              longDescription = ''exprotobuf provides native encoding/decoding
                                of protobuf messages via generated
                                modules/structs.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/bitwalker/exprotobuf";
            };
          }
      ) {};

    exprotobuf = exprotobuf_1_0_0_rc1;

    exq_0_6_4 = callPackage
      (
        {
          buildMix,
          fetchHex,
          uuid_1_1_3,
          timex_1_0_1,
          redix_0_3_4,
          poison_2_1_0
        }:
          buildMix {
            name = "exq";
            version = "0.6.4";
            src = fetchHex {
              pkg = "exq";
              version = "0.6.4";
              sha256 =
                "24b75a33da51ea3f3561a127237dbefa5b82d2ff478eb9591314644d89bc8c95";
            };
            beamDeps  = [ uuid_1_1_3 timex_1_0_1 redix_0_3_4 poison_2_1_0 ];

            meta = {
              longDescription = ''Exq is a job processing library compatible
                                with Resque / Sidekiq for the Elixir
                                language.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/akira/exq";
            };
          }
      ) {};

    exq = exq_0_6_4;

    exq_ui_0_6_4 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, exq_0_6_4, cowboy_1_0_4 }:
          buildMix {
            name = "exq_ui";
            version = "0.6.4";
            src = fetchHex {
              pkg = "exq_ui";
              version = "0.6.4";
              sha256 =
                "6072838b9161e8b036466dd8fb21ea99fd93beb2488d76f3d6561211eac36b71";
            };
            beamDeps  = [ plug_1_1_1 exq_0_6_4 cowboy_1_0_4 ];

            meta = {
              longDescription = ''Exq UI is the UI component for Exq, a job
                                processing library. Exq UI provides the UI
                                dashboard to display stats on job processing.'';

              homepage = "https://github.com/akira/exq";
            };
          }
      ) {};

    exq_ui = exq_ui_0_6_4;

    exql_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, tds_0_5_4 }:
          buildMix {
            name = "exql";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exql";
              version = "0.0.3";
              sha256 =
                "0dea2cd0f6cb1ba6c1cd4298716131fafb4271f2c076df0dd6e73e37cecb4705";
            };
            beamDeps  = [ tds_0_5_4 ];

            meta = {
              description = ''A functional query tool for MSSQL.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattweldon/exql";
            };
          }
      ) {};

    exql = exql_0_0_3;

    exquery_0_0_11 = callPackage
      (
        {  buildRebar3, fetchHex, ex_doc_0_11_4, earmark_0_1_19 }:
          buildRebar3 {
            name = "exquery";
            version = "0.0.11";
            src = fetchHex {
              pkg = "exquery";
              version = "0.0.11";
              sha256 =
                "61b520599fa33dc8c97be32f41c8fe4a6eb9d8b98b72a72cb88185868692a0c1";
            };

            beamDeps  = [ ex_doc_0_11_4 earmark_0_1_19 ];

            meta = {
              longDescription = '' A library for parsing HTML and querying
                                elements within. Handy for web scraping or
                                autmated testing. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/exquery";
            };
          }
      ) {};

    exquery = exquery_0_0_11;

    exquisite_0_1_6 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exquisite";
            version = "0.1.6";
            src = fetchHex {
              pkg = "exquisite";
              version = "0.1.6";
              sha256 =
                "8bd974eea0ef20d841f999818e4b6f0edd8e52b6723e8c5b2c4ba7a22fa07c7a";
            };

            meta = {
              description = ''DSL to match_spec'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/exquisite";
            };
          }
      ) {};

    exquisite = exquisite_0_1_6;

    exrabbit_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exrabbit";
            version = "0.0.2";
            src = fetchHex {
              pkg = "exrabbit";
              version = "0.0.2";
              sha256 =
                "8dda89e78a8918eddcf28200e4474127151a8e20a2b54447b817732344b4e55a";
            };

            meta = {
              description = ''RabbitMQ bindings and DSL for Elixir'';

              homepage = "https://github.com/d0rc/exrabbit";
            };
          }
      ) {};

    exrabbit = exrabbit_0_0_2;

    exrecaptcha_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, httpotion_1_0_0 }:
          buildMix {
            name = "exrecaptcha";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exrecaptcha";
              version = "0.0.3";
              sha256 =
                "2df1a9e868d3adc31a657755df04fabc9c9e7d12f56cbcc86b27f670dcd962b5";
            };
            beamDeps  = [ httpotion_1_0_0 ];

            meta = {
              longDescription = ''Simple ReCaptcha display/verify code for
                                Elixir applications. Designed to be used with a
                                CMS such as Phoenix. '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/adanselm/exrecaptcha";
            };
          }
      ) {};

    exrecaptcha = exrecaptcha_0_0_3;

    exredis_0_2_3 = callPackage
      (
        {  buildMix, fetchHex, eredis_1_0_8 }:
          buildMix {
            name = "exredis";
            version = "0.2.3";
            src = fetchHex {
              pkg = "exredis";
              version = "0.2.3";
              sha256 =
                "0d5a48cd27ec6200c3ffa5442d7dc615d7dbfe94a500d1240b9c0c9205ec4e56";
            };
            beamDeps  = [ eredis_1_0_8 ];

            meta = {
              description = ''Redis client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/exredis";
            };
          }
      ) {};

    exredis = exredis_0_2_3;

    exrethinkdb_0_0_3 = callPackage
      (
        {  buildRebar3, fetchHex, poison_1_4_0 }:
          buildRebar3 {
            name = "exrethinkdb";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exrethinkdb";
              version = "0.0.3";
              sha256 =
                "c48a25a613de9f4c8ffe490044e448f01d816e0f6806af018494c3a19890ed1a";
            };

            beamDeps  = [ poison_1_4_0 ];

            meta = {
              description = ''RethinkDB driver for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hamiltop/exrethinkdb";
            };
          }
      ) {};

    exrethinkdb = exrethinkdb_0_0_3;

    exrm_0_15_1 = callPackage
      (
        {  buildMix, fetchHex, conform_0_13_0 }:
          buildMix {
            name = "exrm";
            version = "0.15.1";
            src = fetchHex {
              pkg = "exrm";
              version = "0.15.1";
              sha256 =
                "ed2227e8b189af4deca0f1b637fdfe9514b817128f6c2b007ccb05c65d49f132";
            };
            beamDeps  = [ conform_0_13_0 ];

            meta = {
              longDescription = ''Exrm, or Elixir Release Manager, provides mix
                                tasks for building, upgrading, and controlling
                                release packages for your application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/exrm";
            };
          }
      ) {};

    exrm_0_18_8 = callPackage
      (
        {  buildMix, fetchHex, relx_3_3_1, conform_0_16_0 }:
          buildMix {
            name = "exrm";
            version = "0.18.8";
            src = fetchHex {
              pkg = "exrm";
              version = "0.18.8";
              sha256 =
                "a8aa031d824f882a762404bc19b6fbe6c10703941097a6ef8bb93a62cc987e22";
            };
            beamDeps  = [ relx_3_3_1 conform_0_16_0 ];

            meta = {
              longDescription = ''Exrm, or Elixir Release Manager, provides mix
                                tasks for building, upgrading, and controlling
                                release packages for your application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/exrm";
            };
          }
      ) {};

    exrm_0_19_9 = callPackage
      (
        {  buildMix, fetchHex, relx_3_5_0, conform_1_0_0_rc8 }:
          buildMix {
            name = "exrm";
            version = "0.19.9";
            src = fetchHex {
              pkg = "exrm";
              version = "0.19.9";
              sha256 =
                "3107dcac0727f7e986ef36604e13943759a52188fbee630d72b1b3adb4594941";
            };
            beamDeps  = [ relx_3_5_0 conform_1_0_0_rc8 ];

            meta = {
              longDescription = ''Exrm, or Elixir Release Manager, provides mix
                                tasks for building, upgrading, and controlling
                                release packages for your application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/exrm";
            };
          }
      ) {};

    exrm_1_0_0_rc8 = callPackage
      (
        {  buildMix, fetchHex, relx_3_17_0 }:
          buildMix {
            name = "exrm";
            version = "1.0.0-rc8";
            src = fetchHex {
              pkg = "exrm";
              version = "1.0.0-rc8";
              sha256 =
                "f4bc906713eb57e9ac7c4bf16aa218cbb437b3392f2183eb3057e8f6921fa8fa";
            };
            beamDeps  = [ relx_3_17_0 ];

            meta = {
              longDescription = ''Exrm, or Elixir Release Manager, provides mix
                                tasks for building, upgrading, and controlling
                                release packages for your application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/exrm";
            };
          }
      ) {};

    exrm = exrm_1_0_0_rc8;

    exrm_heroku_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, exrm_1_0_0_rc8 }:
          buildMix {
            name = "exrm_heroku";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exrm_heroku";
              version = "0.1.1";
              sha256 =
                "19fc16f1cfcc1c86bc64796a287028b8a8d951f7737024893c1772ba658da76d";
            };
            beamDeps  = [ exrm_1_0_0_rc8 ];

            meta = {
              description = ''Publish Elixir releases created with exrm release
                            manager to Heroku. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ride/exrm-heroku";
            };
          }
      ) {};

    exrm_heroku = exrm_heroku_0_1_1;

    exrm_rpm_0_3_0 = callPackage
      (
        {  buildMix, fetchHex, exrm_0_15_1 }:
          buildMix {
            name = "exrm_rpm";
            version = "0.3.0";
            src = fetchHex {
              pkg = "exrm_rpm";
              version = "0.3.0";
              sha256 =
                "28c2339fac5073d615fb4a52816dd4fc56c9da2db9e71846b0affdf171643044";
            };
            beamDeps  = [ exrm_0_15_1 ];

            meta = {
              longDescription = ''Adds simple Red Hat Package Manager (RPM)
                                generation to the exrm package manager. The
                                generated RPM file includes the Elixir release
                                and an init.d script to manage the project`s
                                service. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smpallen99/exrm-rpm";
            };
          }
      ) {};

    exrm_rpm = exrm_rpm_0_3_0;

    exromaji_0_2_8 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exromaji";
            version = "0.2.8";
            src = fetchHex {
              pkg = "exromaji";
              version = "0.2.8";
              sha256 =
                "c402dc57b246ba09a93612e2ac715e013d063eada3f1a88bfe89ad59ecff23db";
            };

            meta = {
              description = ''A Elixir library for translating between
                            hiragana, katakana, and romaji.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/exromaji";
            };
          }
      ) {};

    exromaji = exromaji_0_2_8;

    exrun_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exrun";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exrun";
              version = "0.1.1";
              sha256 =
                "d61b90c23ba37c9b44b379d6094ef8411522d17d94d33b786e1dc5bfac09bfc0";
            };

            meta = {
              longDescription = ''Elixir - save and easy to use, tracing tools
                                for running elixir and erlang applications'';

              homepage = "https://github.com/liveforeverx/exrun";
            };
          }
      ) {};

    exrun = exrun_0_1_1;

    exsamples_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exsamples";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exsamples";
              version = "0.1.0";
              sha256 =
                "92acafe7e8a5d6b1c1b5ca937b9dab887f9a4474cfd6510a7117690a6c6da86d";
            };

            meta = {
              longDescription = ''Initializes lists of maps, structs or keyword
                                lists using tabular data in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/msaraiva/exsamples";
            };
          }
      ) {};

    exsamples = exsamples_0_1_0;

    exscript_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exscript";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exscript";
              version = "0.0.1";
              sha256 =
                "56360c7f6063df2088deb0ec7683dee90c4bfede861ef85b81fa94cc0abe302b";
            };

            meta = {
              description = ''Escript generator '';

              homepage = "https://github.com/liveforeverx/exscript";
            };
          }
      ) {};

    exscript = exscript_0_0_1;

    exseed_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, ecto_2_0_0_beta_0 }:
          buildMix {
            name = "exseed";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exseed";
              version = "0.0.3";
              sha256 =
                "d5f42ed419c9f1d5d179dc93fdf6a58344b07055764498f222f07f95cb82dd98";
            };
            beamDeps  = [ ecto_2_0_0_beta_0 ];

            meta = {
              description = ''A library that provides a simple DSL for seeding
                            databases through Ecto.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seaneshbaugh/exseed";
            };
          }
      ) {};

    exseed = exseed_0_0_3;

    exsentry_0_2_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          uuid_1_1_3,
          timex_1_0_1,
          poison_1_5_2,
          plug_1_1_1,
          ibrowse_4_2_2,
          httpotion_2_2_0,
          fuzzyurl_0_8_1
        }:
          buildMix {
            name = "exsentry";
            version = "0.2.1";
            src = fetchHex {
              pkg = "exsentry";
              version = "0.2.1";
              sha256 =
                "3feebb7a00f9fac19c989214bf15131d540e1e88c27286c46b3083c4f85972fb";
            };
            beamDeps  = [
                          uuid_1_1_3
                          timex_1_0_1
                          poison_1_5_2
                          plug_1_1_1
                          ibrowse_4_2_2
                          httpotion_2_2_0
                          fuzzyurl_0_8_1
                        ];

            meta = {
              description = ''ExSentry is a client for the Sentry error
                            reporting platform.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/appcues/exsentry";
            };
          }
      ) {};

    exsentry = exsentry_0_2_1;

    exstatic_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "exstatic";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exstatic";
              version = "0.1.0";
              sha256 =
                "e063b91c0b2995e4a1a2c1aa56cdd578374320a8755844cc6471b58fa3874d0d";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              longDescription = ''Serve static files from memory in the Phoenix
                                Framework. This extension compiles all of a
                                project`s static assets (e.g. Javascript, HTML,
                                images, etc) into Erlang modules and loads them
                                into the Erlang VM, with the purpose of serving
                                them fast and without a dependency on a
                                filesystem.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arjan/exstatic";
            };
          }
      ) {};

    exstatic = exstatic_0_1_0;

    exstatsd_0_1_5 = callPackage
      (
        {  buildMix, fetchHex, exactor_2_2_0 }:
          buildMix {
            name = "exstatsd";
            version = "0.1.5";
            src = fetchHex {
              pkg = "exstatsd";
              version = "0.1.5";
              sha256 =
                "4fcad707df57fdb91338dae212355704924bea8db10207715b95e3c110e7b219";
            };
            beamDeps  = [ exactor_2_2_0 ];

            meta = {
              description = ''An Elixir ports client for StatsD'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/upbit/ExStatsD";
            };
          }
      ) {};

    exstatsd = exstatsd_0_1_5;

    exsync_0_1_2 = callPackage
      (
        {  buildMix, fetchHex, exfswatch_0_1_1 }:
          buildMix {
            name = "exsync";
            version = "0.1.2";
            src = fetchHex {
              pkg = "exsync";
              version = "0.1.2";
              sha256 =
                "21a1106d5e62ced84a567bde2acbdff73ddf06d2a78fbd80ffa488fae4bde48b";
            };
            beamDeps  = [ exfswatch_0_1_1 ];

            meta = {
              description = ''Yet another Elixir reloader.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/falood/exsync";
            };
          }
      ) {};

    exsync = exsync_0_1_2;

    exsyslog_1_0_1 = callPackage
      (
        {  buildMix, fetchHex, syslog_1_0_2, poison_1_5_2 }:
          buildMix {
            name = "exsyslog";
            version = "1.0.1";
            src = fetchHex {
              pkg = "exsyslog";
              version = "1.0.1";
              sha256 =
                "a3972cf2c70bcf8fedcd702109ed6a2213d1905c6eabb0e42e600b34bc9f0fbe";
            };
            beamDeps  = [ syslog_1_0_2 poison_1_5_2 ];

            meta = {
              description = ''ExSyslog is a Elixir Logger custom backend to
                            syslog.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/22cans/exsyslog";
            };
          }
      ) {};

    exsyslog = exsyslog_1_0_1;

    extreme_0_4_3 = callPackage
      (
        {
          buildMix,
          fetchHex,
          uuid_1_1_3,
          poison_1_5_2,
          httpoison_0_8_1,
          exprotobuf_0_10_2
        }:
          buildMix {
            name = "extreme";
            version = "0.4.3";
            src = fetchHex {
              pkg = "extreme";
              version = "0.4.3";
              sha256 =
                "db08580b4b839be7bf3f6198efc7de02c22a3688f46ce32deca983db74f1e330";
            };
            beamDeps  = [
                          uuid_1_1_3
                          poison_1_5_2
                          httpoison_0_8_1
                          exprotobuf_0_10_2
                        ];

            meta = {
              description = ''Elixir TCP adapter for EventStore.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exponentially/extreme";
            };
          }
      ) {};

    extreme = extreme_0_4_3;

    extripe_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, poison_2_1_0, httpoison_0_8_1 }:
          buildMix {
            name = "extripe";
            version = "0.2.0";
            src = fetchHex {
              pkg = "extripe";
              version = "0.2.0";
              sha256 =
                "70cccdf79565d34ab4df68d89e22cfe574b2fe64b631303c496e27f83e798491";
            };
            beamDeps  = [ poison_2_1_0 httpoison_0_8_1 ];

            meta = {
              description = ''Stripe API wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/princemaple/extripe";
            };
          }
      ) {};

    extripe = extripe_0_2_0;

    exts_0_2_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exts";
            version = "0.2.2";
            src = fetchHex {
              pkg = "exts";
              version = "0.2.2";
              sha256 =
                "0c3fa7e429912a4af48dd94975535e6db0557297d675b9d9105645d05d3a3089";
            };

            meta = {
              description = ''ets wrapper for Elixir'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/exts";
            };
          }
      ) {};

    exts = exts_0_2_2;

    extwitter_0_6_2 = callPackage
      (
        {  buildMix, fetchHex, timex_1_0_1, poison_1_5_2 }:
          buildMix {
            name = "extwitter";
            version = "0.6.2";
            src = fetchHex {
              pkg = "extwitter";
              version = "0.6.2";
              sha256 =
                "dd5ea2b6c9f99e167024b3ec6fb97f4803f39521229771ae001f7b44ed572f76";
            };
            beamDeps  = [ timex_1_0_1 poison_1_5_2 ];

            meta = {
              description = ''Twitter client library for elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/extwitter";
            };
          }
      ) {};

    extwitter = extwitter_0_6_2;

    exurban_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, jazz_0_2_1, httpoison_0_7_5 }:
          buildMix {
            name = "exurban";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exurban";
              version = "0.0.1";
              sha256 =
                "612b3136b144edfbad658acca6961a3c9a1afe5d343acacb5ce5b358a67bd797";
            };
            beamDeps  = [ jazz_0_2_1 httpoison_0_7_5 ];

            meta = {
              description = ''Elixir wrapper for UrbanAirship API.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/tappsi/exurban";
            };
          }
      ) {};

    exurban = exurban_0_0_1;

    exvcr_0_3_9 = callPackage
      (
        {
          buildMix,
          fetchHex,
          meck_0_8_4,
          httpotion_1_0_0,
          httpoison_0_8_1,
          exjsx_3_2_0,
          exactor_2_2_0
        }:
          buildMix {
            name = "exvcr";
            version = "0.3.9";
            src = fetchHex {
              pkg = "exvcr";
              version = "0.3.9";
              sha256 =
                "25645f6598111ba76ed30b4a2079169ae1aed0795ef87bf74d70a3a7ca8f2112";
            };
            beamDeps  = [
                          meck_0_8_4
                          httpotion_1_0_0
                          httpoison_0_8_1
                          exjsx_3_2_0
                          exactor_2_2_0
                        ];

            meta = {
              description = ''HTTP request/response recording library for
                            elixir, inspired by VCR.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/exvcr";
            };
          }
      ) {};

    exvcr_0_7_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          meck_0_8_4,
          httpotion_2_2_0,
          httpoison_0_8_1,
          exjsx_3_2_0,
          exactor_2_2_0
        }:
          buildMix {
            name = "exvcr";
            version = "0.7.1";
            src = fetchHex {
              pkg = "exvcr";
              version = "0.7.1";
              sha256 =
                "e894995695be15a546c1acf09d87967b078e0f6bc0a2be540d226c8ae40b161d";
            };
            beamDeps  = [
                          meck_0_8_4
                          httpotion_2_2_0
                          httpoison_0_8_1
                          exjsx_3_2_0
                          exactor_2_2_0
                        ];

            meta = {
              description = ''HTTP request/response recording library for
                            elixir, inspired by VCR.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/exvcr";
            };
          }
      ) {};

    exvcr = exvcr_0_7_1;

    exyelp_0_0_2 = callPackage
      (
        {
          buildMix, fetchHex, poison_2_1_0, oauther_1_0_2, httpoison_0_8_1
        }:
          buildMix {
            name = "exyelp";
            version = "0.0.2";
            src = fetchHex {
              pkg = "exyelp";
              version = "0.0.2";
              sha256 =
                "1be8553ea0369a092eac1b6a0b47652b7c0570911483aa3ca454bef05ddd4d5d";
            };
            beamDeps  = [ poison_2_1_0 oauther_1_0_2 httpoison_0_8_1 ];

            meta = {
              description = ''An Elixir Yelp API client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gaslight/exyelp";
            };
          }
      ) {};

    exyelp = exyelp_0_0_2;

    exyz_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "exyz";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exyz";
              version = "1.0.0";
              sha256 =
                "b1d53964ca72f70dd71c91327bf912858619d0357a53765ed3a08671e6769ef5";
            };

            meta = {
              description = ''Z-combinator in elixir: recursive anonymous
                            functions.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Dkendal/exyz";
            };
          }
      ) {};

    exyz = exyz_1_0_0;

    eye_drops_1_1_0 = callPackage
      (
        {  buildMix, fetchHex, fs_0_9_2 }:
          buildMix {
            name = "eye_drops";
            version = "1.1.0";
            src = fetchHex {
              pkg = "eye_drops";
              version = "1.1.0";
              sha256 =
                "e1ed246cd35d0b58798fdec5cca8066d9251cc37251f298e531d8163dbc11332";
            };
            beamDeps  = [ fs_0_9_2 ];

            meta = {
              longDescription = ''A configurable mix task to watch file changes
                                Watch file changes in a project and run the
                                corresponding command when a change happens.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rkotze/eye_drops";
            };
          }
      ) {};

    eye_drops = eye_drops_1_1_0;

    ezcryptex_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, cryptex_0_0_1 }:
          buildMix {
            name = "ezcryptex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ezcryptex";
              version = "0.0.1";
              sha256 =
                "0c1c295cf5500106f7288949021ccbdc0d3a9276c2ae9938e45254b7500017b5";
            };
            beamDeps  = [ cryptex_0_0_1 ];

            meta = {
              longDescription = ''Thin layer on top of Cryptex for more easily
                                encrypting/decrypting, signing/verifying data in
                                elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stocks29/ezcryptex";
            };
          }
      ) {};

    ezcryptex = ezcryptex_0_0_1;

    ezlib_1_0_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "ezlib";
            version = "1.0.1";
            src = fetchHex {
              pkg = "ezlib";
              version = "1.0.1";
              sha256 =
                "fea58a6ab557888dbfc91a8d20c55755614c123277a57dea2e91711c630465e1";
            };
            compilePorts = true;

            meta = {
              description = ''Native zlib driver for Erlang / Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/ezlib";
            };
          }
      ) {};

    ezlib = ezlib_1_0_1;

    ezmq_0_2_0 = callPackage
      (
        {  buildRebar3, fetchHex, lager_3_0_1, gen_listener_tcp_0_3_2 }:
          buildRebar3 {
            name = "ezmq";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ezmq";
              version = "0.2.0";
              sha256 =
                "bc804ffded0b0d0f684d4313ad3fa676479df962c584daaf5aa14ada5b86a52b";
            };

            beamDeps  = [ lager_3_0_1 gen_listener_tcp_0_3_2 ];

            meta = {
              description = ''Native Erlang 0MQ implementation'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/zeromq/ezmq";
            };
          }
      ) {};

    ezmq = ezmq_0_2_0;

    facebook_0_4_1 = callPackage
      (
        {
          buildMix, fetchHex, libex_config_0_2_0, json_0_3_3, hackney_1_4_8
        }:
          buildMix {
            name = "facebook";
            version = "0.4.1";
            src = fetchHex {
              pkg = "facebook";
              version = "0.4.1";
              sha256 =
                "f5583fe383f8a2b421f91ddbc9beccc9626527e96ec3502c723cc99e1c47e863";
            };
            beamDeps  = [ libex_config_0_2_0 json_0_3_3 hackney_1_4_8 ];

            meta = {
              longDescription = ''Facebook Graph API Wrapper written in Elixir.
                                Please note, this is very much a work in
                                progress. Feel free to contribute using pull
                                requests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mweibel/facebook.ex";
            };
          }
      ) {};

    facebook = facebook_0_4_1;

    factory_girl_elixir_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "factory_girl_elixir";
            version = "0.1.1";
            src = fetchHex {
              pkg = "factory_girl_elixir";
              version = "0.1.1";
              sha256 =
                "2e07de9813089c6e6a45f0584eb2bfd28d3acbf654073b9e2ed6d0fd531b8f7e";
            };

            meta = {
              description = ''Minimal implementation of Ruby`s factory_girl in
                            Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sinetris/factory_girl_elixir";
            };
          }
      ) {};

    factory_girl_elixir = factory_girl_elixir_0_1_1;

    faker_0_6_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "faker";
            version = "0.6.0";
            src = fetchHex {
              pkg = "faker";
              version = "0.6.0";
              sha256 =
                "4f305a9ec9a2645bf4777dda1b56643d04333b7ff601145bf4b80acca030c2a0";
            };

            meta = {
              description = ''Faker is a pure Elixir library for generating
                            fake data.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/igas/faker";
            };
          }
      ) {};

    faker = faker_0_6_0;

    fast_tls_1_0_1 = callPackage
      (
        {  buildRebar3, fetchHex, p1_utils_1_0_3 }:
          buildRebar3 {
            name = "fast_tls";
            version = "1.0.1";
            src = fetchHex {
              pkg = "fast_tls";
              version = "1.0.1";
              sha256 =
                "479d1e53a14b749b96581df7320440da1ff56df9dde91d327b3ecc1bc60fcb0d";
            };
            compilePorts = true;
            beamDeps  = [ p1_utils_1_0_3 ];

            meta = {
              description = ''TLS / SSL OpenSSL-based native driver for Erlang
                            / Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/fast_tls";
            };
          }
      ) {};

    fast_tls = fast_tls_1_0_1;

    fast_xml_1_1_3 = callPackage
      (
        {  buildRebar3, fetchHex, p1_utils_1_0_3 }:
          buildRebar3 {
            name = "fast_xml";
            version = "1.1.3";
            src = fetchHex {
              pkg = "fast_xml";
              version = "1.1.3";
              sha256 =
                "ea1abe9cdfa0df67178378ba5ec11e746023b66bc1ed0f980ae69d2aa1f732c3";
            };
            compilePorts = true;
            beamDeps  = [ p1_utils_1_0_3 ];

            meta = {
              description = ''Fast Expat-based Erlang / Elixir XML parsing
                            library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/fast_xml";
            };
          }
      ) {};

    fast_xml = fast_xml_1_1_3;

    fast_yaml_1_0_2 = callPackage
      (
        {  buildRebar3, fetchHex, p1_utils_1_0_3 }:
          buildRebar3 {
            name = "fast_yaml";
            version = "1.0.2";
            src = fetchHex {
              pkg = "fast_yaml";
              version = "1.0.2";
              sha256 =
                "2f2034d6003425b02619ba15658665134cfd81e3d1c9379c268f802a5775086d";
            };
            compilePorts = true;
            beamDeps  = [ p1_utils_1_0_3 ];

            meta = {
              description = ''Fast YAML native library for Erlang / Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/fast_yaml";
            };
          }
      ) {};

    fast_yaml = fast_yaml_1_0_2;

    favicon_0_0_7 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_7_5, floki_0_7_1 }:
          buildMix {
            name = "favicon";
            version = "0.0.7";
            src = fetchHex {
              pkg = "favicon";
              version = "0.0.7";
              sha256 =
                "b9a577d3d22a6e51843eb334b87de512f48a548d7a7edf56e178e0dde420ba0e";
            };
            beamDeps  = [ httpoison_0_7_5 floki_0_7_1 ];

            meta = {
              description = ''A library that fetches the favicon url for a
                            specified url'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ricn/favicon";
            };
          }
      ) {};

    favicon = favicon_0_0_7;

    fdg_0_0_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "fdg";
            version = "0.0.4";
            src = fetchHex {
              pkg = "fdg";
              version = "0.0.4";
              sha256 =
                "a5ec0f8214e52c63186e620a3556a3d61c6fa9118bf4a6b84b67ff236b8a98da";
            };

            meta = {
              longDescription = ''This project aims to be a simple library with
                                which to build force directed graphs. Ideally,
                                FDG will be used to produce visualiations of
                                networks and static analysis of code.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnhamelink/elixir-fdg";
            };
          }
      ) {};

    fdg = fdg_0_0_4;

    feeder_1_4_7 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "feeder";
            version = "1.4.7";
            src = fetchHex {
              pkg = "feeder";
              version = "1.4.7";
              sha256 =
                "1ac4696d0801c5e433caedeb38001341a9e22120998dcb0ee6d358266260c3da";
            };

            meta = {
              description = ''Stream parse RSS and Atom formatted XML feeds.
                            '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/michaelnisi/feeder";
            };
          }
      ) {};

    feeder_2_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "feeder";
            version = "2.0.0";
            src = fetchHex {
              pkg = "feeder";
              version = "2.0.0";
              sha256 =
                "9780c5f032d3480cf7d9fd71d3f0c5f73211e0d3a8d9cdabcb1327b3a4ff758e";
            };

            meta = {
              description = ''Stream parse RSS and Atom formatted XML feeds.
                            '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/michaelnisi/feeder";
            };
          }
      ) {};

    feeder = feeder_2_0_0;

    feeder_ex_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, feeder_1_4_7 }:
          buildMix {
            name = "feeder_ex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "feeder_ex";
              version = "0.0.2";
              sha256 =
                "0816c5c2757098d02727dcba55dfb8b4ecff66736d0f74d4bd36ffe93f033c31";
            };
            beamDeps  = [ feeder_1_4_7 ];

            meta = {
              description = ''RSS feed parser. Simple wrapper for feeder.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/manukall/feeder_ex";
            };
          }
      ) {};

    feeder_ex = feeder_ex_0_0_2;

    feedistiller_2_0_2 = callPackage
      (
        {
          buildMix,
          fetchHex,
          timex_0_19_5,
          httpoison_0_7_5,
          feeder_2_0_0,
          alambic_0_1_0
        }:
          buildMix {
            name = "feedistiller";
            version = "2.0.2";
            src = fetchHex {
              pkg = "feedistiller";
              version = "2.0.2";
              sha256 =
                "453244b3a41fbde7e13ccd675928f41f155799c218b47cbead9e67066efc8276";
            };
            beamDeps  = [
                          timex_0_19_5
                          httpoison_0_7_5
                          feeder_2_0_0
                          alambic_0_1_0
                        ];

            meta = {
              description = ''Download RSS/Atom feeds enclosures.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sdanzan/feedistiller";
            };
          }
      ) {};

    feedistiller = feedistiller_2_0_2;

    feedlex_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_3_1, httpoison_0_8_1 }:
          buildMix {
            name = "feedlex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "feedlex";
              version = "0.0.1";
              sha256 =
                "1f20033824f816d6904837601c14bdffcf1a56a53b8ed7d7916a67e48e53b4a5";
            };
            beamDeps  = [ poison_1_3_1 httpoison_0_8_1 ];

            meta = {
              longDescription = ''Feedly RSS reader client for Elixir
                                (elixir-lang). Partial but functional
                                implementation. For now it covers the following
                                Feedly APIs: * authentication; * feed; * stream;
                                * subscription.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/essenciary/feedlex";
            };
          }
      ) {};

    feedlex = feedlex_0_0_1;

    feedme_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, timex_0_19_5 }:
          buildMix {
            name = "feedme";
            version = "0.0.1";
            src = fetchHex {
              pkg = "feedme";
              version = "0.0.1";
              sha256 =
                "021621981bbb03b317e4a948a39d269ab1a2dc6d9ec6ee1c744e565000da680d";
            };
            beamDeps  = [ timex_0_19_5 ];

            meta = {
              description = ''Elixir RSS/Atom parser built on erlang`s xmerl
                            xml parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/umurgdk/elixir-feedme";
            };
          }
      ) {};

    feedme = feedme_0_0_1;

    feedparser_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "feedparser";
            version = "0.0.3";
            src = fetchHex {
              pkg = "feedparser";
              version = "0.0.3";
              sha256 =
                "ef19d82d5d0db4ca10e1a83c8eefe82678538cdeb143e707bf7ef738177c3eeb";
            };

            meta = {
              description = ''Discover and parse RSS and Atom feeds'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/l3kn/Elixir-Feedparser";
            };
          }
      ) {};

    feedparser = feedparser_0_0_3;

    fernet_ecto_0_0_4 = callPackage
      (
        {  buildMix, fetchHex, ecto_1_1_3 }:
          buildMix {
            name = "fernet_ecto";
            version = "0.0.4";
            src = fetchHex {
              pkg = "fernet_ecto";
              version = "0.0.4";
              sha256 =
                "22a9ab7a7fd1347620ba5dd9e128eae1e97d6403b0ee90a289580c2cb386e1c0";
            };
            beamDeps  = [ ecto_1_1_3 ];

            meta = {
              description = ''Fernet-encrypted fields for Ecto'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jkakar/fernet-ecto";
            };
          }
      ) {};

    fernet_ecto = fernet_ecto_0_0_4;

    fernetex_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, timex_0_19_5, json_0_3_3 }:
          buildMix {
            name = "fernetex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "fernetex";
              version = "0.0.1";
              sha256 =
                "0e386a7d783329a2742398e987b0584ca448b22b27ccfc857eab1b0752178714";
            };
            beamDeps  = [ timex_0_19_5 json_0_3_3 ];

            meta = {
              description = ''Elixir implementation of Fernet library based on
                            https://github.com/fernet/spec'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kennyp/fernetex";
            };
          }
      ) {};

    fernetex = fernetex_0_0_1;

    fifo_dt_0_1_66 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          riak_dt_2_1_1,
          libsnarlmatch_0_1_7,
          lager_2_1_1,
          jsxd_0_1_10,
          jsx_1_4_5,
          fifo_utils_0_1_20
        }:
          buildRebar3 {
            name = "fifo_dt";
            version = "0.1.66";
            src = fetchHex {
              pkg = "fifo_dt";
              version = "0.1.66";
              sha256 =
                "a72df25753a0dad32b22b02356f2979b8e3556f0333449f476d581332f02da6b";
            };

            beamDeps  = [
                          riak_dt_2_1_1
                          libsnarlmatch_0_1_7
                          lager_2_1_1
                          jsxd_0_1_10
                          jsx_1_4_5
                          fifo_utils_0_1_20
                        ];

            meta = {
              description = ''FiFo datatype collection'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/fifo_dt";
            };
          }
      ) {};

    fifo_dt = fifo_dt_0_1_66;

    fifo_lager_0_1_3 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          lager_logstash_backend_0_1_0,
          lager_graylog_0_1_0,
          lager_3_0_2
        }:
          buildRebar3 {
            name = "fifo_lager";
            version = "0.1.3";
            src = fetchHex {
              pkg = "fifo_lager";
              version = "0.1.3";
              sha256 =
                "89904ffcaaec1e92329d01d18805b26a71683b2ea646bbe8ed4f73de92ce267e";
            };

            beamDeps  = [
                          lager_logstash_backend_0_1_0
                          lager_graylog_0_1_0
                          lager_3_0_2
                        ];

            meta = {
              description = ''Lager config and dependencies'';

            };
          }
      ) {};

    fifo_lager = fifo_lager_0_1_3;

    fifo_s3_0_1_16 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          poolboy_1_5_1,
          lager_3_0_2,
          erlcloud_0_13_0,
          base16_1_0_0
        }:
          buildRebar3 {
            name = "fifo_s3";
            version = "0.1.16";
            src = fetchHex {
              pkg = "fifo_s3";
              version = "0.1.16";
              sha256 =
                "14a3601a7586d37ae5fd8996db45d0f7a7ef82c0bc1adaefa36cd881997ed32f";
            };

            beamDeps  = [
                          poolboy_1_5_1 lager_3_0_2 erlcloud_0_13_0 base16_1_0_0
                        ];

            meta = {
              description = ''S3 storange client library for erlang'';

            };
          }
      ) {};

    fifo_s3 = fifo_s3_0_1_16;

    fifo_spec_0_1_27 = callPackage
      (
        {  buildRebar3, fetchHex, fifo_dt_0_1_66 }:
          buildRebar3 {
            name = "fifo_spec";
            version = "0.1.27";
            src = fetchHex {
              pkg = "fifo_spec";
              version = "0.1.27";
              sha256 =
                "2ef9662a7423da74b7f4517e9470e44e03383c1116ee6da3944021ff3cd44ef6";
            };

            beamDeps  = [ fifo_dt_0_1_66 ];

            meta = {
              description = ''Specs for FiFo APIs'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/fifo_spec";
            };
          }
      ) {};

    fifo_spec = fifo_spec_0_1_27;

    fifo_utils_0_1_20 = callPackage
      (
        {  buildRebar3, fetchHex, uuid_erl_1_5_1, lager_2_1_1 }:
          buildRebar3 {
            name = "fifo_utils";
            version = "0.1.20";
            src = fetchHex {
              pkg = "fifo_utils";
              version = "0.1.20";
              sha256 =
                "01ec5ae5e8a8c3d8e9dc658de1c00818ac807195b4a5c47f98aa2c9af4d54663";
            };

            beamDeps  = [ uuid_erl_1_5_1 lager_2_1_1 ];

            meta = {
              description = ''FiFo utility library'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/fifo_utils";
            };
          }
      ) {};

    fifo_utils_0_1_21 = callPackage
      (
        {  buildRebar3, fetchHex, uuid_erl_1_5_1, lager_2_1_1 }:
          buildRebar3 {
            name = "fifo_utils";
            version = "0.1.21";
            src = fetchHex {
              pkg = "fifo_utils";
              version = "0.1.21";
              sha256 =
                "8a9298fd7486f56b74b4ffc1d6a3ff3713ffde44b248371f7f673a9bd76add60";
            };

            beamDeps  = [ uuid_erl_1_5_1 lager_2_1_1 ];

            meta = {
              description = ''FiFo utility library'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/fifo_utils";
            };
          }
      ) {};

    fifo_utils = fifo_utils_0_1_21;

    figaro_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "figaro";
            version = "0.1.0";
            src = fetchHex {
              pkg = "figaro";
              version = "0.1.0";
              sha256 =
                "3342018ab0135211b85d00f34567ca3a2d6d66289840c9eb0096ec97fad8a201";
            };

            meta = {
              description = ''Simple Elixir project configuration'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/trestrantham/ex_figaro";
            };
          }
      ) {};

    figaro = figaro_0_1_0;

    figaro_elixir_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "figaro_elixir";
            version = "1.0.0";
            src = fetchHex {
              pkg = "figaro_elixir";
              version = "1.0.0";
              sha256 =
                "98a7690c60fc32874e73b025b7deb5887d7cdff4556178af1849bde38a7ba104";
            };

            meta = {
              description = ''Environmental variables manager and configuration
                            management tool.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/figaro-elixir";
            };
          }
      ) {};

    figaro_elixir = figaro_elixir_1_0_0;

    filepreviews_1_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_4_0, httpoison_0_7_5 }:
          buildMix {
            name = "filepreviews";
            version = "1.0.1";
            src = fetchHex {
              pkg = "filepreviews";
              version = "1.0.1";
              sha256 =
                "bdb67cd960dd98a4a1d6d0d4944721bf98a506dbfb2b361ca473dbaf40cc9470";
            };
            beamDeps  = [ poison_1_4_0 httpoison_0_7_5 ];

            meta = {
              description = ''FilePreviews.io API client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/GetBlimp/filepreviews-elixir";
            };
          }
      ) {};

    filepreviews = filepreviews_1_0_1;

    filtrex_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, timex_0_19_5 }:
          buildMix {
            name = "filtrex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "filtrex";
              version = "0.1.0";
              sha256 =
                "475187169e70534b3ba2db6f47656538deb2ff447744e4112cc1008414162e9c";
            };
            beamDeps  = [ timex_0_19_5 ];

            meta = {
              longDescription = ''A library for performing and validating
                                complex filters from a client (e.g. smart
                                filters)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rcdilorenzo/filtrex";
            };
          }
      ) {};

    filtrex = filtrex_0_1_0;

    finance_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, timex_1_0_1 }:
          buildMix {
            name = "finance";
            version = "0.0.1";
            src = fetchHex {
              pkg = "finance";
              version = "0.0.1";
              sha256 =
                "fe08fc521e65605d54fd8b68fbdfdbd233b408e8330cf8038337214b553c2c17";
            };
            beamDeps  = [ timex_1_0_1 ];

            meta = {
              longDescription = ''A library to calculate Xirr through the
                                bisection method using parallel processes.'';

            };
          }
      ) {};

    finance = finance_0_0_1;

    finch_0_0_3 = callPackage
      (
        {
          buildMix,
          fetchHex,
          postgrex_0_6_0,
          phoenix_0_4_1,
          ecto_0_2_4,
          cowboy_1_0_4
        }:
          buildMix {
            name = "finch";
            version = "0.0.3";
            src = fetchHex {
              pkg = "finch";
              version = "0.0.3";
              sha256 =
                "48168045693af14b28263a5c121794dfcfb6da9eb33cc7a7eca93899668a2032";
            };
            beamDeps  = [
                          postgrex_0_6_0 phoenix_0_4_1 ecto_0_2_4 cowboy_1_0_4
                        ];

            meta = {
              longDescription = '' Resource layer for Phoenix and Ecto projects
                                for auto-generated RESTful CRUD APIs. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/finch";
            };
          }
      ) {};

    finch = finch_0_0_3;

    finicity_0_0_4 = callPackage
      (
        {
          buildMix,
          fetchHex,
          xml_builder_0_0_8,
          httpotion_2_1_0,
          floki_0_7_1
        }:
          buildMix {
            name = "finicity";
            version = "0.0.4";
            src = fetchHex {
              pkg = "finicity";
              version = "0.0.4";
              sha256 =
                "bed2444d52366a7e6f49bafff0d985c04540ef298922273df11efebe9c1e8387";
            };
            beamDeps  = [ xml_builder_0_0_8 httpotion_2_1_0 floki_0_7_1 ];

            meta = {
              description = ''Client library for Finicity.'';

            };
          }
      ) {};

    finicity = finicity_0_0_4;

    fireworks_0_5_1 = callPackage
      (
        {  buildMix, fetchHex, poolboy_1_5_1, amqp_0_1_4 }:
          buildMix {
            name = "fireworks";
            version = "0.5.1";
            src = fetchHex {
              pkg = "fireworks";
              version = "0.5.1";
              sha256 =
                "33beceafc10537c975b571617dfc5c000a8232c112c1383f52b9e6a12437f9ca";
            };
            beamDeps  = [ poolboy_1_5_1 amqp_0_1_4 ];

            meta = {
              description = ''Simple elixir work queue consumption for
                            RabbitMQ'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mobileoverlord/fireworks";
            };
          }
      ) {};

    fireworks = fireworks_0_5_1;

    firmata_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "firmata";
            version = "0.0.1";
            src = fetchHex {
              pkg = "firmata";
              version = "0.0.1";
              sha256 =
                "c3f928839c32e366389b3f9d34cfc73505952f854dd13c52eff56b9e5853ea6c";
            };

            meta = {
              longDescription = ''This package implements the Firmata protocol.
                                Firmata is a MIDI-based protocol for
                                communicating with microcontrollers.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/kfatehi/firmata";
            };
          }
      ) {};

    firmata = firmata_0_0_1;

    fitbit_0_0_1 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1, hackney_1_4_8
        }:
          buildMix {
            name = "fitbit";
            version = "0.0.1";
            src = fetchHex {
              pkg = "fitbit";
              version = "0.0.1";
              sha256 =
                "dc09d3b6d37ea67d21a52a704bd52357daa223e18afe4831515730452b3ada25";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 hackney_1_4_8 ];

            meta = {
              description = ''A Fitbit Library for Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/trestrantham/fitbit";
            };
          }
      ) {};

    fitbit = fitbit_0_0_1;

    fitex_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "fitex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "fitex";
              version = "0.0.1";
              sha256 =
                "5918d784a419fa1367606b6bc01b202febc3762b5b624e5829db636415041fcb";
            };

            meta = {
              description = ''FitEx is a Macro-Module which provides a bit of
                            sugar for function definitions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Puddah/FitEx";
            };
          }
      ) {};

    fitex = fitex_0_0_1;

    fixby_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "fixby";
            version = "0.0.1";
            src = fetchHex {
              pkg = "fixby";
              version = "0.0.1";
              sha256 =
                "e361bb9324c616e397fc78bda81a3629a39189f4675aefdeb54e85dfa74a629f";
            };

            meta = {
              description = ''FIXBY comments that raise after a given version
                            of Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CoderDennis/fixby-elixir";
            };
          }
      ) {};

    fixby = fixby_0_0_1;

    fixme_0_0_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "fixme";
            version = "0.0.4";
            src = fetchHex {
              pkg = "fixme";
              version = "0.0.4";
              sha256 =
                "e5e36db0c083a96a459723d89c151fc1f33f9873122e6c4924e06d18d20f9e84";
            };

            meta = {
              description = ''FIXME comments that raise after a certain point
                            in time.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/henrik/fixme-elixir";
            };
          }
      ) {};

    fixme = fixme_0_0_4;

    flasked_0_3_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "flasked";
            version = "0.3.0";
            src = fetchHex {
              pkg = "flasked";
              version = "0.3.0";
              sha256 =
                "371368ec9586939343fad0196f6dc3492bb4e56309490271d29bf46beede9210";
            };

            meta = {
              longDescription = ''Flasked injects application environment
                                configuration at runtime based on given ENV
                                variables and a mapping. This is pretty useful
                                for applications following the 12factor app
                                principle or which are deployed in
                                containerization infrastructures like Docker.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/flasked";
            };
          }
      ) {};

    flasked = flasked_0_3_0;

    fleet_api_0_0_15 = callPackage
      (
        {  buildMix, fetchHex, poison_1_3_1, httpoison_0_7_1 }:
          buildMix {
            name = "fleet_api";
            version = "0.0.15";
            src = fetchHex {
              pkg = "fleet_api";
              version = "0.0.15";
              sha256 =
                "8aa8206a91129dab3b2a11ffd16b131ef1e37ceff633ed818616e96c8dca7957";
            };
            beamDeps  = [ poison_1_3_1 httpoison_0_7_1 ];

            meta = {
              longDescription = ''A simple wrapper for the Fleet API. Can be
                                used with etcd tokens or via direct node
                                URLs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jordan0day/fleet-api.git";
            };
          }
      ) {};

    fleet_api = fleet_api_0_0_15;

    flock_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "flock";
            version = "0.0.1";
            src = fetchHex {
              pkg = "flock";
              version = "0.0.1";
              sha256 =
                "3a533d32a450cb0e5b78880c421080fb34fb95d4cf3c1ee053b4e97c6cadd4c8";
            };

            meta = {
              description = ''Distributed Services '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrismccord/flock";
            };
          }
      ) {};

    flock = flock_0_0_1;

    floki_0_0_5 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "floki";
            version = "0.0.5";
            src = fetchHex {
              pkg = "floki";
              version = "0.0.5";
              sha256 =
                "05044b8dade147bc0390300eefe48c3118eb61d94a57bd73966549a24c76e795";
            };

            meta = {
              description = ''Floki is a simple HTML parser that enables search
                            for nodes using CSS selectors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/floki";
            };
          }
      ) {};

    floki_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, mochiweb_2_12_2 }:
          buildMix {
            name = "floki";
            version = "0.1.1";
            src = fetchHex {
              pkg = "floki";
              version = "0.1.1";
              sha256 =
                "b608415520f6701acdbbffed86b62291b00ce695f7f3b067919594534c9858a9";
            };
            beamDeps  = [ mochiweb_2_12_2 ];

            meta = {
              description = ''Floki is a simple HTML parser that enables search
                            for nodes using CSS selectors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/floki";
            };
          }
      ) {};

    floki_0_7_1 = callPackage
      (
        {  buildMix, fetchHex, mochiweb_2_12_2 }:
          buildMix {
            name = "floki";
            version = "0.7.1";
            src = fetchHex {
              pkg = "floki";
              version = "0.7.1";
              sha256 =
                "f4d9df7ffbfeed170dc81d9c6309e47fe3d51c6247b42a2341d8675d3ff653b1";
            };
            beamDeps  = [ mochiweb_2_12_2 ];

            meta = {
              description = ''Floki is a simple HTML parser that enables search
                            for nodes using CSS selectors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/floki";
            };
          }
      ) {};

    floki = floki_0_7_1;

    floorplan_0_1_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          xml_builder_0_0_8,
          tzdata_0_1_8,
          timex_1_0_1,
          postgrex_0_11_1,
          poison_1_5_2,
          httpotion_2_1_0
        }:
          buildMix {
            name = "floorplan";
            version = "0.1.1";
            src = fetchHex {
              pkg = "floorplan";
              version = "0.1.1";
              sha256 =
                "56679e586efa7ae179a940920ef2b4d56e40b9b1d01cb4ce8528ef6870a77b00";
            };
            beamDeps  = [
                          xml_builder_0_0_8
                          tzdata_0_1_8
                          timex_1_0_1
                          postgrex_0_11_1
                          poison_1_5_2
                          httpotion_2_1_0
                        ];

            meta = {
              description = ''A module for generating sitemaps from a variety
                            of data sources'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/househappy/floorplan";
            };
          }
      ) {};

    floorplan = floorplan_0_1_1;

    flower_power_0_2_0 = callPackage
      (
        {
          buildMix, fetchHex, timex_1_0_1, poison_1_5_2, httpoison_0_7_5
        }:
          buildMix {
            name = "flower_power";
            version = "0.2.0";
            src = fetchHex {
              pkg = "flower_power";
              version = "0.2.0";
              sha256 =
                "1ade69e578fd65dd2d10b8097846411f1a5d0a42ad55e9faa532c65bbaf59bbb";
            };
            beamDeps  = [ timex_1_0_1 poison_1_5_2 httpoison_0_7_5 ];

            meta = {
              description = ''Api client for flower power cloud api'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Korbin73/FlowerPower";
            };
          }
      ) {};

    flower_power = flower_power_0_2_0;

    fluent_client_0_1_0 = callPackage
      (
        {
          buildMix, fetchHex, socket_0_2_8, poison_1_3_1, msgpax_0_7_0
        }:
          buildMix {
            name = "fluent_client";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fluent_client";
              version = "0.1.0";
              sha256 =
                "df1d05da9475938422a734cd311564eef44bfebea3c37b06ab167368875c2d15";
            };
            beamDeps  = [ socket_0_2_8 poison_1_3_1 msgpax_0_7_0 ];

            meta = {
              description = ''fluentd client library'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/trustatom-oss/elixir-fluent-client";
            };
          }
      ) {};

    fluent_client = fluent_client_0_1_0;

    fn_1_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "fn";
            version = "1.0.0";
            src = fetchHex {
              pkg = "fn";
              version = "1.0.0";
              sha256 =
                "1433b353c8739bb28ac0d6826c9f6a05033f158e8c8195faf01a863668b3bbc7";
            };

            meta = {
              description = ''More functional Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/fn";
            };
          }
      ) {};

    fn = fn_1_0_0;

    fnv_0_2_1 = callPackage
      (
        {  buildMix, fetchHex, hexate_0_5_1 }:
          buildMix {
            name = "fnv";
            version = "0.2.1";
            src = fetchHex {
              pkg = "fnv";
              version = "0.2.1";
              sha256 =
                "4f64367d63f0f40fd6bd1618164df41173c76517b10ce96d8358ccc01e1cb2a4";
            };
            beamDeps  = [ hexate_0_5_1 ];

            meta = {
              description = ''Pure Elixir implementation of Fowler–Noll–Vo
                            hash functions (FNV-1/FNV-1a)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/fnv.ex";
            };
          }
      ) {};

    fnv = fnv_0_2_1;

    folsom_0_8_3 = callPackage
      (
        {  buildRebar3, fetchHex, bear_0_8_3 }:
          buildRebar3 {
            name = "folsom";
            version = "0.8.3";
            src = fetchHex {
              pkg = "folsom";
              version = "0.8.3";
              sha256 =
                "afaa1ea4cd2a10a32242ac5d76fa7b17e98d202883859136b791d9a383b26820";
            };

            beamDeps  = [ bear_0_8_3 ];

            meta = {
              description = ''Erlang based metrics system'';

            };
          }
      ) {};

    folsom = folsom_0_8_3;

    folsom_ddb_0_1_20 = callPackage
      (
        {  buildRebar3, fetchHex, ddb_client_0_1_17 }:
          buildRebar3 {
            name = "folsom_ddb";
            version = "0.1.20";
            src = fetchHex {
              pkg = "folsom_ddb";
              version = "0.1.20";
              sha256 =
                "9103ab70b048bf35618daf85b314d815e66c23e7100a71b07dcbec18e75d02d1";
            };

            beamDeps  = [ ddb_client_0_1_17 ];

            meta = {
              description = ''DalmatinerDB backend to store folsom metrics'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/folsom_ddb";
            };
          }
      ) {};

    folsom_ddb = folsom_ddb_0_1_20;

    folsomite_1_2_8 = callPackage
      (
        {  buildRebar3, fetchHex, folsom_0_8_3 }:
          buildRebar3 {
            name = "folsomite";
            version = "1.2.8";
            src = fetchHex {
              pkg = "folsomite";
              version = "1.2.8";
              sha256 =
                "9ce64603cdffb8ad55e950142146b3fe05533020906a81aa9c2f524635d813dc";
            };

            beamDeps  = [ folsom_0_8_3 ];

            meta = {
              description = ''Blow up your Graphite server with Folsom
                            metrics'';

            };
          }
      ) {};

    folsomite = folsomite_1_2_8;

    font_awesome_phoenix_0_3_2 = callPackage
      (
        {  buildMix, fetchHex, phoenix_html_2_5_0 }:
          buildMix {
            name = "font_awesome_phoenix";
            version = "0.3.2";
            src = fetchHex {
              pkg = "font_awesome_phoenix";
              version = "0.3.2";
              sha256 =
                "826dd9e0400351cb539ccced605455d8da25490fd37a75085eb68fa133e65f34";
            };
            beamDeps  = [ phoenix_html_2_5_0 ];

            meta = {
              description = ''HTML helper functions to build Font Awesome icon
                            tags.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/code-lever/font-awesome-phoenix";
            };
          }
      ) {};

    font_awesome_phoenix = font_awesome_phoenix_0_3_2;

    forcex_0_1_0 = callPackage
      (
        {
          buildMix, fetchHex, timex_1_0_0_rc4, httpoison_0_8_1, exjsx_3_2_0
        }:
          buildMix {
            name = "forcex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "forcex";
              version = "0.1.0";
              sha256 =
                "3f7c4ddffaa0bfb0408b0148e14e344d7c42349923894ab44b56513c05c14c08";
            };
            beamDeps  = [ timex_1_0_0_rc4 httpoison_0_8_1 exjsx_3_2_0 ];

            meta = {
              description = ''Elixir library for the Force.com / SalesForce /
                            SFDC REST API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffweiss/forcex";
            };
          }
      ) {};

    forcex = forcex_0_1_0;

    forecast_io_0_2_1 = callPackage
      (
        {  buildMix, fetchHex, json_0_3_3, httpotion_1_0_0 }:
          buildMix {
            name = "forecast_io";
            version = "0.2.1";
            src = fetchHex {
              pkg = "forecast_io";
              version = "0.2.1";
              sha256 =
                "e109212dcd55c7d94bf9d85c1d6ee6687d35eb065335df13fc105fc242506c09";
            };
            beamDeps  = [ json_0_3_3 httpotion_1_0_0 ];

            meta = {
              description = ''Simple wrapper for Forecast.IO API '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/r-icarus/forecast_io";
            };
          }
      ) {};

    forecast_io = forecast_io_0_2_1;

    form_data_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "form_data";
            version = "0.1.1";
            src = fetchHex {
              pkg = "form_data";
              version = "0.1.1";
              sha256 =
                "0fdc822ba56e8bb9cd945c79105572a50144f16d096a95ca4ac9fe2d754862dc";
            };

            meta = {
              description = ''Build a multipart/form-data form struct in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jinze/form_data";
            };
          }
      ) {};

    form_data = form_data_0_1_1;

    forms_0_0_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "forms";
            version = "0.0.1";
            src = fetchHex {
              pkg = "forms";
              version = "0.0.1";
              sha256 =
                "530f63ed8ed5a171f744fc75bd69cb2e36496899d19dbef48101b4636b795868";
            };

            meta = {
              description = ''Toolbox that simplifies working with Erlang`s
                            abstract format'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/efcasado/forms";
            };
          }
      ) {};

    forms = forms_0_0_1;

    fox_0_1_12 = callPackage
      (
        {  buildMix, fetchHex, timex_1_0_1, ecto_2_0_0_beta_0 }:
          buildMix {
            name = "fox";
            version = "0.1.12";
            src = fetchHex {
              pkg = "fox";
              version = "0.1.12";
              sha256 =
                "3b4fe9b49422d99e0c888ca839e828b70b4334637f443a14afc941be5e6a847e";
            };
            beamDeps  = [ timex_1_0_1 ecto_2_0_0_beta_0 ];

            meta = {
              longDescription = ''Collection of support utility functions and
                                extensions for day-to-day web development with
                                Elixir. Includes utility extension to strings,
                                uri, dicts, integers, functions, parallel,
                                records, random, and time'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/foxnewsnetwork/fox";
            };
          }
      ) {};

    fox = fox_0_1_12;

    fqc_0_1_5 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "fqc";
            version = "0.1.5";
            src = fetchHex {
              pkg = "fqc";
              version = "0.1.5";
              sha256 =
                "47536dec351a12e1cbe0bc3b52bfff3b0690b0aec660472b5cf49f812eb9aa4f";
            };

            meta = {
              description = ''FiFo EQC helper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/project-fifo/fqc";
            };
          }
      ) {};

    fqc_0_1_7 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "fqc";
            version = "0.1.7";
            src = fetchHex {
              pkg = "fqc";
              version = "0.1.7";
              sha256 =
                "b6873982bad60a34553b00435848521f5178b5508eeded8dfa0d8b2e00846e8e";
            };

            meta = {
              description = ''FiFo EQC helper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/project-fifo/fqc";
            };
          }
      ) {};

    fqc = fqc_0_1_7;

    frank_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, amqp_0_1_4 }:
          buildMix {
            name = "frank";
            version = "0.0.3";
            src = fetchHex {
              pkg = "frank";
              version = "0.0.3";
              sha256 =
                "f5f19c57aa763b483af80329f54e2de55b1fcb1dde5c304eed97fbde9ca2ce7d";
            };
            beamDeps  = [ amqp_0_1_4 ];

            meta = {
              description = ''Simple Elixir client for RabbitMQ built on top of
                            AMQP.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/triptec/frank";
            };
          }
      ) {};

    frank = frank_0_0_3;

    friendly_1_0_1 = callPackage
      (
        {  buildMix, fetchHex, floki_0_7_1 }:
          buildMix {
            name = "friendly";
            version = "1.0.1";
            src = fetchHex {
              pkg = "friendly";
              version = "1.0.1";
              sha256 =
                "5bacdeba9a6752613c037f7ffacd4f7185cf9b348b3b41c73497e539bbb17602";
            };
            beamDeps  = [ floki_0_7_1 ];

            meta = {
              longDescription = ''HTML and XML parser with the most friendly
                                API in Elixir land. CSS selector in, list of
                                elements out.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qertoip/friendly/";
            };
          }
      ) {};

    friendly = friendly_1_0_1;

    fs_0_9_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "fs";
            version = "0.9.2";
            src = fetchHex {
              pkg = "fs";
              version = "0.9.2";
              sha256 =
                "9a00246e8af58cdf465ae7c48fd6fd7ba2e43300413dfcc25447ecd3bf76f0c1";
            };
            compilePorts = true;

            meta = {
              description = ''FS VXZ Listener'';

            };
          }
      ) {};

    fs = fs_0_9_2;

    fsm_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "fsm";
            version = "0.2.0";
            src = fetchHex {
              pkg = "fsm";
              version = "0.2.0";
              sha256 =
                "dbc7b316d37f258db4f1a897109da14c2c76aa706fe85859532eff2ea30986bf";
            };

            meta = {
              description = ''Finite state machine as a functional data
                            structure.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/fsm";
            };
          }
      ) {};

    fsm = fsm_0_2_0;

    fulcrum_0_0_6 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "fulcrum";
            version = "0.0.6";
            src = fetchHex {
              pkg = "fulcrum";
              version = "0.0.6";
              sha256 =
                "9cddd3906bad693cad791841d19b2be089e064a5f2dd35d340f46e6cd15d7930";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              longDescription = ''Fulcrum library for Elixir. The aim is to
                                present the Fulcrum API as a replacement for an
                                Ecto Repo. So, instead of Repo.all(Form), you
                                can write Fulcrum.all(Form). In this way, you
                                only have to make minor changes to your
                                controllers, to work with Fulcrum.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pinx/fulcrum";
            };
          }
      ) {};

    fulcrum = fulcrum_0_0_6;

    fumanchu_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "fumanchu";
            version = "0.0.1";
            src = fetchHex {
              pkg = "fumanchu";
              version = "0.0.1";
              sha256 =
                "3ae3f825b598d2af9ace3f9ef25ff23b7724507cddb2dddb2176e4a49afabc89";
            };

            meta = {
              description = ''An (almost) spec-compliant Mustache parser
                            written in Elixir'';

            };
          }
      ) {};

    fumanchu = fumanchu_0_0_1;

    funnel_0_4_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poolboy_1_5_1,
          httpoison_0_8_1,
          uuid_0_1_5,
          poison_1_5_2
        }:
          buildMix {
            name = "funnel";
            version = "0.4.1";
            src = fetchHex {
              pkg = "funnel";
              version = "0.4.1";
              sha256 =
                "84b937146c9464afc2a92e53aa0109de60caef599f82613fdcd4dc3e864025d7";
            };
            beamDeps  = [
                          poolboy_1_5_1 httpoison_0_8_1 uuid_0_1_5 poison_1_5_2
                        ];

            meta = {
              description = ''Streaming API built upon ElasticSearch`s
                            percolation. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/af83/funnel";
            };
          }
      ) {};

    funnel = funnel_0_4_1;

    fuse_2_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "fuse";
            version = "2.0.0";
            src = fetchHex {
              pkg = "fuse";
              version = "2.0.0";
              sha256 =
                "e2c55c0629ce418974165a65b342e54527333303d7e9c1f0493679144c9698cb";
            };

            meta = {
              description = ''A Circuit breaker implementation for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jlouis/fuse";
            };
          }
      ) {};

    fuse = fuse_2_0_0;

    fuzzyurl_0_8_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "fuzzyurl";
            version = "0.8.1";
            src = fetchHex {
              pkg = "fuzzyurl";
              version = "0.8.1";
              sha256 =
                "8229d3d14bcbaf792a550ee68347662efd93022e7fc0221f7681c104b3356900";
            };

            meta = {
              longDescription = ''Fuzzyurl is a library for non-strict parsing,
                                construction, and fuzzy-matching of URLs.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gamache/fuzzyurl.ex";
            };
          }
      ) {};

    fuzzyurl = fuzzyurl_0_8_1;

    gateway_0_0_6 = callPackage
      (
        {
          buildMix, fetchHex, poison_2_1_0, httpoison_0_8_1, fox_0_1_12
        }:
          buildMix {
            name = "gateway";
            version = "0.0.6";
            src = fetchHex {
              pkg = "gateway";
              version = "0.0.6";
              sha256 =
                "4d0de05b0168ee0cc41c9c38491a4b4641d446f38170ca170d0d7440b0c8f619";
            };
            beamDeps  = [ poison_2_1_0 httpoison_0_8_1 fox_0_1_12 ];

            meta = {
              longDescription = ''A generic set of macros and conventions to
                                build clients to communicate with JSON REST
                                APIs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/foxnewsnetwork/gateway";
            };
          }
      ) {};

    gateway = gateway_0_0_6;

    gb2260_0_4_0 = callPackage
      (
        {  buildMix, fetchHex, poison_2_1_0 }:
          buildMix {
            name = "gb2260";
            version = "0.4.0";
            src = fetchHex {
              pkg = "gb2260";
              version = "0.4.0";
              sha256 =
                "62e89f7f4fcee973e8092e41676a903831f0cf88e31d6bedcf88382dfe40f333";
            };
            beamDeps  = [ poison_2_1_0 ];

            meta = {
              description = ''The Elixir implementation for looking up the
                            Chinese administrative divisions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/LcpMarvel/gb2260";
            };
          }
      ) {};

    gb2260 = gb2260_0_4_0;

    gcm_1_2_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "gcm";
            version = "1.2.0";
            src = fetchHex {
              pkg = "gcm";
              version = "1.2.0";
              sha256 =
                "281d5c2dc94a24382292f6fbfe7348316e8afa0a40285978f03e7dcae068170a";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''GCM library to send pushes through GCM'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carnivalmobile/gcm";
            };
          }
      ) {};

    gcm = gcm_1_2_0;

    gcmex_0_0_1 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, httpoison_0_7_5, earmark_0_2_1
        }:
          buildMix {
            name = "gcmex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "gcmex";
              version = "0.0.1";
              sha256 =
                "92f3bbafd7ad0718490d1bdc10d4a2aa5ee7167c144bfe6584cf4260ab6feeab";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_7_5 earmark_0_2_1 ];

            meta = {
              description = ''Google Cloud Messaging client library for
                            elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dukex/gcmex";
            };
          }
      ) {};

    gcmex = gcmex_0_0_1;

    gealts_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "gealts";
            version = "0.0.1";
            src = fetchHex {
              pkg = "gealts";
              version = "0.0.1";
              sha256 =
                "c23b96986b19801c3428ff961e26e5b7327cd38141c2161951fdba233b71ac2b";
            };

            meta = {
              description = ''A crude genetic programming library.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/0010-IO/gealts";
            };
          }
      ) {};

    gealts = gealts_0_0_1;

    gelf_logger_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, poison_2_1_0 }:
          buildMix {
            name = "gelf_logger";
            version = "0.2.0";
            src = fetchHex {
              pkg = "gelf_logger";
              version = "0.2.0";
              sha256 =
                "3729e42e3c8d492ec4b18cd7a70783cc2d15811b7096613a60da04743d1f7838";
            };
            beamDeps  = [ poison_2_1_0 ];

            meta = {
              longDescription = ''A Logger backend that will generate Graylog
                                Extended Log Format messages and send them to a
                                compatible server.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jschniper/gelf_logger";
            };
          }
      ) {};

    gelf_logger = gelf_logger_0_2_0;

    gelfex_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, connection_1_0_2 }:
          buildMix {
            name = "gelfex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "gelfex";
              version = "0.0.1";
              sha256 =
                "35ca2deb8221379fc8eb2d4e33888ce590defe91dbbaaa10ef352d6654723279";
            };
            beamDeps  = [ poison_1_5_2 connection_1_0_2 ];

            meta = {
              description = ''Elixir client for logging GELF messages to
                            Graylog.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/donpinkster/gelfex";
            };
          }
      ) {};

    gelfex = gelfex_0_0_1;

    gen_listener_tcp_0_3_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "gen_listener_tcp";
            version = "0.3.2";
            src = fetchHex {
              pkg = "gen_listener_tcp";
              version = "0.3.2";
              sha256 =
                "b3c3fbc525ba2b32d947b06811d38470d5b0abe2ca81b623192a71539ed22336";
            };

            meta = {
              description = ''Generic TCP Server'';

              homepage = "https://github.com/travelping/gen_listener_tcp";
            };
          }
      ) {};

    gen_listener_tcp = gen_listener_tcp_0_3_2;

    gen_smtp_0_9_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "gen_smtp";
            version = "0.9.0";
            src = fetchHex {
              pkg = "gen_smtp";
              version = "0.9.0";
              sha256 =
                "5a05f23a7cbe0c6242d290b445c6bbc0c287e3d0e09d3fcdc6bcd2c8973b6688";
            };

            meta = {
              longDescription = ''A generic Erlang SMTP server framework that
                                can be extended via callback modules in the OTP
                                style. '';

              homepage = "https://github.com/Vagabond/gen_smtp";
            };
          }
      ) {};

    gen_smtp = gen_smtp_0_9_0;

    gendex_0_5_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "gendex";
            version = "0.5.1";
            src = fetchHex {
              pkg = "gendex";
              version = "0.5.1";
              sha256 =
                "b3eedba31b1a76ab33e6b57689e4312625fafb2667ac7b485df22c05b4c9439f";
            };

            meta = {
              description = ''Gendex tells you the most likely gender of a
                            person based on first name.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dre1080/gendex";
            };
          }
      ) {};

    gendex = gendex_0_5_1;

    geo_1_0_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          postgrex_0_11_1,
          poison_1_0_3,
          ecto_2_0_0_beta_0
        }:
          buildMix {
            name = "geo";
            version = "1.0.1";
            src = fetchHex {
              pkg = "geo";
              version = "1.0.1";
              sha256 =
                "c0ab2df75521a2f50ff339294ff914b3a71e4f3753c5a82851457e0d40bb2e9c";
            };
            beamDeps  = [ postgrex_0_11_1 poison_1_0_3 ecto_2_0_0_beta_0 ];

            meta = {
              description = ''PostGIS extension for Postgrex. Also encodes and
                            decodes WKB, WKT, and GeoJSON.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/geo";
            };
          }
      ) {};

    geo = geo_1_0_1;

    geocalc_0_4_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "geocalc";
            version = "0.4.0";
            src = fetchHex {
              pkg = "geocalc";
              version = "0.4.0";
              sha256 =
                "353bcb1efc5b64fc3f8ca33338e51b47ae5f39b272da79be7f1ff7a6daa8dafb";
            };

            meta = {
              description = ''Calculate distance, bearing and more between
                            latitude/longitude points.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yltsrc/geocalc";
            };
          }
      ) {};

    geocalc = geocalc_0_4_0;

    geocoder_0_4_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          towel_0_2_1,
          poolboy_1_5_1,
          poison_1_5_2,
          httpoison_0_8_1
        }:
          buildMix {
            name = "geocoder";
            version = "0.4.0";
            src = fetchHex {
              pkg = "geocoder";
              version = "0.4.0";
              sha256 =
                "67c45859114f5b82949cb98b75cfc862d739a5212164e4147552c6b3701cc975";
            };
            beamDeps  = [
                          towel_0_2_1 poolboy_1_5_1 poison_1_5_2 httpoison_0_8_1
                        ];

            meta = {
              description = ''A simple, efficient geocoder/reverse geocoder
                            with a built-in cache.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/knrz/geocoder";
            };
          }
      ) {};

    geocoder = geocoder_0_4_0;

    geohash_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "geohash";
            version = "0.1.1";
            src = fetchHex {
              pkg = "geohash";
              version = "0.1.1";
              sha256 =
                "ffca8ce73cce9c52aae2000c5f417009b87f23d6e2df69cd6985bc5cc05aa998";
            };

            meta = {
              description = ''Geohash encode/decode implementation for
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/polmuz/elixir-geohash";
            };
          }
      ) {};

    geohash = geohash_0_1_1;

    geolix_0_9_0 = callPackage
      (
        {  buildMix, fetchHex, poolboy_1_5_1 }:
          buildMix {
            name = "geolix";
            version = "0.9.0";
            src = fetchHex {
              pkg = "geolix";
              version = "0.9.0";
              sha256 =
                "05bf3057a8997aaf70abc2e8f3ef04679c12b061829af263b3bfb44ad3e8e6a0";
            };
            beamDeps  = [ poolboy_1_5_1 ];

            meta = {
              description = ''MaxMind GeoIP2 database reader/decoder'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mneudert/geolix";
            };
          }
      ) {};

    geolix = geolix_0_9_0;

    getopt_0_8_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "getopt";
            version = "0.8.2";
            src = fetchHex {
              pkg = "getopt";
              version = "0.8.2";
              sha256 =
                "736e6db3679fbbad46373efb96b69509f8e420281635e9d92989af9f0a0483f7";
            };

            meta = {
              description = ''Command-line options parser for Erlang'';

              homepage = "https://github.com/jcomellas/getopt";
            };
          }
      ) {};

    getopt = getopt_0_8_2;

    gettext_0_10_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "gettext";
            version = "0.10.0";
            src = fetchHex {
              pkg = "gettext";
              version = "0.10.0";
              sha256 =
                "c37747dced24fe00cb4245cb348a36556fa82851c10748cfe4c6a0253aea374e";
            };

            meta = {
              description = ''Internationalization and localization through
                            gettext'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/gettext";
            };
          }
      ) {};

    gettext = gettext_0_10_0;

    gh_webhook_plug_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "gh_webhook_plug";
            version = "0.0.2";
            src = fetchHex {
              pkg = "gh_webhook_plug";
              version = "0.0.2";
              sha256 =
                "f89c7b883923aea3a3c488e3344390e0771735df72dad7fec270ce49aba88854";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              longDescription = ''This Plug makes it easy to listen and respond
                                to Github webhook requests in your Elixir
                                apps.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/emilsoman/gh_webhook_plug";
            };
          }
      ) {};

    gh_webhook_plug = gh_webhook_plug_0_0_2;

    gibran_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "gibran";
            version = "0.0.1";
            src = fetchHex {
              pkg = "gibran";
              version = "0.0.1";
              sha256 =
                "20e221e7743279bb37560c94bf93dea576d9a24d301cd75f3cfa5f6b0ec6dd20";
            };

            meta = {
              description = ''An Elixir natural language processor.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/abitdodgy/gibran";
            };
          }
      ) {};

    gibran = gibran_0_0_1;

    gil_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_7_5, floki_0_7_1 }:
          buildMix {
            name = "gil";
            version = "0.0.3";
            src = fetchHex {
              pkg = "gil";
              version = "0.0.3";
              sha256 =
                "5235fdfd30513bd5d75a93272fc952f3ae1c0746e400591c244383d8f0fe9403";
            };
            beamDeps  = [ httpoison_0_7_5 floki_0_7_1 ];

            meta = {
              description = ''"Mix custome task for check exchange rate"'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/modalsoul/gil";
            };
          }
      ) {};

    gil = gil_0_0_3;

    gimei_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "gimei";
            version = "0.0.2";
            src = fetchHex {
              pkg = "gimei";
              version = "0.0.2";
              sha256 =
                "858aab561bc200358ee7098c80ea91d8c7e38b0058c55b1e4df28f5e5a27db7c";
            };

            meta = {
              description = ''Gimei is a pure Elixir library for genrating
                            Japanese fake data.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/elixir-gimei";
            };
          }
      ) {};

    gimei = gimei_0_0_2;

    gimei_ex_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "gimei_ex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "gimei_ex";
              version = "1.0.0";
              sha256 =
                "21dd295d7beae218cc947d649d62d990aa2931d844c15e367528d68926a21987";
            };

            meta = {
              description = ''Elixir port of gimei library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/gimei_ex";
            };
          }
      ) {};

    gimei_ex = gimei_ex_1_0_0;

    git_cli_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "git_cli";
            version = "0.1.0";
            src = fetchHex {
              pkg = "git_cli";
              version = "0.1.0";
              sha256 =
                "08cc7b12b7c29cee656d81008e9627b027555cbdf78fa609b599d64bbef71214";
            };

            meta = {
              description = ''A simple interface to Git CLI'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tuvistavie/elixir-git-cli";
            };
          }
      ) {};

    git_cli = git_cli_0_1_0;

    gitex_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "gitex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gitex";
              version = "0.1.0";
              sha256 =
                "ac3bfa723cf2f734837fc7d89a330fa80156f96eaa2e6326d2ab60880a804de7";
            };

            meta = {
              longDescription = ''Elixir implementation of the Git object
                                storage, but with the goal to implement the same
                                semantic with other storage and topics'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/gitex";
            };
          }
      ) {};

    gitex_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "gitex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "gitex";
              version = "0.2.0";
              sha256 =
                "68074becf5e9a01d00096c306a05b023d0107bafca178ff0f043f893b7b95450";
            };

            meta = {
              longDescription = ''Elixir implementation of the Git object
                                storage, but with the goal to implement the same
                                semantic with other storage and topics'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/gitex";
            };
          }
      ) {};

    gitex = gitex_0_2_0;

    github_oauth_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "github_oauth";
            version = "0.1.1";
            src = fetchHex {
              pkg = "github_oauth";
              version = "0.1.1";
              sha256 =
                "4e68983af9ed8146a2505ad759cb151c3202471285f07df6132a4acd47aa91f2";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''simple github oauth library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lidashuang/github_oauth";
            };
          }
      ) {};

    github_oauth = github_oauth_0_1_1;

    glitchylicious_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "glitchylicious";
            version = "0.0.1";
            src = fetchHex {
              pkg = "glitchylicious";
              version = "0.0.1";
              sha256 =
                "2d7c55bd138722ff810006d4b36873d80ad0473e074ccc377e381c5a88f0a9db";
            };

            meta = {
              description = ''Glitching and image corruption library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/0010-IO/glitchylicious";
            };
          }
      ) {};

    glitchylicious = glitchylicious_0_0_1;

    global_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "global";
            version = "1.0.0";
            src = fetchHex {
              pkg = "global";
              version = "1.0.0";
              sha256 =
                "00b0637bc2d86154af2885807296d4b6616e6b50a2d52c8ce187ddfe317890ee";
            };

            meta = {
              description = ''A wrapper for Erlang`s :global module with
                            documentation.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/mgwidmann/global";
            };
          }
      ) {};

    global = global_1_0_0;

    gmail_0_0_17 = callPackage
      (
        {
          buildMix,
          fetchHex,
          timex_1_0_0_rc4,
          poison_1_5_2,
          httpoison_0_8_1
        }:
          buildMix {
            name = "gmail";
            version = "0.0.17";
            src = fetchHex {
              pkg = "gmail";
              version = "0.0.17";
              sha256 =
                "3c8fa022730d7e8016c777e48977077d6ebc02c4382d13d94b60f452ed8e650d";
            };
            beamDeps  = [ timex_1_0_0_rc4 poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''A simple Gmail REST API client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/craigp/elixir-gmail";
            };
          }
      ) {};

    gmail = gmail_0_0_17;

    gold_0_12_0 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1, decimal_1_1_1
        }:
          buildMix {
            name = "gold";
            version = "0.12.0";
            src = fetchHex {
              pkg = "gold";
              version = "0.12.0";
              sha256 =
                "fba43501f6c25116c29358c4b5494de5e078cc516572045ac73a7944b918105b";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 decimal_1_1_1 ];

            meta = {
              description = ''An Elixir library to interface with the Bitcoin
                            core JSON-RPC API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/solatis/gold";
            };
          }
      ) {};

    gold = gold_0_12_0;

    goldrush_0_1_7 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "goldrush";
            version = "0.1.7";
            src = fetchHex {
              pkg = "goldrush";
              version = "0.1.7";
              sha256 =
                "a94a74cd363ce5f4970ed8242c551ec62b71939db1bbfd2e030142cab25a4ffe";
            };

            meta = {
              description = ''Small, Fast event processing and monitoring for
                            Erlang/OTP applications. '';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/DeadZen/goldrush";
            };
          }
      ) {};

    goldrush = goldrush_0_1_7;

    good_enough_geoid_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, csv_1_2_4 }:
          buildMix {
            name = "good_enough_geoid";
            version = "0.0.2";
            src = fetchHex {
              pkg = "good_enough_geoid";
              version = "0.0.2";
              sha256 =
                "7b2a556206f71e743d77c26a55b60b3282bd799b8254510f62afe2a4ec330746";
            };
            beamDeps  = [ csv_1_2_4 ];

            meta = {
              description = ''Get EGM Geoid heights that are good enough for
                            some purposes (maybe yours).'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/code-lever/good-enough-geoid-elixir";
            };
          }
      ) {};

    good_enough_geoid = good_enough_geoid_0_0_2;

    good_times_1_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "good_times";
            version = "1.1.1";
            src = fetchHex {
              pkg = "good_times";
              version = "1.1.1";
              sha256 =
                "1ecb4524b506a5dde5fa9e2312d6f98249b4b45e49a74cf799a8577b52157b90";
            };

            meta = {
              description = ''Expressive and easy to use datetime functions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DevL/good_times";
            };
          }
      ) {};

    good_times = good_times_1_1_1;

    google_auth_0_0_2 = callPackage
      (
        {
          buildMix,
          fetchHex,
          plug_1_1_1,
          module_mocker_0_2_0,
          cowboy_1_0_4,
          access_token_extractor_0_1_1
        }:
          buildMix {
            name = "google_auth";
            version = "0.0.2";
            src = fetchHex {
              pkg = "google_auth";
              version = "0.0.2";
              sha256 =
                "029f2399456a7b7474635cab36544d35e200ddd7a470a905191de0fc3612adb5";
            };
            beamDeps  = [
                          plug_1_1_1
                          module_mocker_0_2_0
                          cowboy_1_0_4
                          access_token_extractor_0_1_1
                        ];

            meta = {
              longDescription = ''Simple Plug to provide google based
                                authentication. Just pass access_token received
                                from client side google auth flow and this plug
                                will get name, emai and picture of user from
                                google and add it to private inside Plug.Conn'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rohanpujaris/google_auth";
            };
          }
      ) {};

    google_auth = google_auth_0_0_2;

    google_sheets_2_0_3 = callPackage
      (
        {
          buildMix,
          fetchHex,
          sweet_xml_0_6_1,
          httpoison_0_8_1,
          hackney_1_4_8
        }:
          buildMix {
            name = "google_sheets";
            version = "2.0.3";
            src = fetchHex {
              pkg = "google_sheets";
              version = "2.0.3";
              sha256 =
                "10b5708d3fb7e41a4e8e026e0cdd2c282fb4804f7f3b53e2a9dd5ddce01749fe";
            };
            beamDeps  = [ sweet_xml_0_6_1 httpoison_0_8_1 hackney_1_4_8 ];

            meta = {
              description = ''OTP application for fetching and polling Google
                            spreadsheet data in CSV format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/GrandCru/GoogleSheets";
            };
          }
      ) {};

    google_sheets = google_sheets_2_0_3;

    goth_0_0_3 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_1_5_2,
          json_web_token_0_2_4,
          httpoison_0_8_1
        }:
          buildMix {
            name = "goth";
            version = "0.0.3";
            src = fetchHex {
              pkg = "goth";
              version = "0.0.3";
              sha256 =
                "0bbf59ae842dc4518cf42123b0fb0d0255bcb72ea37c8ec13bab2efe2339ccc3";
            };
            beamDeps  = [ poison_1_5_2 json_web_token_0_2_4 httpoison_0_8_1
                      ];

            meta = {
              longDescription = ''A simple library to generate and retrieve
                                Oauth2 tokens for use with Google Cloud Service
                                accounts.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peburrows/goth";
            };
          }
      ) {};

    goth = goth_0_0_3;

    gpb_3_18_10 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "gpb";
            version = "3.18.10";
            src = fetchHex {
              pkg = "gpb";
              version = "3.18.10";
              sha256 =
                "caf6833ca216a08246efe660393f3bce291d46dc873ec3588f11e4c112030714";
            };

            meta = {
              description = ''A compiler for Google protocol buffer definitions
                            files for Erlang.'';
              license = stdenv.lib.licenses.lpgl1;
              homepage = "https://github.com/tomas-abrahamsson/gpb";
            };
          }
      ) {};

    gpb_3_18_8 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "gpb";
            version = "3.18.8";
            src = fetchHex {
              pkg = "gpb";
              version = "3.18.8";
              sha256 =
                "44af8eadd3edc030684d36ea6964926af6d95aa32e105a02fcc2cd2e1b436694";
            };

            meta = {
              description = ''A compiler for Google protocol buffer definitions
                            files for Erlang.'';
              license = stdenv.lib.licenses.lpgl1;
              homepage = "https://github.com/tomas-abrahamsson/gpb";
            };
          }
      ) {};

    gpb_3_19_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "gpb";
            version = "3.19.0";
            src = fetchHex {
              pkg = "gpb";
              version = "3.19.0";
              sha256 =
                "9d7fdee6914d5ce3850a58f00ae37240ba7ccb9ecf37aeb0e1bdfae37ca6b4b7";
            };

            meta = {
              description = ''A compiler for Google protocol buffer definitions
                            files for Erlang.'';
              license = stdenv.lib.licenses.lpgl1;
              homepage = "https://github.com/tomas-abrahamsson/gpb";
            };
          }
      ) {};

    gpb = gpb_3_19_0;

    gproc_0_3_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "gproc";
            version = "0.3.1";
            src = fetchHex {
              pkg = "gproc";
              version = "0.3.1";
              sha256 =
                "3c449925a5cbf57cc40d13c6c282bc1080b5ed3bad97e1acdbe969fd63a65fce";
            };

            meta = {
              longDescription = ''Gproc is a process dictionary for Erlang,
                                which provides a number of useful features
                                beyond what the built-in dictionary has: * Use
                                any term as a process alias * Register a process
                                under several aliases * Non-unique properties
                                can be registered simultaneously by many
                                processes * QLC and match specification
                                interface for efficient queries on the
                                dictionary * Await registration, let`s you wait
                                until a process registers itself * Atomically
                                give away registered names and properties to
                                another process * Counters, and aggregated
                                counters, which automatically maintain the total
                                of all counters with a given name * Global
                                registry, with all the above functions applied
                                to a network of nodes'';
              license = stdenv.lib.licenses.epl10;
              homepage = "https://github.com/uwiger/gproc";
            };
          }
      ) {};

    gproc_0_5_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "gproc";
            version = "0.5.0";
            src = fetchHex {
              pkg = "gproc";
              version = "0.5.0";
              sha256 =
                "5bc0fa4e999a6665b92ce57a7f12d7e9d1c26bfc39b0f657994be05cd3818b18";
            };

            meta = {
              longDescription = ''Gproc is a process dictionary for Erlang,
                                which provides a number of useful features
                                beyond what the built-in dictionary has: * Use
                                any term as a process alias * Register a process
                                under several aliases * Non-unique properties
                                can be registered simultaneously by many
                                processes * QLC and match specification
                                interface for efficient queries on the
                                dictionary * Await registration, let`s you wait
                                until a process registers itself * Atomically
                                give away registered names and properties to
                                another process * Counters, and aggregated
                                counters, which automatically maintain the total
                                of all counters with a given name * Global
                                registry, with all the above functions applied
                                to a network of nodes'';
              license = stdenv.lib.licenses.epl10;
              homepage = "https://github.com/uwiger/gproc";
            };
          }
      ) {};

    gproc = gproc_0_5_0;

    graphex_0_2_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "graphex";
            version = "0.2.1";
            src = fetchHex {
              pkg = "graphex";
              version = "0.2.1";
              sha256 =
                "9279db515110de152479903488b1df6ad2de409f5b48d00fac55211bfab2e728";
            };

            meta = {
              description = ''A task graph execution library for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stocks29/graphex";
            };
          }
      ) {};

    graphex = graphex_0_2_1;

    graphmath_1_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "graphmath";
            version = "1.0.2";
            src = fetchHex {
              pkg = "graphmath";
              version = "1.0.2";
              sha256 =
                "6be38a7f4c6167f2c766ee74fd2642c8d98412c4b2bd4c1238cad493f30f4524";
            };

            meta = {
              description = ''Graphmath is a library for doing 2D and 3D
                            mathemtical operations.'';
              license = with stdenv.lib.licenses; [ free wtfpl free ];
              homepage = "https://github.com/crertel/graphmath";
            };
          }
      ) {};

    graphmath = graphmath_1_0_2;

    graphql_0_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "graphql";
            version = "0.1.2";
            src = fetchHex {
              pkg = "graphql";
              version = "0.1.2";
              sha256 =
                "d517247d9518fb1db9631a988f02935a253da43c3c2818c8a1355631645bd92c";
            };

            meta = {
              description = ''GraphQL Elixir implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/graphql-elixir/graphql";
            };
          }
      ) {};

    graphql = graphql_0_1_2;

    graphql_ex_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "graphql_ex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "graphql_ex";
              version = "0.0.1";
              sha256 =
                "51884d5275d354b915db03eb390e858ead88b3f3e4f699b2fa7dc8eb442bc343";
            };
             meta = {    };
          }
      ) {};

    graphql_ex = graphql_ex_0_0_1;

    graphql_parser_0_0_3 = callPackage
      (
        {  buildRebar3, fetchHex, poison_1_5_2 }:
          buildRebar3 {
            name = "graphql_parser";
            version = "0.0.3";
            src = fetchHex {
              pkg = "graphql_parser";
              version = "0.0.3";
              sha256 =
                "c54d6d3a4d5daba22559bc306e3e52cb8d78d3a93738f615c16e405ad56ac6a9";
            };

            beamDeps  = [ poison_1_5_2 ];

            meta = {
              longDescription = ''An elixir interface for libgraphqlparser
                                implemented as a NIF for parsing GraphQL.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aarvay/graphql_parser";
            };
          }
      ) {};

    graphql_parser = graphql_parser_0_0_3;

    gravatarify_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "gravatarify";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gravatarify";
              version = "0.1.0";
              sha256 =
                "d11f416611ed802d72e57f649c74f17c6dbf0e751da87e355cbfd14d4047d17e";
            };

            meta = {
              description = ''Gravatar images with an ease'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shiroyasha/gravatarify";
            };
          }
      ) {};

    gravatarify = gravatarify_0_1_0;

    gray_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "gray";
            version = "0.0.2";
            src = fetchHex {
              pkg = "gray";
              version = "0.0.2";
              sha256 =
                "95b071e0742ed10298c5d0ff027aec3eaadf3a807ed5e88bd4d2861a5220be62";
            };

            meta = {
              longDescription = ''Package to help you operate with [gray codes]
                                (https://en.wikipedia.org/wiki/Gray_code)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hashd/gray";
            };
          }
      ) {};

    gray = gray_0_0_2;

    growl_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "growl";
            version = "0.0.2";
            src = fetchHex {
              pkg = "growl";
              version = "0.0.2";
              sha256 =
                "0b43fba8d18349b5bd507b457016298cfafea4a50831e8ce944569b45d3bceb8";
            };

            meta = {
              longDescription = ''# Growl A simple wrapper to the command line
                                interface for the [Growl OSX notification
                                system](http://growl.info/). ## Setup ```Elixir
                                defp deps do [ {:growl, github:
                                "zhallett/growl"} ] ``` ## Usage Within the
                                script you would like to create a `growl`
                                notification, make the module call as follows:
                                ```Elixir Growl.notify("This is a notification")
                                ``` The API accepts messages in a string format,
                                as well as a list. If the first argument is a
                                list, the first object is the title line, with
                                subsequent lines being the body of the
                                notification. ```Elixir Growl.notify(["Example",
                                "This is an example notification"]) ``` would
                                give the following notification: ![Forced
                                Update](https://github.com/zhallett/growl/blob/master/multi_line_notification.png?raw=true
                                "Multi-Line notification Screenshot")) ##
                                Contributing 1. Fork it 2. Create your feature
                                branch (`git checkout -b my-new-feature`) 3.
                                Commit your changes (`git commit -am `Add some
                                feature``) 4. Push to the branch (`git push
                                origin my-new-feature`) 5. Create new Pull
                                Request '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/zhallett/growl";
            };
          }
      ) {};

    growl = growl_0_0_2;

    guardian_0_10_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          uuid_1_1_3,
          poison_1_5_2,
          plug_1_1_1,
          jose_1_6_1
        }:
          buildMix {
            name = "guardian";
            version = "0.10.1";
            src = fetchHex {
              pkg = "guardian";
              version = "0.10.1";
              sha256 =
                "741aaa989ab656317a247d1db4dcd8e3efbd840b4d451bed7a37504ffdba6dc9";
            };
            beamDeps  = [ uuid_1_1_3 poison_1_5_2 plug_1_1_1 jose_1_6_1 ];

            meta = {
              description = ''Elixir Authentication framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/guardian";
            };
          }
      ) {};

    guardian = guardian_0_10_1;

    guardian_0_9_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          uuid_1_1_3,
          poison_1_5_2,
          plug_1_1_1,
          jose_1_6_1
        }:
          buildMix {
            name = "guardian";
            version = "0.9.1";
            src = fetchHex {
              pkg = "guardian";
              version = "0.9.1";
              sha256 =
                "9a79ae386f777774ab2910007cd30b20e2ea8da51c0712ec07f8cc8a13dfe293";
            };
            beamDeps  = [ uuid_1_1_3 poison_1_5_2 plug_1_1_1 jose_1_6_1 ];

            meta = {
              description = ''Elixir Authentication framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/guardian";
            };
          }
      ) {};

    guardian_db_0_4_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          postgrex_0_11_1,
          guardian_0_9_1,
          ecto_2_0_0_beta_0
        }:
          buildMix {
            name = "guardian_db";
            version = "0.4.0";
            src = fetchHex {
              pkg = "guardian_db";
              version = "0.4.0";
              sha256 =
                "d8fc1d33885c42c9a35c1c370bfe676b68a9b4fb54ed33ff7075e32cadcd1279";
            };
            beamDeps  = [ postgrex_0_11_1 guardian_0_9_1 ecto_2_0_0_beta_0 ];

            meta = {
              description = ''DB tracking for token validity'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hassox/guardian_db";
            };
          }
      ) {};

    guardian_db = guardian_db_0_4_0;

    guardsafe_0_5_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "guardsafe";
            version = "0.5.0";
            src = fetchHex {
              pkg = "guardsafe";
              version = "0.5.0";
              sha256 =
                "e6808876c07f21d78c3935c0607791cd2ceec40f3b855fa03774e8087bcfc277";
            };

            meta = {
              description = ''Macros expanding into code that can be safely
                            used in guard clauses.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DevL/guardsafe";
            };
          }
      ) {};

    guardsafe = guardsafe_0_5_0;

    gun_1_0_0_pre_1 = callPackage
      (
        {  buildRebar3, fetchHex, ranch_1_1_0, cowlib_1_3_0 }:
          buildRebar3 {
            name = "gun";
            version = "1.0.0-pre.1";
            src = fetchHex {
              pkg = "gun";
              version = "1.0.0-pre.1";
              sha256 =
                "53aca19e83b15127aa4e299435823b367d5ba6797852984af6c2b9b493be9d56";
            };

            beamDeps  = [ ranch_1_1_0 cowlib_1_3_0 ];

            meta = {
              description = ''Asynchronous SPDY, HTTP and Websocket client.'';

            };
          }
      ) {};

    gun = gun_1_0_0_pre_1;

    guri_0_2_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          websocket_client_1_1_0,
          poison_1_5_2,
          httpoison_0_8_1
        }:
          buildMix {
            name = "guri";
            version = "0.2.1";
            src = fetchHex {
              pkg = "guri";
              version = "0.2.1";
              sha256 =
                "7fa0f2ebff111c368895798041d982f00eec34589d93f10bb323bb5a09e1f888";
            };
            beamDeps  = [ websocket_client_1_1_0 poison_1_5_2 httpoison_0_8_1
                      ];

            meta = {
              description = ''Automate tasks and keep everyone in the loop with
                            Guri'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elvio/guri";
            };
          }
      ) {};

    guri = guri_0_2_1;

    gurka_0_1_7 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "gurka";
            version = "0.1.7";
            src = fetchHex {
              pkg = "gurka";
              version = "0.1.7";
              sha256 =
                "b46c96446f46a53411a3b45d126ec19e724178818206ca1d2dd16abff28df6b5";
            };

            meta = {
              description = ''Erlang implementation of Cucumber'';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    gurka = gurka_0_1_7;

    gutenex_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, imagineer_0_2_1, apex_0_3_7 }:
          buildMix {
            name = "gutenex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gutenex";
              version = "0.1.0";
              sha256 =
                "212861089f4707ae39e25c08c0d2bb33fca876f1cf71ce7d4546d192c3be03a5";
            };
            beamDeps  = [ imagineer_0_2_1 apex_0_3_7 ];

            meta = {
              description = ''PDF Generation in Elixir '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SenecaSystems/gutenex";
            };
          }
      ) {};

    gutenex = gutenex_0_1_0;

    hackney_1_0_6 = callPackage
      (
        {
          buildRebar3, fetchHex, ssl_verify_hostname_1_0_1, idna_1_0_2
        }:
          buildRebar3 {
            name = "hackney";
            version = "1.0.6";
            src = fetchHex {
              pkg = "hackney";
              version = "1.0.6";
              sha256 =
                "ba74e309ffd9413ca2fdc0c68871e31db9d6f779f8aa32f4828e08ebab8300da";
            };

            beamDeps  = [ ssl_verify_hostname_1_0_1 idna_1_0_2 ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          }
      ) {};

    hackney_1_1_0 = callPackage
      (
        {
          buildRebar3, fetchHex, ssl_verify_hostname_1_0_6, idna_1_0_3
        }:
          buildRebar3 {
            name = "hackney";
            version = "1.1.0";
            src = fetchHex {
              pkg = "hackney";
              version = "1.1.0";
              sha256 =
                "c8551072fdc8d5d5faacc5a31050cb943c3a8eb533149798b3ff424ef2d68501";
            };

            beamDeps  = [ ssl_verify_hostname_1_0_6 idna_1_0_3 ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          }
      ) {};

    hackney_1_3_1 = callPackage
      (
        {
          buildRebar3, fetchHex, ssl_verify_hostname_1_0_6, idna_1_0_3
        }:
          buildRebar3 {
            name = "hackney";
            version = "1.3.1";
            src = fetchHex {
              pkg = "hackney";
              version = "1.3.1";
              sha256 =
                "1a6316daceae744758fc88f2961e68c5a8b6cf1e1f49a28fc2caea6d27581add";
            };

            beamDeps  = [ ssl_verify_hostname_1_0_6 idna_1_0_3 ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          }
      ) {};

    hackney_1_3_2 = callPackage
      (
        {
          buildRebar3, fetchHex, ssl_verify_hostname_1_0_6, idna_1_0_3
        }:
          buildRebar3 {
            name = "hackney";
            version = "1.3.2";
            src = fetchHex {
              pkg = "hackney";
              version = "1.3.2";
              sha256 =
                "9b811cff637b29f9c7e2c61abf01986c85cd4f64a9422315fd803993b4e82615";
            };

            beamDeps  = [ ssl_verify_hostname_1_0_6 idna_1_0_3 ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          }
      ) {};

    hackney_1_4_4 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          ssl_verify_hostname_1_0_5,
          mimerl_1_0_0,
          idna_1_0_2,
          certifi_0_1_1
        }:
          buildRebar3 {
            name = "hackney";
            version = "1.4.4";
            src = fetchHex {
              pkg = "hackney";
              version = "1.4.4";
              sha256 =
                "c8ab2436556d6bce7e85a85adec67f6abeb8c7508668a3e29750be3c4bf4e3a8";
            };

            beamDeps  = [
                          ssl_verify_hostname_1_0_5
                          mimerl_1_0_0
                          idna_1_0_2
                          certifi_0_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          }
      ) {};

    hackney_1_4_8 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          ssl_verify_hostname_1_0_5,
          mimerl_1_0_2,
          idna_1_0_3,
          certifi_0_3_0
        }:
          buildRebar3 {
            name = "hackney";
            version = "1.4.8";
            src = fetchHex {
              pkg = "hackney";
              version = "1.4.8";
              sha256 =
                "7c212741163cec1cf38ad845bd71efafcbf81365cf754c978b354c6375dc4da2";
            };

            beamDeps  = [
                          ssl_verify_hostname_1_0_5
                          mimerl_1_0_2
                          idna_1_0_3
                          certifi_0_3_0
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          }
      ) {};

    hackney = hackney_1_4_8;

    haikunator_1_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "haikunator";
            version = "1.0.1";
            src = fetchHex {
              pkg = "haikunator";
              version = "1.0.1";
              sha256 =
                "60692df3a559df14bac6a8c115091977f0a45eea55123a5cb37e3d763cbe92e8";
            };

            meta = {
              longDescription = ''Generate Heroku-like memorable random names
                                to use in your apps or anywhere else.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/knrz/Haikunator";
            };
          }
      ) {};

    haikunator = haikunator_1_0_1;

    hamcrest_0_1_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "hamcrest";
            version = "0.1.1";
            src = fetchHex {
              pkg = "hamcrest";
              version = "0.1.1";
              sha256 =
                "5207b83e8d3168b9cbbeb3b4c4d83817a38a05f55478510e9c4db83ef83fa0ca";
            };

            meta = {
              description = ''Erlang port of Hamcrest'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/hyperthunk/hamcrest-erlang";
            };
          }
      ) {};

    hamcrest = hamcrest_0_1_1;

    happy_1_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "happy";
            version = "1.1.1";
            src = fetchHex {
              pkg = "happy";
              version = "1.1.1";
              sha256 =
                "3b2ee083ea1d68063df4fb0561eb462703e6188d9352d0763b458ee6ce385060";
            };

            meta = {
              longDescription = ''Happy path programming in elixir. Alternative
                                to ok_jose, elixir`s 1.2 `with` keyword and that
                                kind of stuff.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/happy";
            };
          }
      ) {};

    happy = happy_1_1_1;

    harakiri_0_6_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "harakiri";
            version = "0.6.0";
            src = fetchHex {
              pkg = "harakiri";
              version = "0.6.0";
              sha256 =
                "0cd6f40db8d2e475ea4b9ae4c872656171bced2571e8f86caf49ac7680656b94";
            };

            meta = {
              description = ''Help applications do things to themselves.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rubencaro/harakiri";
            };
          }
      ) {};

    harakiri = harakiri_0_6_0;

    harvest_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "harvest";
            version = "0.0.2";
            src = fetchHex {
              pkg = "harvest";
              version = "0.0.2";
              sha256 =
                "d4d7289c7f166cd035140b6ebe6a14c4cf1f1552b597473bcc29588c8e394e6d";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Harvest Time Tracking API wrapper written in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/luishurtado/harvest";
            };
          }
      ) {};

    harvest = harvest_0_0_2;

    hash_ring_ex_1_1_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "hash_ring_ex";
            version = "1.1.2";
            src = fetchHex {
              pkg = "hash_ring_ex";
              version = "1.1.2";
              sha256 =
                "f33c2f7cc134d9ab1b91d961395b3a2b4d3d47b12b16c4e9d964bc3b57b7d573";
            };

            meta = {
              description = ''A consistent hash-ring implemention for Elixir.
                            '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/reset/hash-ring-ex";
            };
          }
      ) {};

    hash_ring_ex = hash_ring_ex_1_1_2;

    hashids_2_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "hashids";
            version = "2.0.1";
            src = fetchHex {
              pkg = "hashids";
              version = "2.0.1";
              sha256 =
                "8f16b2bf57a71ce5da716bdd731c61e789e2c25f1fd5c00130f0efee9a251a26";
            };

            meta = {
              description = ''Hashids lets you obfuscate numerical identifiers
                            via reversible mapping.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alco/hashids-elixir";
            };
          }
      ) {};

    hashids = hashids_2_0_1;

    heapq_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "heapq";
            version = "0.0.1";
            src = fetchHex {
              pkg = "heapq";
              version = "0.0.1";
              sha256 =
                "60bc20c109360c6899203f4015fae42c9e5a4f82707f76b064e10d6da135d4fd";
            };

            meta = {
              description = ''A Heap-based Priority Queue Implementation in
                            Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/takscape/elixir-heapq";
            };
          }
      ) {};

    heapq = heapq_0_0_1;

    hedwig_1_0_0_rc3 = callPackage
      (
        {  buildMix, fetchHex, gproc_0_5_0 }:
          buildMix {
            name = "hedwig";
            version = "1.0.0-rc3";
            src = fetchHex {
              pkg = "hedwig";
              version = "1.0.0-rc3";
              sha256 =
                "846347c6ae462e98b8c8c8a60f0bef8ee2c4ffa28463a0df030ae8a938cc773f";
            };
            beamDeps  = [ gproc_0_5_0 ];

            meta = {
              description = ''An adapter-based chat bot framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hedwig-im/hedwig";
            };
          }
      ) {};

    hedwig = hedwig_1_0_0_rc3;

    hedwig_xmpp_1_0_0_rc2 = callPackage
      (
        {  buildMix, fetchHex, romeo_0_4_0, hedwig_1_0_0_rc3 }:
          buildMix {
            name = "hedwig_xmpp";
            version = "1.0.0-rc2";
            src = fetchHex {
              pkg = "hedwig_xmpp";
              version = "1.0.0-rc2";
              sha256 =
                "79d60e836763c9eb88798bb5921e8eda717fbbf3030ca401f2a3915f58bc59e0";
            };
            beamDeps  = [ romeo_0_4_0 hedwig_1_0_0_rc3 ];

            meta = {
              description = ''An XMPP adapter for Hedwig'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hedwig-im/hedwig";
            };
          }
      ) {};

    hedwig_xmpp = hedwig_xmpp_1_0_0_rc2;

    hello_0_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "hello";
            version = "0.0.0";
            src = fetchHex {
              pkg = "hello";
              version = "0.0.0";
              sha256 =
                "35378799d296eda76d236544085041c8d19cd9f6dd6d5f31b5914bee6e6128fc";
            };

            meta = {
              description = ''Reserving this name for an awesome project I am
                            building.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/thejamespinto";
            };
          }
      ) {};

    hello = hello_0_0_0;

    hello_world_0_0_0 = callPackage
      (
        {  buildMix, fetchHex, decimal_0_2_5 }:
          buildMix {
            name = "hello_world";
            version = "0.0.0";
            src = fetchHex {
              pkg = "hello_world";
              version = "0.0.0";
              sha256 =
                "ae8b9c09cd73bf5268bdd4095cb9d5efbb716cb841834a6edf111f45279b207d";
            };
            beamDeps  = [ decimal_0_2_5 ];

            meta = {
              description = ''hello-world test'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/shanilevy/hello_world_hex";
            };
          }
      ) {};

    hello_world = hello_world_0_0_0;

    hello_world_header_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, plug_0_8_1, cowboy_1_0_4 }:
          buildMix {
            name = "hello_world_header";
            version = "0.0.1";
            src = fetchHex {
              pkg = "hello_world_header";
              version = "0.0.1";
              sha256 =
                "caddb7712a66326face465231cf3bfe9210a62787cf5f499f9fbcc04e4695242";
            };
            beamDeps  = [ plug_0_8_1 cowboy_1_0_4 ];

            meta = {
              description = ''Demo plug used for tutorial purposes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cultivatehq/hello_world_header";
            };
          }
      ) {};

    hello_world_header = hello_world_header_0_0_1;

    hermes_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, chronos_1_5_1 }:
          buildMix {
            name = "hermes";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hermes";
              version = "0.1.0";
              sha256 =
                "f28880392a8b1b027c58c387870099f854f842fdeb1f7a0ba94a0b1ca07643bf";
            };
            beamDeps  = [ chronos_1_5_1 ];

            meta = {
              longDescription = ''Is a mailer component for sending & recieving
                                emails. The name comes from the greek messanger
                                of the gods.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/hemes";
            };
          }
      ) {};

    hermes = hermes_0_1_0;

    hex_math_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "hex_math";
            version = "0.0.2";
            src = fetchHex {
              pkg = "hex_math";
              version = "0.0.2";
              sha256 =
                "1dd9284c402d06bcd63ccb8df6022342defb2de4bd666066ed409e3b3c47761b";
            };

            meta = {
              description = ''Library for working with hex grids.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tjcelaya/hex_math";
            };
          }
      ) {};

    hex_math = hex_math_0_0_2;

    hex_searcher_1_0_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          table_rex_0_4_0,
          ibrowse_4_2_2,
          httpotion_2_1_0,
          floki_0_7_1
        }:
          buildMix {
            name = "hex_searcher";
            version = "1.0.0";
            src = fetchHex {
              pkg = "hex_searcher";
              version = "1.0.0";
              sha256 =
                "26d2097aa0f950c67ea55822e15cfec26976f76a60ec51d758af9d60126b3538";
            };
            beamDeps  = [
                          table_rex_0_4_0
                          ibrowse_4_2_2
                          httpotion_2_1_0
                          floki_0_7_1
                        ];

            meta = {
              description = ''Search hex packages from terminal'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nguyenvinhlinh/HexSearcher";
            };
          }
      ) {};

    hex_searcher = hex_searcher_1_0_0;

    hexate_0_5_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "hexate";
            version = "0.5.1";
            src = fetchHex {
              pkg = "hexate";
              version = "0.5.1";
              sha256 =
                "b146d4c48380bef3eee74e16bc243f91783f72502759f1f18460b6a8da441270";
            };

            meta = {
              description = ''A simple module for working with hex strings in
                            Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rjsamson/hexate";
            };
          }
      ) {};

    hexate = hexate_0_5_1;

    hexbot_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "hexbot";
            version = "0.0.1";
            src = fetchHex {
              pkg = "hexbot";
              version = "0.0.1";
              sha256 =
                "f9b8c9805468f7b93fa88440f1e75d8ed2fc3b7d11a68c455abf81efcc31590c";
            };

            meta = {
              description = ''A hubot-like bot framework for chatops.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tombell/hexbot";
            };
          }
      ) {};

    hexbot = hexbot_0_0_1;

    hexdocset_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, floki_0_0_5 }:
          buildMix {
            name = "hexdocset";
            version = "1.0.0";
            src = fetchHex {
              pkg = "hexdocset";
              version = "1.0.0";
              sha256 =
                "846ed02411d759710f0f72a401d81a67cbc181421e461d3246540b3d471044be";
            };
            beamDeps  = [ floki_0_0_5 ];

            meta = {
              description = ''Convert hex doc to Dash.app`s docset format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yesmeck/hexdocset";
            };
          }
      ) {};

    hexdocset = hexdocset_1_0_0;

    hexoku_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, jsex_2_0_0, httpoison_0_8_1 }:
          buildMix {
            name = "hexoku";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hexoku";
              version = "0.1.0";
              sha256 =
                "39c24660842061d71922df5f87ac4fa065b3f18f64a4f438d40495ffeb9d711b";
            };
            beamDeps  = [ jsex_2_0_0 httpoison_0_8_1 ];

            meta = {
              description = ''Heroku API client and Heroku Mix tasks for Elixir
                            projects. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JonGretar/Hexoku";
            };
          }
      ) {};

    hexoku = hexoku_0_1_0;

    hlc_2_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "hlc";
            version = "2.0.0";
            src = fetchHex {
              pkg = "hlc";
              version = "2.0.0";
              sha256 =
                "460ac04654e920e068d1fd17aec1f78b1879cc42ac7f3def7497f0d1cc5056ad";
            };

            meta = {
              description = ''hybrid logical clock'';

              homepage = "https://github.com/barrel-db/hlc";
            };
          }
      ) {};

    hlc = hlc_2_0_0;

    holidays_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "holidays";
            version = "0.1.1";
            src = fetchHex {
              pkg = "holidays";
              version = "0.1.1";
              sha256 =
                "098f192bd02f1fd68fd22ae69dc608a03e89a4c814c3c3901d56c8f697cda622";
            };

            meta = {
              description = ''Library for finding which holidays fall on given
                            dates.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CoderDennis/holidays";
            };
          }
      ) {};

    holidays = holidays_0_1_1;

    honeybadger_0_3_1 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, plug_0_8_1, httpoison_0_8_1
        }:
          buildMix {
            name = "honeybadger";
            version = "0.3.1";
            src = fetchHex {
              pkg = "honeybadger";
              version = "0.3.1";
              sha256 =
                "9555cbe7a4069f27f8182c066411f6c439f79f147eb0a1605e13d55b07fb260b";
            };
            beamDeps  = [ poison_1_5_2 plug_0_8_1 httpoison_0_8_1 ];

            meta = {
              longDescription = ''Elixir client, Plug and error_logger for
                                integrating with the Honeybadger.io exception
                                tracker'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/honeybadger-io/honeybadger-elixir";
            };
          }
      ) {};

    honeybadger = honeybadger_0_3_1;

    honeydew_0_0_8 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "honeydew";
            version = "0.0.8";
            src = fetchHex {
              pkg = "honeydew";
              version = "0.0.8";
              sha256 =
                "3bf8f7d9665f2897c43f6f3f5f31e598ecf41270bfb57fae11b994715f2665cc";
            };

            meta = {
              description = ''Job queue + worker pool with permanent
                            workers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/koudelka/elixir-honeydew";
            };
          }
      ) {};

    honeydew = honeydew_0_0_8;

    hooks_1_1_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "hooks";
            version = "1.1.1";
            src = fetchHex {
              pkg = "hooks";
              version = "1.1.1";
              sha256 =
                "6834ad3a2a624a5ffd49e9cb146ff49ded423b67f31905b122d24128c72c5c85";
            };

            meta = {
              description = ''generic plugin & hook system'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/barrel-db/hooks";
            };
          }
      ) {};

    hooks = hooks_1_1_1;

    hound_0_8_2 = callPackage
      (
        {  buildMix, fetchHex, poison_2_1_0, httpoison_0_8_1 }:
          buildMix {
            name = "hound";
            version = "0.8.2";
            src = fetchHex {
              pkg = "hound";
              version = "0.8.2";
              sha256 =
                "3ecb4b7d20de76e6790d61e53555e3486ed5810bb6f0052321620b1d46ffb188";
            };
            beamDeps  = [ poison_2_1_0 httpoison_0_8_1 ];

            meta = {
              description = ''Webdriver library for integration testing and
                            browser automation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/HashNuke/hound";
            };
          }
      ) {};

    hound = hound_0_8_2;

    hr_0_2_2 = callPackage
      (
        {
          buildMix,
          fetchHex,
          yyid_0_1_2,
          plug_1_1_1,
          phoenix_html_2_5_0,
          phoenix_ecto_3_0_0_beta_0,
          phoenix_1_1_4,
          oauth2_0_3_0,
          linguist_0_1_5,
          joken_0_16_1,
          comeonin_1_6_0
        }:
          buildMix {
            name = "hr";
            version = "0.2.2";
            src = fetchHex {
              pkg = "hr";
              version = "0.2.2";
              sha256 =
                "67d02f62bffda952dbaf80cfea85601f31c39e04d3bf90da7a08b89e1bce71df";
            };
            beamDeps  = [
                          yyid_0_1_2
                          plug_1_1_1
                          phoenix_html_2_5_0
                          phoenix_ecto_3_0_0_beta_0
                          phoenix_1_1_4
                          oauth2_0_3_0
                          linguist_0_1_5
                          joken_0_16_1
                          comeonin_1_6_0
                        ];

            meta = {
              description = ''User accounts for Phoenix. Supports OAuth, JWT
                            and forms out of the box'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zensavona/hr";
            };
          }
      ) {};

    hr = hr_0_2_2;

    hstore_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, postgrex_0_6_0, apex_0_3_7 }:
          buildMix {
            name = "hstore";
            version = "0.0.2";
            src = fetchHex {
              pkg = "hstore";
              version = "0.0.2";
              sha256 =
                "bd5040285c29162685f4db37ef3ad30c2bb473f5c54fe03ef29b4383cf23504a";
            };
            beamDeps  = [ postgrex_0_6_0 apex_0_3_7 ];

            meta = {
              longDescription = ''A collection of encoders and decoders for
                                hstore data type support for Postgrex. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/senecasystems/hstore";
            };
          }
      ) {};

    hstore = hstore_0_0_2;

    html_builder_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "html_builder";
            version = "0.1.0";
            src = fetchHex {
              pkg = "html_builder";
              version = "0.1.0";
              sha256 =
                "825fa6d1be1c42bf91dcd198c791eb32156973a70273afb93616285f97dce0c2";
            };

            meta = {
              description = ''generate html in elixir with simple data
                            structures'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/html_builder";
            };
          }
      ) {};

    html_builder = html_builder_0_1_0;

    html_entities_0_3_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "html_entities";
            version = "0.3.0";
            src = fetchHex {
              pkg = "html_entities";
              version = "0.3.0";
              sha256 =
                "93811511394efeee964f6e7df3b72b37ad39c1d185030c3561aebf1c15c4d995";
            };

            meta = {
              description = ''Decode and encode HTML entities in a string.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/martinsvalin/html_entities";
            };
          }
      ) {};

    html_entities = html_entities_0_3_0;

    html_sanitize_ex_0_3_1 = callPackage
      (
        {  buildMix, fetchHex, mochiweb_2_12_2 }:
          buildMix {
            name = "html_sanitize_ex";
            version = "0.3.1";
            src = fetchHex {
              pkg = "html_sanitize_ex";
              version = "0.3.1";
              sha256 =
                "cf99531194f621515cc7f62db14f899e404529782b94061b44931c3c4b78099d";
            };
            beamDeps  = [ mochiweb_2_12_2 ];

            meta = {
              description = ''HTML sanitizer for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/html_sanitize_ex";
            };
          }
      ) {};

    html_sanitize_ex = html_sanitize_ex_0_3_1;

    html_to_pdf_0_5_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "html_to_pdf";
            version = "0.5.2";
            src = fetchHex {
              pkg = "html_to_pdf";
              version = "0.5.2";
              sha256 =
                "7adcde56c221e8f2447837d3b5983775f53071035d9ce9f179635a5e94c795e3";
            };

            meta = {
              description = ''Super simple library for turning raw HTML or
                            webpages into beautiful PDFs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattweldon/html_to_pdf";
            };
          }
      ) {};

    html_to_pdf = html_to_pdf_0_5_2;

    htpasswd_1_0_2 = callPackage
      (
        {  buildMix, fetchHex, apache_passwd_md5_1_0_0 }:
          buildMix {
            name = "htpasswd";
            version = "1.0.2";
            src = fetchHex {
              pkg = "htpasswd";
              version = "1.0.2";
              sha256 =
                "0c9006a42eae68ac2f561e5876c0fd8083560c57da099ffa6c828eeb00246bba";
            };
            beamDeps  = [ apache_passwd_md5_1_0_0 ];

            meta = {
              longDescription = ''Provides basic htpasswd(1) functions as a
                                library: encode and check passwords in MD5, SHA,
                                crypt, or plaintext format, add to and delete
                                from htaccess files. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kevinmontuori/Apache.htpasswd";
            };
          }
      ) {};

    htpasswd = htpasswd_1_0_2;

    http_0_0_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          pool_0_0_2,
          excoveralls_0_5_1,
          ex_doc_0_6_2,
          earmark_0_1_19,
          dialyze_0_1_4
        }:
          buildMix {
            name = "http";
            version = "0.0.1";
            src = fetchHex {
              pkg = "http";
              version = "0.0.1";
              sha256 =
                "1ee497d4ec73290e5d9b9effab88786716185550bd65822e7a31c32d1a044a96";
            };
            beamDeps  = [
                          pool_0_0_2
                          excoveralls_0_5_1
                          ex_doc_0_6_2
                          earmark_0_1_19
                          dialyze_0_1_4
                        ];

            meta = {
              description = ''HTTP server for Elixir Not currently working, but
                            close :) '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/http";
            };
          }
      ) {};

    http = http_0_0_1;

    http_proxy_1_0_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          plug_1_0_3,
          hackney_1_4_8,
          exjsx_3_2_0,
          cowboy_1_0_4
        }:
          buildMix {
            name = "http_proxy";
            version = "1.0.1";
            src = fetchHex {
              pkg = "http_proxy";
              version = "1.0.1";
              sha256 =
                "7ff5d10c8932b189844f9735742250e4fdbe9de5eba40c84e7447f54fc75fdd3";
            };
            beamDeps  = [ plug_1_0_3 hackney_1_4_8 exjsx_3_2_0 cowboy_1_0_4
                      ];

            meta = {
              description = ''Multi port HTTP Proxy and support record/play
                            request.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/http_proxy";
            };
          }
      ) {};

    http_proxy = http_proxy_1_0_1;

    http_router_0_0_8 = callPackage
      (
        {
          buildMix,
          fetchHex,
          xml_builder_0_0_8,
          poison_1_5_2,
          plug_1_1_1,
          cowboy_1_0_4
        }:
          buildMix {
            name = "http_router";
            version = "0.0.8";
            src = fetchHex {
              pkg = "http_router";
              version = "0.0.8";
              sha256 =
                "9a2844cc8c880621ca2689e0056f50e2c19e3b0e87a8e2524489459b377a8dc3";
            };
            beamDeps  = [
                          xml_builder_0_0_8 poison_1_5_2 plug_1_1_1 cowboy_1_0_4
                        ];

            meta = {
              longDescription = ''HTTP Router with various macros to assist in
                                developing your application and organizing your
                                code'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/sugar-framework/elixir-http-router";
            };
          }
      ) {};

    http_router = http_router_0_0_8;

    http_signature_1_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "http_signature";
            version = "1.1.0";
            src = fetchHex {
              pkg = "http_signature";
              version = "1.1.0";
              sha256 =
                "3e6036d9c29289ed0e35dd6f41821dec9061ce20aad3c4d35dcbae8c84eb3baa";
            };

            meta = {
              description = ''Erlang and Elixir implementations of Joyent`s
                            HTTP Signature Scheme.'';
              license = stdenv.lib.licenses.mpl20;
              homepage =
                "https://github.com/potatosalad/erlang-http_signature";
            };
          }
      ) {};

    http_signature = http_signature_1_1_0;

    httparrot_0_3_4 = callPackage
      (
        {  buildMix, fetchHex, exjsx_3_2_0, cowboy_1_0_4 }:
          buildMix {
            name = "httparrot";
            version = "0.3.4";
            src = fetchHex {
              pkg = "httparrot";
              version = "0.3.4";
              sha256 =
                "05dc3a30de92a5fc284c937339131c478d57b125cb3d65e97b99bc0fce3d3452";
            };
            beamDeps  = [ exjsx_3_2_0 cowboy_1_0_4 ];

            meta = {
              description = '' HTTP Request & Response Server. An incomplete
                            clone of http://httpbin.org '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httparrot";
            };
          }
      ) {};

    httparrot = httparrot_0_3_4;

    httpehaviour_0_9_0 = callPackage
      (
        {  buildMix, fetchHex, hackney_1_4_8 }:
          buildMix {
            name = "httpehaviour";
            version = "0.9.0";
            src = fetchHex {
              pkg = "httpehaviour";
              version = "0.9.0";
              sha256 =
                "54e93dcf0e62d392781078cf029478194797fe67c98dffe99a91b5d5ec33e4e5";
            };
            beamDeps  = [ hackney_1_4_8 ];

            meta = {
              description = ''Yet Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpehaviour";
            };
          }
      ) {};

    httpehaviour = httpehaviour_0_9_0;

    httpoison_0_7_1 = callPackage
      (
        {  buildMix, fetchHex, hackney_1_3_2 }:
          buildMix {
            name = "httpoison";
            version = "0.7.1";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.7.1";
              sha256 =
                "ad146f8a1e8cb81d50337ca62bd83a80fc1e3df768b93a9ed4c497c3a554c9b0";
            };
            beamDeps  = [ hackney_1_3_2 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          }
      ) {};

    httpoison_0_7_5 = callPackage
      (
        {  buildMix, fetchHex, hackney_1_3_2 }:
          buildMix {
            name = "httpoison";
            version = "0.7.5";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.7.5";
              sha256 =
                "a9b32452df3c4671c012953d6bb15e3a52bbb41b618f72cbd464e8c9320847c9";
            };
            beamDeps  = [ hackney_1_3_2 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          }
      ) {};

    httpoison_0_8_0 = callPackage
      (
        {  buildMix, fetchHex, hackney_1_4_8 }:
          buildMix {
            name = "httpoison";
            version = "0.8.0";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.8.0";
              sha256 =
                "7a6455689233867da40f285e9e3bcce506cd0c60b1094e1c449de76a46b9e50b";
            };
            beamDeps  = [ hackney_1_4_8 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          }
      ) {};

    httpoison_0_8_1 = callPackage
      (
        {  buildMix, fetchHex, hackney_1_4_8 }:
          buildMix {
            name = "httpoison";
            version = "0.8.1";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.8.1";
              sha256 =
                "b4cf6955675f86c77f939b10d29491632a1d227ce1dc4c4db759bc4a52cea600";
            };
            beamDeps  = [ hackney_1_4_8 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          }
      ) {};

    httpoison = httpoison_0_8_1;

    httpotion_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "httpotion";
            version = "1.0.0";
            src = fetchHex {
              pkg = "httpotion";
              version = "1.0.0";
              sha256 =
                "1ff7af8a280928316ba43e15644b75eedd4481dcd56426beb6cad920b244b734";
            };

            meta = {
              description = ''Fancy HTTP client for Elixir, based on
                            ibrowse.'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/myfreeweb/httpotion";
            };
          }
      ) {};

    httpotion_2_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "httpotion";
            version = "2.0.0";
            src = fetchHex {
              pkg = "httpotion";
              version = "2.0.0";
              sha256 =
                "550c94a898f3f2f0bb5f45a18380df66c478fc05b899a1febd7fd3ca666b93c8";
            };

            meta = {
              description = ''Fancy HTTP client for Elixir, based on
                            ibrowse.'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/myfreeweb/httpotion";
            };
          }
      ) {};

    httpotion_2_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "httpotion";
            version = "2.1.0";
            src = fetchHex {
              pkg = "httpotion";
              version = "2.1.0";
              sha256 =
                "d34f1e82283b6b953f611dc24571aa2586e72e19d3d6632b8e3dba78cf1e3761";
            };

            meta = {
              description = ''Fancy HTTP client for Elixir, based on
                            ibrowse.'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/myfreeweb/httpotion";
            };
          }
      ) {};

    httpotion_2_2_0 = callPackage
      (
        {  buildMix, fetchHex, ibrowse_4_2_2 }:
          buildMix {
            name = "httpotion";
            version = "2.2.0";
            src = fetchHex {
              pkg = "httpotion";
              version = "2.2.0";
              sha256 =
                "b5df0909f1cce248a021a1ba970053dbb59bd2695a188396bfc08b6bd73cbd77";
            };
            beamDeps  = [ ibrowse_4_2_2 ];

            meta = {
              description = ''Fancy HTTP client for Elixir, based on
                            ibrowse.'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/myfreeweb/httpotion";
            };
          }
      ) {};

    httpotion = httpotion_2_2_0;

    httprot_0_1_7 = callPackage
      (
        {  buildMix, fetchHex, socket_0_3_1 }:
          buildMix {
            name = "httprot";
            version = "0.1.7";
            src = fetchHex {
              pkg = "httprot";
              version = "0.1.7";
              sha256 =
                "3cf35411d7b16a9af13af4a569eeac09d3375f05ac86139f3448f87302719999";
            };
            beamDeps  = [ socket_0_3_1 ];

            meta = {
              description = ''HTTP client library'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/httprot";
            };
          }
      ) {};

    httprot = httprot_0_1_7;

    huami_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "huami";
            version = "0.0.1";
            src = fetchHex {
              pkg = "huami";
              version = "0.0.1";
              sha256 =
                "c12f38e24e7b085422e5f57c991792cd5045bd083574b1cca0458d8f2dfae40d";
            };

            meta = {
              description = ''A CLI version of flower password writing in
                            Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yesmeck/huami.ex";
            };
          }
      ) {};

    huami = huami_0_0_1;

    huex_0_5_0 = callPackage
      (
        {  buildMix, fetchHex, json_0_3_3, httpoison_0_8_1 }:
          buildMix {
            name = "huex";
            version = "0.5.0";
            src = fetchHex {
              pkg = "huex";
              version = "0.5.0";
              sha256 =
                "e5fe37fdc4299567922697516df8ade2f64d2c1573dc9a253e5037f66576858f";
            };
            beamDeps  = [ json_0_3_3 httpoison_0_8_1 ];

            meta = {
              description = ''Elixir client for Philips Hue connected light
                            bulbs'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xavier/huex";
            };
          }
      ) {};

    huex = huex_0_5_0;

    hufflehoff_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "hufflehoff";
            version = "0.0.1";
            src = fetchHex {
              pkg = "hufflehoff";
              version = "0.0.1";
              sha256 =
                "f10c6ffceb3b6d161ff5aa4dfeb8fe77affabf073f0bc7059d8296a4256093f2";
            };

            meta = {
              description = ''A Huffman encoder/decoder for HTTP/2 headers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sideshow/hufflehoff";
            };
          }
      ) {};

    hufflehoff = hufflehoff_0_0_1;

    huffman_1_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "huffman";
            version = "1.1.1";
            src = fetchHex {
              pkg = "huffman";
              version = "1.1.1";
              sha256 =
                "6983b0eebb29e6f7b4e971cf46e04ebcf52f073ca97f7ed29b5c0de68d58c496";
            };

            meta = {
              description = ''Huffman encoding and decoding.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SenecaSystems/huffman";
            };
          }
      ) {};

    huffman = huffman_1_1_1;

    hulaaki_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "hulaaki";
            version = "0.0.2";
            src = fetchHex {
              pkg = "hulaaki";
              version = "0.0.2";
              sha256 =
                "d1bea8de565a4ca49f0e362c37597c3e8744b0323a7e9104cf09ac555e713ebe";
            };

            meta = {
              description = ''An MQTT 3.1.1 client library written in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/suvash/hulaaki";
            };
          }
      ) {};

    hulaaki = hulaaki_0_0_2;

    hydra_0_0_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          porcelain_2_0_1,
          poison_1_5_2,
          plug_1_1_1,
          httpoison_0_8_1,
          cowboy_1_0_4
        }:
          buildMix {
            name = "hydra";
            version = "0.0.1";
            src = fetchHex {
              pkg = "hydra";
              version = "0.0.1";
              sha256 =
                "ea35ec756dfaa0390ba53a0313bb50b924517f746922a98e3489bddf8e066b7d";
            };
            beamDeps  = [
                          porcelain_2_0_1
                          poison_1_5_2
                          plug_1_1_1
                          httpoison_0_8_1
                          cowboy_1_0_4
                        ];

            meta = {
              description = ''A multi-headed beast: API gateway, request cache,
                            and data transformations'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/doomspork/hydra";
            };
          }
      ) {};

    hydra = hydra_0_0_1;

    hypermedia_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "hypermedia";
            version = "0.0.1";
            src = fetchHex {
              pkg = "hypermedia";
              version = "0.0.1";
              sha256 =
                "595c174772c45206f293f61b338105e61d96dba1436b07ed5b3b12eb07842721";
            };

            meta = {
              description = ''A Elixir library for creating HAL/JSON Hypermedia
                            APIs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jurriaan/hypermedia";
            };
          }
      ) {};

    hypermedia = hypermedia_0_0_1;

    hypermock_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, meck_0_8_4 }:
          buildMix {
            name = "hypermock";
            version = "0.0.2";
            src = fetchHex {
              pkg = "hypermock";
              version = "0.0.2";
              sha256 =
                "dbb7ad24f651a3bb99475f39f9b0d6b7e9b3f959d8a80577ea6c803a5b548516";
            };
            beamDeps  = [ meck_0_8_4 ];

            meta = {    };
          }
      ) {};

    hypermock = hypermock_0_0_2;

    iam_role_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, jsone_1_2_0 }:
          buildMix {
            name = "iam_role";
            version = "1.0.0";
            src = fetchHex {
              pkg = "iam_role";
              version = "1.0.0";
              sha256 =
                "acfc5d5c5130a36dfb2b460f790bd9e32bf39274f17333bd65c28d216983761d";
            };
            beamDeps  = [ jsone_1_2_0 ];

            meta = {
              description = ''Application for automatically fetching AWS IAM
                            role security credentials.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsharju/iam_role";
            };
          }
      ) {};

    iam_role = iam_role_1_0_0;

    ibrowse_4_2_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "ibrowse";
            version = "4.2.2";
            src = fetchHex {
              pkg = "ibrowse";
              version = "4.2.2";
              sha256 =
                "b800cb7442bcc852c6832821e9d0a7098ff626e1415bddaeff4596640b31c0ae";
            };

            meta = {
              description = ''Erlang HTTP client application'';
              license = with stdenv.lib.licenses; [ free bsd3 ];
              homepage = "https://github.com/cmullaparthi/ibrowse";
            };
          }
      ) {};

    ibrowse = ibrowse_4_2_2;

    iconv_1_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "iconv";
            version = "1.0.0";
            src = fetchHex {
              pkg = "iconv";
              version = "1.0.0";
              sha256 =
                "2ac0268bf0b392b86dca00b63d90595959ebc3dca6305284045592fa487e7204";
            };
            compilePorts = true;

            meta = {
              description = ''Fast encoding conversion library for Erlang /
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/iconv";
            };
          }
      ) {};

    iconv = iconv_1_0_0;

    identicon_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "identicon";
            version = "0.2.0";
            src = fetchHex {
              pkg = "identicon";
              version = "0.2.0";
              sha256 =
                "38b11bb3ed2c76956fcbf8673be8cbf6570ef8a85d92b51ce45304ed0368d88c";
            };

            meta = {
              description = ''Elixir library for generating 5x5 symmetrical
                            identicons'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/rbishop/identicon";
            };
          }
      ) {};

    identicon = identicon_0_2_0;

    idna_1_0_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "idna";
            version = "1.0.2";
            src = fetchHex {
              pkg = "idna";
              version = "1.0.2";
              sha256 =
                "a5d645e307aa4f67efe31682f720b7eaf431ab148b3d6fb66cbaf6314499610f";
            };

            meta = {
              description = ''A pure Erlang IDNA implementation'';

              homepage = "https://github.com/benoitc/erlang-idna";
            };
          }
      ) {};

    idna_1_0_3 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "idna";
            version = "1.0.3";
            src = fetchHex {
              pkg = "idna";
              version = "1.0.3";
              sha256 =
                "357d489a51112db4f216034406834f9172b3c0ff5a12f83fb28b25ca271541d1";
            };

            meta = {
              description = ''A pure Erlang IDNA implementation'';

              homepage = "https://github.com/benoitc/erlang-idna";
            };
          }
      ) {};

    idna = idna_1_0_3;

    ielixir_0_9_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ielixir";
            version = "0.9.0";
            src = fetchHex {
              pkg = "ielixir";
              version = "0.9.0";
              sha256 =
                "a6cce07a3aeb493bd248f063ba0327e88103b64c0c54657e344dab1c6f568078";
            };

            meta = {
              description = ''Jupyter`s kernel for Elixir programming
                            language'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pprzetacznik/ielixir";
            };
          }
      ) {};

    ielixir = ielixir_0_9_0;

    ifttt_oauth_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, oauth2_0_5_0 }:
          buildMix {
            name = "ifttt_oauth";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ifttt_oauth";
              version = "0.0.1";
              sha256 =
                "9029506687be770891b3fb54d9e39bab9dd0f65a9551c6b335a3b0a60dc3026c";
            };
            beamDeps  = [ oauth2_0_5_0 ];

            meta = {
              longDescription = ''A simple Elixir wrapper around
                                scrogson/oauth2 to retrieve IFTTT Bearer tokens
                                from their mobile api.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nickgal/ifttt_oauth";
            };
          }
      ) {};

    ifttt_oauth = ifttt_oauth_0_0_1;

    imagineer_0_2_1 = callPackage
      (
        {  buildMix, fetchHex, apex_0_3_7 }:
          buildMix {
            name = "imagineer";
            version = "0.2.1";
            src = fetchHex {
              pkg = "imagineer";
              version = "0.2.1";
              sha256 =
                "31a8430b89770fdd6ec9d96a6e3d9ea92296dfc57e98bb812cd376e60f2e70f8";
            };
            beamDeps  = [ apex_0_3_7 ];

            meta = {
              description = ''Image processing in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SenecaSystems/imagineer";
            };
          }
      ) {};

    imagineer = imagineer_0_2_1;

    imgex_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "imgex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "imgex";
              version = "0.1.0";
              sha256 =
                "783e78b0624b87d1431d8acaa790998ac75d8654312e5799eff7b12956246c49";
            };

            meta = {
              description = ''Unofficial client library for generating imgix
                            URLs in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianwalter/imgex";
            };
          }
      ) {};

    imgex = imgex_0_1_0;

    immortal_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "immortal";
            version = "0.2.0";
            src = fetchHex {
              pkg = "immortal";
              version = "0.2.0";
              sha256 =
                "4387bffa9e2c25b8bfed0bf9d80fd918861c6a4098b853138d2398d5b6f24be2";
            };

            meta = {
              description = ''Helpers for fault-tolerant OTP applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/immortal";
            };
          }
      ) {};

    immortal = immortal_0_2_0;

    inaka_aleppo_0_9_9 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "inaka_aleppo";
            version = "0.9.9";
            src = fetchHex {
              pkg = "inaka_aleppo";
              version = "0.9.9";
              sha256 =
                "11c09648e42b5755a437319a12826c17344a162db73dd2880457b0fa3a1ce1ff";
            };

            meta = {
              description = ''Aleppo: ALternative Erlang Pre-ProcessOr'';

              homepage = "https://github.com/inaka/aleppo";
            };
          }
      ) {};

    inaka_aleppo = inaka_aleppo_0_9_9;

    inaka_mixer_0_1_5 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "inaka_mixer";
            version = "0.1.5";
            src = fetchHex {
              pkg = "inaka_mixer";
              version = "0.1.5";
              sha256 =
                "37af35b1c17a94a0cb643cba23cba2ca68d6fe51c3ad8337629d4c3c017cc912";
            };

            meta = {
              description = ''Mix in public functions from external modules'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/mixer";
            };
          }
      ) {};

    inaka_mixer = inaka_mixer_0_1_5;

    inch_ex_0_5_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_0_3 }:
          buildMix {
            name = "inch_ex";
            version = "0.5.1";
            src = fetchHex {
              pkg = "inch_ex";
              version = "0.5.1";
              sha256 =
                "4d0aaefa4928fdc4758118a37dccb5b90805559ada3f652ca157f66ea268ea20";
            };
            beamDeps  = [ poison_1_0_3 ];

            meta = {
              description = ''Provides a Mix task that gives you hints where to
                            improve your inline docs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/inch_ex";
            };
          }
      ) {};

    inch_ex = inch_ex_0_5_1;

    inch_test_0_0_1 = callPackage
      (
        {
          buildMix, fetchHex, inch_ex_0_5_1, ex_doc_0_11_4, earmark_0_2_1
        }:
          buildMix {
            name = "inch_test";
            version = "0.0.1";
            src = fetchHex {
              pkg = "inch_test";
              version = "0.0.1";
              sha256 =
                "41405c11b22fad3f3b49127f881c2c4c79b206c04b8cb77268828380779a374d";
            };
            beamDeps  = [ inch_ex_0_5_1 ex_doc_0_11_4 earmark_0_2_1 ];

            meta = {    };
          }
      ) {};

    inch_test = inch_test_0_0_1;

    indefinite_article_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "indefinite_article";
            version = "0.0.1";
            src = fetchHex {
              pkg = "indefinite_article";
              version = "0.0.1";
              sha256 =
                "cb59d3373c5ff05693f74f445e7807d1fe5c38b9cfa6bcedfd9efedb4a0861ae";
            };

            meta = {
              description = ''Returns you the indefinite article of a string
                            (*a* banana, *an* apple, etc)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Buyapowa/indefinite_article";
            };
          }
      ) {};

    indefinite_article = indefinite_article_0_0_1;

    inet_cidr_1_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "inet_cidr";
            version = "1.0.1";
            src = fetchHex {
              pkg = "inet_cidr";
              version = "1.0.1";
              sha256 =
                "4809be88cf1a436b819acec2b07a33e7ad24beb0cf9b6c8a94217aea7d298d8a";
            };

            meta = {
              longDescription = ''Classless Inter-Domain Routing (CIDR) library
                                for Elixir Compatible with Erlang`s :inet module
                                and support for IPv4 and IPv6'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cobenian/inet_cidr";
            };
          }
      ) {};

    inet_cidr = inet_cidr_1_0_1;

    inflex_0_2_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "inflex";
            version = "0.2.3";
            src = fetchHex {
              pkg = "inflex";
              version = "0.2.3";
              sha256 =
                "1acb28e23bfb8a38e07fbb764a2691a59fce5c499a79fd27e869a43495710e64";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          }
      ) {};

    inflex_0_3_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "inflex";
            version = "0.3.0";
            src = fetchHex {
              pkg = "inflex";
              version = "0.3.0";
              sha256 =
                "2cb9896a2572eb0989d92d7d98653829e079ccb804aa1b98beafff7678275852";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          }
      ) {};

    inflex_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "inflex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "inflex";
              version = "1.0.0";
              sha256 =
                "549ebe94420051cdf845028372d1f89c8fbdd7b5f5ddd51e0619b827b7be6793";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          }
      ) {};

    inflex_1_4_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "inflex";
            version = "1.4.1";
            src = fetchHex {
              pkg = "inflex";
              version = "1.4.1";
              sha256 =
                "d316fecd9db83db97828bbcbdb689f5c412e3aaf658329cf479cad5baa856c92";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          }
      ) {};

    inflex_1_5_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "inflex";
            version = "1.5.0";
            src = fetchHex {
              pkg = "inflex";
              version = "1.5.0";
              sha256 =
                "d48609edc5bb7901b95dcc00c1e38f259e8006904865a028954ccfe9336a3384";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          }
      ) {};

    inflex = inflex_1_5_0;

    ini_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ini";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ini";
              version = "0.0.1";
              sha256 =
                "96b86cf664ca8247cdad166c29251ef4ddc156f16f906bdf2ea1c37831fbf804";
            };

            meta = {
              description = ''Module to parse ini files.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanjohnson320/ini";
            };
          }
      ) {};

    ini = ini_0_0_1;

    inquisitor_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, ecto_2_0_0_beta_0 }:
          buildMix {
            name = "inquisitor";
            version = "0.0.2";
            src = fetchHex {
              pkg = "inquisitor";
              version = "0.0.2";
              sha256 =
                "a4d6ed194db0600bad5a19b4efbdd900a0aa943ad79dc03a9a81aaba7ffd4d3d";
            };
            beamDeps  = [ ecto_2_0_0_beta_0 ];

            meta = {
              description = ''Easily build extendable and composable Ecto
                            queries.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dockyard/inquisitor";
            };
          }
      ) {};

    inquisitor = inquisitor_0_0_2;

    insert_ordered_set_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "insert_ordered_set";
            version = "0.0.1";
            src = fetchHex {
              pkg = "insert_ordered_set";
              version = "0.0.1";
              sha256 =
                "78ebc47d780aa1e8fabce7d4f4d5f3b9c90e1443514ad830b32f7c5184f87634";
            };

            meta = {
              longDescription = ''Provides a data structure with the following
                                properties: 1. Contains unique values. 2. O(1)
                                manipulation operations (e.g. insert, delete) by
                                using an underlying Map. 3. Preserves insertion
                                order when converting to a list. Allows reverse
                                insertion ordering.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/localshred/insert_ordered_set";
            };
          }
      ) {};

    insert_ordered_set = insert_ordered_set_0_0_1;

    insight_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "insight";
            version = "0.0.2";
            src = fetchHex {
              pkg = "insight";
              version = "0.0.2";
              sha256 =
                "0088430e0a2826d7b52313d9c29af67712530b18a21a192d5e134f975f0596fe";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Elixir package for consuming any Insight-powered
                            Bitcoin explorer.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stampery/elixir-insight";
            };
          }
      ) {};

    insight = insight_0_0_2;

    insights_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "insights";
            version = "0.0.2";
            src = fetchHex {
              pkg = "insights";
              version = "0.0.2";
              sha256 =
                "92794ab7ba760a7b17ffac1f98ecff1a848148d15a1d9fabe58b0150767cddbd";
            };

            meta = {
              longDescription = ''Insights is a wrapper for sending and data
                                capture for keen.io or others adapters'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gullitmiranda/insights";
            };
          }
      ) {};

    insights = insights_0_0_2;

    instream_0_9_0 = callPackage
      (
        {
          buildMix, fetchHex, poolboy_1_5_1, poison_1_5_2, hackney_1_4_8
        }:
          buildMix {
            name = "instream";
            version = "0.9.0";
            src = fetchHex {
              pkg = "instream";
              version = "0.9.0";
              sha256 =
                "e0413b68ca4a593ca11179e968c7c5f79d897a2435d5d40def68f6bc59d7a042";
            };
            beamDeps  = [ poolboy_1_5_1 poison_1_5_2 hackney_1_4_8 ];

            meta = {
              description = ''InfluxDB driver for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mneudert/instream";
            };
          }
      ) {};

    instream = instream_0_9_0;

    instrumental_0_1_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "instrumental";
            version = "0.1.3";
            src = fetchHex {
              pkg = "instrumental";
              version = "0.1.3";
              sha256 =
                "26d3c6dcd2b04d716266afa9d12ba193fc1f038d21c67178e50f77ef1671acec";
            };

            meta = {
              description = ''An Elixir client for Instrumental
                            (http://instrumentalapp.com).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/undeadlabs/instrumental-ex";
            };
          }
      ) {};

    instrumental = instrumental_0_1_3;

    intellij_elixir_0_1_2 = callPackage
      (
        {  buildMix, fetchHex, exrm_0_15_1 }:
          buildMix {
            name = "intellij_elixir";
            version = "0.1.2";
            src = fetchHex {
              pkg = "intellij_elixir";
              version = "0.1.2";
              sha256 =
                "023e970e20ef19dbd6e818708c687faf9b47b525b9771bc910a4e48adc101a46";
            };
            beamDeps  = [ exrm_0_15_1 ];

            meta = {
              longDescription = ''IntellijElixir allows intellij-elixir to ask
                                Elixir for the native quoted form of code to
                                check that intellij-elixir`s quoted form
                                matches. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/KronicDeth/intellij_elixir";
            };
          }
      ) {};

    intellij_elixir = intellij_elixir_0_1_2;

    iona_0_2_1 = callPackage
      (
        {  buildMix, fetchHex, porcelain_2_0_1, briefly_0_3_0 }:
          buildMix {
            name = "iona";
            version = "0.2.1";
            src = fetchHex {
              pkg = "iona";
              version = "0.2.1";
              sha256 =
                "6c990a1a3dcf144f26d5ce773b4f4538c53ed259c775818991bd28f516317bd5";
            };
            beamDeps  = [ porcelain_2_0_1 briefly_0_3_0 ];

            meta = {
              description = ''Document generation using LaTeX'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/CargoSense/iona";
            };
          }
      ) {};

    iona = iona_0_2_1;

    iplist_1_0_2 = callPackage
      (
        {  buildMix, fetchHex, earmark_0_2_1, cidr_0_5_0 }:
          buildMix {
            name = "iplist";
            version = "1.0.2";
            src = fetchHex {
              pkg = "iplist";
              version = "1.0.2";
              sha256 =
                "fae5b5accc8b7a7618c2d1fbf94607ce6e79ca3b493da6643dbb1bd92be30bd4";
            };
            beamDeps  = [ earmark_0_2_1 cidr_0_5_0 ];

            meta = {
              description = ''Library and CLI tool to expand IPv4 ranges to
                            lists of IP numbers'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/digitalronin/iplist";
            };
          }
      ) {};

    iplist = iplist_1_0_2;

    is_email_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "is_email";
            version = "0.0.2";
            src = fetchHex {
              pkg = "is_email";
              version = "0.0.2";
              sha256 =
                "fefcf35b6ca506cd7d2e3d1d850b49e9a2545180db46e291845aa9fd54812d82";
            };

            meta = {
              description = ''Loosely check whether a given string is an
                            email'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnotander/is_email";
            };
          }
      ) {};

    is_email = is_email_0_0_2;

    is_up_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, httpotion_2_1_0 }:
          buildMix {
            name = "is_up";
            version = "1.0.0";
            src = fetchHex {
              pkg = "is_up";
              version = "1.0.0";
              sha256 =
                "8811dde26c0142174987941b6395e1934e54c3a88db1d5b19e38b6f794e93c87";
            };
            beamDeps  = [ httpotion_2_1_0 ];

            meta = {
              description = ''Check whether a given url is up.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnotander/is_up";
            };
          }
      ) {};

    is_up = is_up_1_0_0;

    is_url_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "is_url";
            version = "0.0.1";
            src = fetchHex {
              pkg = "is_url";
              version = "0.0.1";
              sha256 =
                "4c3f86302e0c675ece51a247838f64ce88335008035463c8c20b21667399d413";
            };

            meta = {
              description = ''Validate a url'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnotander/is_url";
            };
          }
      ) {};

    is_url = is_url_0_0_1;

    isaac_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "isaac";
            version = "0.0.1";
            src = fetchHex {
              pkg = "isaac";
              version = "0.0.1";
              sha256 =
                "e43c136931b8003def7cf8a9eaa49e9713ab91a76729c667591e0a4c03511fa1";
            };

            meta = {
              longDescription = ''Isaac is an elixir module for the [ISAAC
                                Stream
                                Cipher](http://burtleburtle.net/bob/rand/isaacafa.html)
                                It wraps around https://github.com/arianvp/ISAAC
                                which is a port of the ISAAC stream cipher to
                                platforms which have words bigger than 32 bits.
                                '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/arianvp/elixir-isaac";
            };
          }
      ) {};

    isaac = isaac_0_0_1;

    isbndbex_0_0_1 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1, credo_0_1_10
        }:
          buildMix {
            name = "isbndbex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "isbndbex";
              version = "0.0.1";
              sha256 =
                "565fe2ea413d0ec50d51c166ad1dd5dc840c3cdb01e70467484017aa6b14d1f9";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 credo_0_1_10 ];

            meta = {
              description = ''Elixir wrapper for isbndb.com json api.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rcoedo/isbndbex";
            };
          }
      ) {};

    isbndbex = isbndbex_0_0_1;

    isn_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, postgrex_0_11_1, ecto_2_0_0_beta_0 }:
          buildMix {
            name = "isn";
            version = "1.0.0";
            src = fetchHex {
              pkg = "isn";
              version = "1.0.0";
              sha256 =
                "08fe62a8fa20333f65e750d7e4abe8c2f215994e514e495178fa718b5a4e3673";
            };
            beamDeps  = [ postgrex_0_11_1 ecto_2_0_0_beta_0 ];

            meta = {
              description = ''Ecto types for the postgreSQL isn extension.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Frost/isn";
            };
          }
      ) {};

    isn = isn_1_0_0;

    iso3166_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, floki_0_7_1 }:
          buildMix {
            name = "iso3166";
            version = "0.0.2";
            src = fetchHex {
              pkg = "iso3166";
              version = "0.0.2";
              sha256 =
                "c36a652871f31d4b50b4ebd75e99094a1cf9ad7d3df9ddd467b94c2b4dbf9466";
            };
            beamDeps  = [ poison_1_5_2 floki_0_7_1 ];

            meta = {
              longDescription = ''A library that provides a list of ISO3166
                                country names, two letter abbreviations, three
                                letter abbreviations, and functions for
                                converting between them.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joelpm/iso3166ex";
            };
          }
      ) {};

    iso3166 = iso3166_0_0_2;

    ja_serializer_0_7_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          scrivener_1_1_2,
          poison_1_5_2,
          plug_1_1_1,
          inflex_1_5_0,
          ecto_2_0_0_beta_0
        }:
          buildMix {
            name = "ja_serializer";
            version = "0.7.1";
            src = fetchHex {
              pkg = "ja_serializer";
              version = "0.7.1";
              sha256 =
                "3f85203b1dd2e1c501ac41d45e9213a659e67c00ebacbe1b3e5b042c50f226ea";
            };
            beamDeps  = [
                          scrivener_1_1_2
                          poison_1_5_2
                          plug_1_1_1
                          inflex_1_5_0
                          ecto_2_0_0_beta_0
                        ];

            meta = {
              longDescription = ''A serialization library implementing the
                                jsonapi.org 1.0 spec suitable for use building
                                JSON APIs in Pheonix, Relax, or any other plug
                                based framework/library.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/AgilionApps/ja_serializer";
            };
          }
      ) {};

    ja_serializer = ja_serializer_0_7_1;

    janrain_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1 }:
          buildMix {
            name = "janrain";
            version = "0.0.1";
            src = fetchHex {
              pkg = "janrain";
              version = "0.0.1";
              sha256 =
                "35299ee088dfd5647e7a5cd129d5011f2d6319fe53045b2a8ce3ddf70792cc78";
            };
            beamDeps  = [ httpoison_0_8_1 ];

            meta = {
              longDescription = ''A small library to help with Janrain logins.
                                Probably most useful when used in conjuction
                                with Phoenix and Guardian.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rickr/janrain";
            };
          }
      ) {};

    janrain = janrain_0_0_1;

    japanese_holiday_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, timex_0_12_9 }:
          buildMix {
            name = "japanese_holiday";
            version = "0.0.2";
            src = fetchHex {
              pkg = "japanese_holiday";
              version = "0.0.2";
              sha256 =
                "3363e2062dbdad48de88d092c549e8b55eecc2d86a61168578e54e6ba9065eaf";
            };
            beamDeps  = [ timex_0_12_9 ];

            meta = {
              description = ''An elixir library for japanese holiday '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/japanese_holiday";
            };
          }
      ) {};

    japanese_holiday = japanese_holiday_0_0_2;

    jazz_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "jazz";
            version = "0.1.1";
            src = fetchHex {
              pkg = "jazz";
              version = "0.1.1";
              sha256 =
                "e348e93a07c449789d17ddddd11cba080ef43132affdd1a287765f3e307ecd1c";
            };

            meta = {
              description = ''JSON handling library for Elixir.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/jazz";
            };
          }
      ) {};

    jazz_0_2_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "jazz";
            version = "0.2.1";
            src = fetchHex {
              pkg = "jazz";
              version = "0.2.1";
              sha256 =
                "1c239947305efba0f3e48786a815fd512d49af4acf61914c03ebb18cc79c0477";
            };

            meta = {
              description = ''JSON handling library for Elixir.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/jazz";
            };
          }
      ) {};

    jazz = jazz_0_2_1;

    jc_1_0_4 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "jc";
            version = "1.0.4";
            src = fetchHex {
              pkg = "jc";
              version = "1.0.4";
              sha256 =
                "8bcfe202084109fc80fcf521e630466fc53cbb909aff4283bed43252664023df";
            };

            meta = {
              description = ''A simple, distributed, in-memory caching
                            system'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jr0senblum/jc";
            };
          }
      ) {};

    jc = jc_1_0_4;

    jequalson_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "jequalson";
            version = "0.1.1";
            src = fetchHex {
              pkg = "jequalson";
              version = "0.1.1";
              sha256 =
                "5ed0a54b8aaa457cb441b3baafc508d8be4fc90db29a0cc27980eeeb65db18ac";
            };

            meta = {
              description = ''Helpers for testing JSON responses.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dm1try/jequalson";
            };
          }
      ) {};

    jequalson = jequalson_0_1_1;

    jesse_0_1_3 = callPackage
      (
        {  buildRebar3, fetchHex, jsx_2_8_0 }:
          buildRebar3 {
            name = "jesse";
            version = "0.1.3";
            src = fetchHex {
              pkg = "jesse";
              version = "0.1.3";
              sha256 =
                "679702baf154d8e078c60b8eb4f2b7f53304e24deea03b32cbff350772afba4d";
            };

            beamDeps  = [ jsx_2_8_0 ];

            meta = {
              description = ''jesse'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/for-GET/jesse";
            };
          }
      ) {};

    jesse = jesse_0_1_3;

    jiffy_0_14_7 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "jiffy";
            version = "0.14.7";
            src = fetchHex {
              pkg = "jiffy";
              version = "0.14.7";
              sha256 =
                "2b3b0f7976dae9c8266036e0d7e0398b64ac5207e3beee4c57896e44b2c17e97";
            };
            compilePorts = true;

            meta = {
              description = ''JSON Decoder/Encoder.'';
              license = with stdenv.lib.licenses; [ mit bsd3 ];
              homepage = "https://github.com/davisp/jiffy";
            };
          }
      ) {};

    jiffy = jiffy_0_14_7;

    jira_0_0_8 = callPackage
      (
        {  buildMix, fetchHex, poison_2_1_0, httpoison_0_8_1 }:
          buildMix {
            name = "jira";
            version = "0.0.8";
            src = fetchHex {
              pkg = "jira";
              version = "0.0.8";
              sha256 =
                "71c19ef23ea7351a2dc7b8f14d0c5794ff00382fa43a88a2235ec9c1741a73cb";
            };
            beamDeps  = [ poison_2_1_0 httpoison_0_8_1 ];

            meta = {
              description = ''An Elixir client library for JIRA + JIRA Agile /
                            Greenhopper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffweiss/jira";
            };
          }
      ) {};

    jira = jira_0_0_8;

    jobspool_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, uuid_1_1_3 }:
          buildMix {
            name = "jobspool";
            version = "0.1.0";
            src = fetchHex {
              pkg = "jobspool";
              version = "0.1.0";
              sha256 =
                "f4ba59374f844fe8ac018606748b120b7860c0f568364514d1dc87eb42829aad";
            };
            beamDeps  = [ uuid_1_1_3 ];

            meta = {
              description = ''Simple Elixir jobs pool'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/flupke/exjobspool";
            };
          }
      ) {};

    jobspool = jobspool_0_1_0;

    joken_0_13_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "joken";
            version = "0.13.1";
            src = fetchHex {
              pkg = "joken";
              version = "0.13.1";
              sha256 =
                "f9fd7803403651c891332aabc1f97ca87ad8f01be1262d5a9a51da7987e08163";
            };

            meta = {
              description = ''JWT Library for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bryanjos/joken";
            };
          }
      ) {};

    joken_0_16_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, plug_1_1_1, jose_1_6_1 }:
          buildMix {
            name = "joken";
            version = "0.16.1";
            src = fetchHex {
              pkg = "joken";
              version = "0.16.1";
              sha256 =
                "a804bfd350f61688f6ce8d9898bc17fd4b59990c054debeea44234d53048d93d";
            };
            beamDeps  = [ poison_1_5_2 plug_1_1_1 jose_1_6_1 ];

            meta = {
              description = ''JWT Library for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bryanjos/joken";
            };
          }
      ) {};

    joken_1_1_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_0_3, plug_1_1_1, jose_1_6_1 }:
          buildMix {
            name = "joken";
            version = "1.1.0";
            src = fetchHex {
              pkg = "joken";
              version = "1.1.0";
              sha256 =
                "05e3ff0799b97b8513a5a17a8f57b1d7ee250f32561e559c997c0ecbea462287";
            };
            beamDeps  = [ poison_1_0_3 plug_1_1_1 jose_1_6_1 ];

            meta = {
              description = ''JWT Library for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bryanjos/joken";
            };
          }
      ) {};

    joken = joken_1_1_0;

    jolt_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "jolt";
            version = "0.1.0";
            src = fetchHex {
              pkg = "jolt";
              version = "0.1.0";
              sha256 =
                "922498b234a1b0a813255d3abf5caa64a9afdc41eb4d8d71f87d71c41fe792e8";
            };
            beamDeps  = [ poison_1_5_2 plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              longDescription = ''A full REST JSON API with zero coding,
                                powered by Elixir. It is intended to be used as
                                a command-line tool (just run mix escript.build
                                first).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/clarkware/jolt";
            };
          }
      ) {};

    jolt = jolt_0_1_0;

    jorel_mix_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "jorel_mix";
            version = "0.0.1";
            src = fetchHex {
              pkg = "jorel_mix";
              version = "0.0.1";
              sha256 =
                "be990099dc7d13dd22e741d96dd3282ba9096f9e132c047ebc0f134b3d470461";
            };

            meta = {
              description = ''Just anOther RELease assembler'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/emedia-project/jorel_mix";
            };
          }
      ) {};

    jorel_mix = jorel_mix_0_0_1;

    jose_1_6_1 = callPackage
      (
        {  buildRebar3, fetchHex, base64url_0_0_1 }:
          buildRebar3 {
            name = "jose";
            version = "1.6.1";
            src = fetchHex {
              pkg = "jose";
              version = "1.6.1";
              sha256 =
                "36f1875790af6a1353a737fa13c6ba1f5356f1bd569341ac035eeaa22be23ac9";
            };

            beamDeps  = [ base64url_0_0_1 ];

            meta = {
              description = ''JSON Object Signing and Encryption (JOSE) for
                            Erlang and Elixir.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/potatosalad/erlang-jose";
            };
          }
      ) {};

    jose = jose_1_6_1;

    jsex_2_0_0 = callPackage
      (
        {  buildMix, fetchHex, jsx_2_8_0 }:
          buildMix {
            name = "jsex";
            version = "2.0.0";
            src = fetchHex {
              pkg = "jsex";
              version = "2.0.0";
              sha256 =
                "98c1501645e31efdbcbb6172983d4deb1335de993966197e6a4343492fa7d872";
            };
            beamDeps  = [ jsx_2_8_0 ];

            meta = {
              description = ''json for elixir '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsex";
            };
          }
      ) {};

    jsex = jsex_2_0_0;

    json_0_3_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "json";
            version = "0.3.3";
            src = fetchHex {
              pkg = "json";
              version = "0.3.3";
              sha256 =
                "d1986548847189b51f1efb65d196e6ab9f2e88a6878a363aec0e3c77e2550616";
            };

            meta = {
              description = ''Native Elixir library for JSON encoding and
                            decoding'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/cblage/elixir-json";
            };
          }
      ) {};

    json = json_0_3_3;

    json_diff_ex_0_5_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "json_diff_ex";
            version = "0.5.0";
            src = fetchHex {
              pkg = "json_diff_ex";
              version = "0.5.0";
              sha256 =
                "314fe606c76dea0c5b70ca918f5dd75a89456c6330596d707bbbf70c800352c9";
            };

            meta = {
              description = ''Diff and patch for JSON in Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/olafura/json_diff_ex";
            };
          }
      ) {};

    json_diff_ex = json_diff_ex_0_5_0;

    json_logger_0_5_1 = callPackage
      (
        {  buildMix, fetchHex, json_0_3_3 }:
          buildMix {
            name = "json_logger";
            version = "0.5.1";
            src = fetchHex {
              pkg = "json_logger";
              version = "0.5.1";
              sha256 =
                "08b4868fe8396fc27fc2d248a8aedac72f8ca82a671a163cc575bfa3e8a2be93";
            };
            beamDeps  = [ json_0_3_3 ];

            meta = {
              description = ''A simple library for logging with JSON, best
                            suited with Logstash.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/LeeroyDing/json_logger";
            };
          }
      ) {};

    json_logger = json_logger_0_5_1;

    json_pointer_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "json_pointer";
            version = "0.0.2";
            src = fetchHex {
              pkg = "json_pointer";
              version = "0.0.2";
              sha256 =
                "150b37bc4ff689758f17aee180fbf8f7226c3eeff7d28a782e6f0a74f859417e";
            };

            meta = {
              longDescription = ''Implementation of RFC 6901 which defines a
                                string syntax for identifying a specific value
                                within a JSON document'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xavier/json_pointer";
            };
          }
      ) {};

    json_pointer = json_pointer_0_0_2;

    json_web_token_0_2_4 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2 }:
          buildMix {
            name = "json_web_token";
            version = "0.2.4";
            src = fetchHex {
              pkg = "json_web_token";
              version = "0.2.4";
              sha256 =
                "49d11e61cf31e212ccd80bcffe1b9c911144c2399ec062a514394376d037fa8a";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''Elixir implementation of the JSON Web Token
                            (JWT), RFC 7519'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/garyf/json_web_token_ex";
            };
          }
      ) {};

    json_web_token = json_web_token_0_2_4;

    jsonapi_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "jsonapi";
            version = "0.1.0";
            src = fetchHex {
              pkg = "jsonapi";
              version = "0.1.0";
              sha256 =
                "b4c7d4797a680f23ae8dae666b4e71573f0bb3330223ebb53985e754ade265c8";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              longDescription = ''Fully functional JSONAPI V1 Serializer as
                                well as a QueryParser for Plug bases projects
                                and applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeregrine/jsonapi";
            };
          }
      ) {};

    jsonapi = jsonapi_0_1_0;

    jsone_1_2_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "jsone";
            version = "1.2.0";
            src = fetchHex {
              pkg = "jsone";
              version = "1.2.0";
              sha256 =
                "a60e74284d3a923cde65c00a39dd4542fd7da7c22e8385c0378ad419c54b2e08";
            };

            meta = {
              description = ''Erlang JSON Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/jsone";
            };
          }
      ) {};

    jsone = jsone_1_2_0;

    jsx_1_4_5 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "jsx";
            version = "1.4.5";
            src = fetchHex {
              pkg = "jsx";
              version = "1.4.5";
              sha256 =
                "ff5115611c5dd789cebe3addc07d18b86340f701c52ad063caba6fe8da3a489b";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          }
      ) {};

    jsx_2_4_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "jsx";
            version = "2.4.0";
            src = fetchHex {
              pkg = "jsx";
              version = "2.4.0";
              sha256 =
                "f9044993bfc94371a7757656ab4b9ba2daaad3ddc97df37c2368875eea049b19";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          }
      ) {};

    jsx_2_6_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "jsx";
            version = "2.6.1";
            src = fetchHex {
              pkg = "jsx";
              version = "2.6.1";
              sha256 =
                "5d0700bce9b5ef7c4bd5dd1004c9cc80d20a60f1bd02f8792fc3b3b2da90db59";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          }
      ) {};

    jsx_2_6_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "jsx";
            version = "2.6.2";
            src = fetchHex {
              pkg = "jsx";
              version = "2.6.2";
              sha256 =
                "6bfccb6461cc3c7d5cc63f3e69ffeb2f1f8de50eca5980065311c056a69a907f";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          }
      ) {};

    jsx_2_7_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "jsx";
            version = "2.7.1";
            src = fetchHex {
              pkg = "jsx";
              version = "2.7.1";
              sha256 =
                "52d0e8bda0c8624bc59c3119236eb49bb66289702ea3d59ad76fd2a56cdf9089";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          }
      ) {};

    jsx_2_8_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "jsx";
            version = "2.8.0";
            src = fetchHex {
              pkg = "jsx";
              version = "2.8.0";
              sha256 =
                "a8ba15d5bac2c48b2be1224a0542ad794538d79e2cc16841a4e24ca75f0f8378";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          }
      ) {};

    jsx = jsx_2_8_0;

    jsxd_0_1_10 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "jsxd";
            version = "0.1.10";
            src = fetchHex {
              pkg = "jsxd";
              version = "0.1.10";
              sha256 =
                "f71a8238f08a1dee130e8959ff5343524891fa6531392667a5b911cead5f5082";
            };

            meta = {
              description = ''jsx data structire traversing and modification
                            library.'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/Licenser/jsxd";
            };
          }
      ) {};

    jsxd = jsxd_0_1_10;

    jsxn_0_2_1 = callPackage
      (
        {  buildRebar3, fetchHex, jsx_2_8_0 }:
          buildRebar3 {
            name = "jsxn";
            version = "0.2.1";
            src = fetchHex {
              pkg = "jsxn";
              version = "0.2.1";
              sha256 =
                "122a52538dc34ddf4a6efcaeb9744fc948d132f3608e96f109a0d1a054fd1f57";
            };

            beamDeps  = [ jsx_2_8_0 ];

            meta = {
              description = ''jsx but with maps'';

              homepage = "https://github.com/talentdeficit/jsxn";
            };
          }
      ) {};

    jsxn = jsxn_0_2_1;

    junit_formatter_0_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "junit_formatter";
            version = "0.1.2";
            src = fetchHex {
              pkg = "junit_formatter";
              version = "0.1.2";
              sha256 =
                "1bfd13c71b116541b46ca1b9c07fb82483da9acaaad706e277e4b08e2b198316";
            };

            meta = {
              longDescription = ''An ExUnit.Formatter that produces an XML
                                report of the tests run in the project _build
                                dir. It is a good fit with Jenkins test
                                reporting plugin, for example.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/victorolinasc/junit-formatter";
            };
          }
      ) {};

    junit_formatter = junit_formatter_0_1_2;

    jwalk_1_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "jwalk";
            version = "1.1.0";
            src = fetchHex {
              pkg = "jwalk";
              version = "1.1.0";
              sha256 =
                "10c150910ba3539583887cb2b5c3f70d602138471e6f6b5c22498aa18ed654e1";
            };

            meta = {
              longDescription = ''Helper module for working with Erlang
                                representations of JSON, handling eep-18, map,
                                mochijson-style and proplists representations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jr0senblum/jwalk";
            };
          }
      ) {};

    jwalk = jwalk_1_1_0;

    jwt_0_1_1 = callPackage
      (
        {  buildRebar3, fetchHex, jsx_2_8_0, base64url_0_0_1 }:
          buildRebar3 {
            name = "jwt";
            version = "0.1.1";
            src = fetchHex {
              pkg = "jwt";
              version = "0.1.1";
              sha256 =
                "abcff4a2a42af2b7b7bdf55eeb2b73ce2e3bef760750004e74bc5835d64d2188";
            };

            beamDeps  = [ jsx_2_8_0 base64url_0_0_1 ];

            meta = {
              description = ''Erlang JWT library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/jwt";
            };
          }
      ) {};

    jwt = jwt_0_1_1;

    jwt_claims_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, json_web_token_0_2_4 }:
          buildMix {
            name = "jwt_claims";
            version = "0.0.3";
            src = fetchHex {
              pkg = "jwt_claims";
              version = "0.0.3";
              sha256 =
                "baf94583907a4d774079a8a98c13c0cf5d306ee6211e805f156523a20658e230";
            };
            beamDeps  = [ json_web_token_0_2_4 ];

            meta = {
              description = ''Elixir implementation of JWT registered claims,
                            RFC 7519'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/garyf/jwt_claims_ex";
            };
          }
      ) {};

    jwt_claims = jwt_claims_0_0_3;

    jwtex_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_3_1 }:
          buildMix {
            name = "jwtex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "jwtex";
              version = "0.0.1";
              sha256 =
                "5b8b826e8543e323f62a0e8cb2fb5714d8e7110ecce97419cd0a4a656fa411cf";
            };
            beamDeps  = [ poison_1_3_1 ];

            meta = {
              description = ''JWT decoding library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/mschae/jwtex";
            };
          }
      ) {};

    jwtex = jwtex_0_0_1;

    kafka_ex_0_4_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "kafka_ex";
            version = "0.4.0";
            src = fetchHex {
              pkg = "kafka_ex";
              version = "0.4.0";
              sha256 =
                "93355c6acb4d11b000ced332da9ac91dad1ed0468e9f240b040869a0cde5d71a";
            };

            meta = {
              description = ''Kafka client for Elixir/Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kafkaex/kafka_ex";
            };
          }
      ) {};

    kafka_ex = kafka_ex_0_4_0;

    kaguya_0_3_7 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "kaguya";
            version = "0.3.7";
            src = fetchHex {
              pkg = "kaguya";
              version = "0.3.7";
              sha256 =
                "eced5d988fb5bc868e09402c2dd1f6cc67e60d9f07af2d263aada831021f0d84";
            };

            meta = {
              longDescription = ''A small, powerful, and modular IRC bot
                                framework. Using a flexible macro based routing
                                system, modules can be easily created and
                                used.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/Luminarys/Kaguya";
            };
          }
      ) {};

    kaguya = kaguya_0_3_7;

    kalecto_0_3_3 = callPackage
      (
        {  buildRebar3, fetchHex, kalends_0_6_5, ecto_0_16_0 }:
          buildRebar3 {
            name = "kalecto";
            version = "0.3.3";
            src = fetchHex {
              pkg = "kalecto";
              version = "0.3.3";
              sha256 =
                "c83d417718f626eb43ffa5527ea25fa5348f6f24f7930d27db7556759094eb1b";
            };

            beamDeps  = [ kalends_0_6_5 ecto_0_16_0 ];

            meta = {
              longDescription = ''Library for using Kalends with Ecto. This
                                lets you save Kalends types in Ecto and work
                                with date-times in multiple timezones. '';

              homepage = "https://github.com/lau/kalecto";
            };
          }
      ) {};

    kalecto = kalecto_0_3_3;

    kalends_0_6_5 = callPackage
      (
        {  buildRebar3, fetchHex, tzdata_0_1_8 }:
          buildRebar3 {
            name = "kalends";
            version = "0.6.5";
            src = fetchHex {
              pkg = "kalends";
              version = "0.6.5";
              sha256 =
                "b16621edbccdbe5d3f76efe03dab59292f3782d0d7e29bbe2de9943e49968fe2";
            };

            beamDeps  = [ tzdata_0_1_8 ];

            meta = {
              longDescription = ''Kalends is a datetime library in pure Elixir
                                with up-to-date timezone support using the Olson
                                database. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/kalends";
            };
          }
      ) {};

    kalends = kalends_0_6_5;

    kane_0_0_5 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1, goth_0_0_3
        }:
          buildMix {
            name = "kane";
            version = "0.0.5";
            src = fetchHex {
              pkg = "kane";
              version = "0.0.5";
              sha256 =
                "e4865178b16793d4f947dee2f21448b3639fad2b1edeb515df67707cf30dc2c3";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 goth_0_0_3 ];

            meta = {
              longDescription = ''A library for interacting with Google Cloud
                                Pub/Sub (PubSub). Supports both publication and
                                pull subscription'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peburrows/kane";
            };
          }
      ) {};

    kane = kane_0_0_5;

    katipo_0_2_4 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          uri_0_1_0,
          quintana_0_2_0,
          gproc_0_5_0,
          cowlib_1_0_0
        }:
          buildRebar3 {
            name = "katipo";
            version = "0.2.4";
            src = fetchHex {
              pkg = "katipo";
              version = "0.2.4";
              sha256 =
                "7ad315785b1e43a78c9d5912469401ab5fa396182acf1ab40feea39539a53d1e";
            };
            compilePorts = true;
            beamDeps  = [ uri_0_1_0 quintana_0_2_0 gproc_0_5_0 cowlib_1_0_0
                      ];

            meta = {
              description = ''HTTP client based on libcurl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/puzza007/katipo";
            };
          }
      ) {};

    katipo = katipo_0_2_4;

    keccakf1600_2_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "keccakf1600";
            version = "2.0.0";
            src = fetchHex {
              pkg = "keccakf1600";
              version = "2.0.0";
              sha256 =
                "bf381475f5d1daf1df2f46bf24d1d4b91debb638b5a6b014cdce40e32eee8f07";
            };
            compilePorts = true;

            meta = {
              description = ''Keccak-f[1600] asynchronous port driver'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/potatosalad/erlang-keccakf1600";
            };
          }
      ) {};

    keccakf1600 = keccakf1600_2_0_0;

    keelless_0_1_0 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1, hackney_1_4_4
        }:
          buildMix {
            name = "keelless";
            version = "0.1.0";
            src = fetchHex {
              pkg = "keelless";
              version = "0.1.0";
              sha256 =
                "b038600bb0520975a052fe6852a2dcd0dbd1069309134c617519079037d6927e";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 hackney_1_4_4 ];

            meta = {
              description = ''Keen IO API for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hpyhacking/keelless";
            };
          }
      ) {};

    keelless = keelless_0_1_0;

    keenex_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_3_1, httpotion_1_0_0 }:
          buildMix {
            name = "keenex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "keenex";
              version = "0.2.0";
              sha256 =
                "5f66d942fe7066bec625985779d7e69647462e586a704e449cc7229ea752ccb9";
            };
            beamDeps  = [ poison_1_3_1 httpotion_1_0_0 ];

            meta = {
              description = ''Keen.io API Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/keenex";
            };
          }
      ) {};

    keenex = keenex_0_2_0;

    key2value_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "key2value";
            version = "1.5.1";
            src = fetchHex {
              pkg = "key2value";
              version = "1.5.1";
              sha256 =
                "2a40464b9f8ef62e8828d869ac8d2bf9135b4956d29ba4eb044e8522b2d35ffa";
            };

            meta = {
              description = ''Erlang 2-way Map'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/okeuday/key2value";
            };
          }
      ) {};

    key2value = key2value_1_5_1;

    keys1value_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "keys1value";
            version = "1.5.1";
            src = fetchHex {
              pkg = "keys1value";
              version = "1.5.1";
              sha256 =
                "2385132be0903c170fe21e54a0c3e746a604777b66ee458bb6e5f25650d3354f";
            };

            meta = {
              description = ''Erlang Set Associative Map For Key Lists'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/okeuday/keys1value";
            };
          }
      ) {};

    keys1value = keys1value_1_5_1;

    kindred_0_0_1 = callPackage
      (
        {
          buildMix, fetchHex, poison_2_0_1, httpoison_0_8_1, ex_rated_1_2_1
        }:
          buildMix {
            name = "kindred";
            version = "0.0.1";
            src = fetchHex {
              pkg = "kindred";
              version = "0.0.1";
              sha256 =
                "48b229e007f3d6d06e38f49c85598c20fb6e76d92afd441a86fdee931c2f5fc2";
            };
            beamDeps  = [ poison_2_0_1 httpoison_0_8_1 ex_rated_1_2_1 ];

            meta = {
              description = ''League of Legends API client written in Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/matthewferderber/kindred";
            };
          }
      ) {};

    kindred = kindred_0_0_1;

    kitsune_0_5_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2 }:
          buildMix {
            name = "kitsune";
            version = "0.5.2";
            src = fetchHex {
              pkg = "kitsune";
              version = "0.5.2";
              sha256 =
                "f8d48f1f3abe89aa9df7b37bc59c9bfa5932142d076d5322f97e92ec732bf993";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              longDescription = ''Kitsune is an Elixir library for transforming
                                the representation of data inspired by
                                Representable.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edubkendo/kitsune";
            };
          }
      ) {};

    kitsune = kitsune_0_5_2;

    kovacs_0_9_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "kovacs";
            version = "0.9.2";
            src = fetchHex {
              pkg = "kovacs";
              version = "0.9.2";
              sha256 =
                "0d6fc6830f0d22e793b2472d8808e86384596e26b7bdd17becba3af7f0a8495e";
            };

            meta = {
              longDescription = ''Kovacs - A simple ExUnit test runner It will
                                monitor the file system and run test files when
                                it detects changes. '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/antp/kovacs";
            };
          }
      ) {};

    kovacs = kovacs_0_9_2;

    kubex_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "kubex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "kubex";
              version = "0.1.1";
              sha256 =
                "b0bd22246731b1c4d4d7f832cd0015fd6586022c779fb6672f45a648da7dcf79";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Kubernetes integration for and in pure Elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/ingerslevio/kubex";
            };
          }
      ) {};

    kubex = kubex_0_1_1;

    kvs_2_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "kvs";
            version = "2.1.0";
            src = fetchHex {
              pkg = "kvs";
              version = "2.1.0";
              sha256 =
                "c06382e4dbe8a7dc58201187ddd303e5b1e546713da3a3813863fe62e63dc4c7";
            };

            meta = {
              description = ''Erlang Abstract Database'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/kvs";
            };
          }
      ) {};

    kvs = kvs_2_1_0;

    kwfuns_0_0_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "kwfuns";
            version = "0.0.4";
            src = fetchHex {
              pkg = "kwfuns";
              version = "0.0.4";
              sha256 =
                "ce1ac52be8d3c3cb7c77fc339eaa877a190899e889bf97cdb92e01922fd52b54";
            };

            meta = {
              longDescription = ''Macros to create functions with syntax based
                                keyword parameters with default values defkw
                                make_list_elem( parent, text, spaced: false,
                                type: :ul ) do ... end translates to def
                                make_list_elem( parent, text, keywords \ [] ) do
                                some_code_with( spaces, typed) end'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/RobertDober/lab42_defkw";
            };
          }
      ) {};

    kwfuns = kwfuns_0_0_4;

    lager_2_1_1 = callPackage
      (
        {  buildRebar3, fetchHex, goldrush_0_1_7 }:
          buildRebar3 {
            name = "lager";
            version = "2.1.1";
            src = fetchHex {
              pkg = "lager";
              version = "2.1.1";
              sha256 =
                "5eb1c17ff0f8692285b7648ef5d827d492b8d7554da782afc300ebb4861d5aba";
            };

            beamDeps  = [ goldrush_0_1_7 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/lager";
            };
          }
      ) {};

    lager_3_0_1 = callPackage
      (
        {  buildRebar3, fetchHex, goldrush_0_1_7 }:
          buildRebar3 {
            name = "lager";
            version = "3.0.1";
            src = fetchHex {
              pkg = "lager";
              version = "3.0.1";
              sha256 =
                "d32c9233105b72dc5c1f6a8fe9a33cc205ecccc359c4449950060cee5a329e35";
            };

            beamDeps  = [ goldrush_0_1_7 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/lager";
            };
          }
      ) {};

    lager_3_0_2 = callPackage
      (
        {  buildRebar3, fetchHex, goldrush_0_1_7 }:
          buildRebar3 {
            name = "lager";
            version = "3.0.2";
            src = fetchHex {
              pkg = "lager";
              version = "3.0.2";
              sha256 =
                "527f3b233e01b6cb68780c14ef675ed08ec02247dc029cacecbb56c78dfca100";
            };

            beamDeps  = [ goldrush_0_1_7 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/lager";
            };
          }
      ) {};

    lager = lager_3_0_2;

    lager_graylog_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex, lager_3_0_2 }:
          buildRebar3 {
            name = "lager_graylog";
            version = "0.1.0";
            src = fetchHex {
              pkg = "lager_graylog";
              version = "0.1.0";
              sha256 =
                "539ddc1b5a4280bf5ef8c377cfa037830a2fbe989fd378af10f5355c502fc8d9";
            };

            beamDeps  = [ lager_3_0_2 ];

            meta = {
              description = ''An Erlang lager_graylog library'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/esl/lager_graylog";
            };
          }
      ) {};

    lager_graylog = lager_graylog_0_1_0;

    lager_logger_1_0_2 = callPackage
      (
        {  buildMix, fetchHex, lager_3_0_2 }:
          buildMix {
            name = "lager_logger";
            version = "1.0.2";
            src = fetchHex {
              pkg = "lager_logger";
              version = "1.0.2";
              sha256 =
                "28e13b1a5d43acefdf7f49d219ecb268dd934da448d2e1d4c3f74378fdea9e89";
            };
            beamDeps  = [ lager_3_0_2 ];

            meta = {
              longDescription = ''LagerLogger is a lager backend that forwards
                                all log messages to Elixir`s Logger.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/PSPDFKit-labs/lager_logger";
            };
          }
      ) {};

    lager_logger = lager_logger_1_0_2;

    lager_logstash_backend_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex, lager_3_0_2, jsx_2_6_1 }:
          buildRebar3 {
            name = "lager_logstash_backend";
            version = "0.1.0";
            src = fetchHex {
              pkg = "lager_logstash_backend";
              version = "0.1.0";
              sha256 =
                "9d729050a9cae2bb965d6211d428a79838e48f8acac394f24c48e3d47e6758c9";
            };

            beamDeps  = [ lager_3_0_2 jsx_2_6_1 ];

            meta = {
              description = ''Lager Logstash Logging Backend'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/inaka/lager_logstash_backend.git";
            };
          }
      ) {};

    lager_logstash_backend = lager_logstash_backend_0_1_0;

    lager_watchdog_0_1_10 = callPackage
      (
        {  buildRebar3, fetchHex, lager_2_1_1 }:
          buildRebar3 {
            name = "lager_watchdog";
            version = "0.1.10";
            src = fetchHex {
              pkg = "lager_watchdog";
              version = "0.1.10";
              sha256 =
                "ac2a5f7d519fa69fff3d41c5c19419552085346f98de4378ca38efa81c322a94";
            };

            beamDeps  = [ lager_2_1_1 ];

            meta = {
              description = ''lager provider to send data to watchdog.'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/lager_watchdog";
            };
          }
      ) {};

    lager_watchdog = lager_watchdog_0_1_10;

    lasp_0_0_4 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "lasp";
            version = "0.0.4";
            src = fetchHex {
              pkg = "lasp";
              version = "0.0.4";
              sha256 =
                "d119098a34bbd0331ab1cb22e0f1f1d25da35132f8a61ecdc0ed5c0135c84942";
            };

            meta = {
              description = ''Declarative, distributed, eventually consistent
                            compuations.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/lasp-lang/lasp";
            };
          }
      ) {};

    lasp = lasp_0_0_4;

    lasse_1_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "lasse";
            version = "1.1.0";
            src = fetchHex {
              pkg = "lasse";
              version = "1.1.0";
              sha256 =
                "53e70ea9031f7583331a9f9bdbb29da933e591e5c4cce521b4bf85c68e7f3385";
            };

            meta = {
              description = ''Lasse: Server-Sent Event handler for Cowboy.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/lasse";
            };
          }
      ) {};

    lasse = lasse_1_1_0;

    lazymaru_0_2_5 = callPackage
      (
        {  buildMix, fetchHex, poison_1_3_1, plug_0_9_0, cowboy_1_0_4 }:
          buildMix {
            name = "lazymaru";
            version = "0.2.5";
            src = fetchHex {
              pkg = "lazymaru";
              version = "0.2.5";
              sha256 =
                "aeb7d963ddcd48791014922dc93030b182ee1fb13b7efbe041190c92cf1e939e";
            };
            beamDeps  = [ poison_1_3_1 plug_0_9_0 cowboy_1_0_4 ];

            meta = {
              description = ''Elixir copy of grape for creating REST-like
                            APIs.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/falood/lazymaru";
            };
          }
      ) {};

    lazymaru = lazymaru_0_2_5;

    ledx_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, elixir_ale_0_4_1 }:
          buildMix {
            name = "ledx";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ledx";
              version = "0.0.1";
              sha256 =
                "f468e65572b7c9dcb6c906678c873194818bb1dd78ce35b7dddd9397df4f81a6";
            };
            beamDeps  = [ elixir_ale_0_4_1 ];

            meta = {
              description = ''Ledx is a simple library for interfacing with
                            LEDs on embedded platforms.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/danmarcab/ledx";
            };
          }
      ) {};

    ledx = ledx_0_0_1;

    level_1_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "level";
            version = "1.0.0";
            src = fetchHex {
              pkg = "level";
              version = "1.0.0";
              sha256 =
                "42d54a840e79af5833e5ae335b374699c46d996053f2f3480e181a57cad2ae62";
            };

            meta = {
              longDescription = ''Level implements various helper functions and
                                data types for working with Googles Level data
                                store. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gausby/level";
            };
          }
      ) {};

    level = level_1_0_0;

    lex_luthor_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "lex_luthor";
            version = "0.1.0";
            src = fetchHex {
              pkg = "lex_luthor";
              version = "0.1.0";
              sha256 =
                "1a8ebf646f9cd29f3696659e67f4bbb65a5a558e4b3e1f43013c5e85022189a2";
            };

            meta = {
              longDescription = ''LexLuthor is a Lexer in Elixir (say that 10
                                times fast) which uses macros to generate a
                                reusable lexers. Good times.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamesotron/lex_luthor";
            };
          }
      ) {};

    lex_luthor = lex_luthor_0_1_0;

    lfsr_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "lfsr";
            version = "0.0.2";
            src = fetchHex {
              pkg = "lfsr";
              version = "0.0.2";
              sha256 =
                "8a14455bd0ce5c6b7dc56bf1027007c67e48979b49b70e09372cc36769d16b90";
            };

            meta = {
              description = ''Elixir implementation of a binary Galois Linear
                            Feedback Shift Register. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pma/lfsr";
            };
          }
      ) {};

    lfsr = lfsr_0_0_2;

    lhttpc_1_3_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "lhttpc";
            version = "1.3.0";
            src = fetchHex {
              pkg = "lhttpc";
              version = "1.3.0";
              sha256 =
                "ddd2bd4b85159bc987c954b14877168e6a3c3e516105702189776e97c50296a4";
            };

            meta = {
              description = ''Lightweight HTTP Client'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/talko/lhttpc";
            };
          }
      ) {};

    lhttpc = lhttpc_1_3_0;

    libchunter_0_1_45 = callPackage
      (
        {  buildRebar3, fetchHex, lager_2_1_1, fifo_spec_0_1_27 }:
          buildRebar3 {
            name = "libchunter";
            version = "0.1.45";
            src = fetchHex {
              pkg = "libchunter";
              version = "0.1.45";
              sha256 =
                "ecd76f18b2a1ee115b86a6b485119c2a36de9da1d41449dd5bc7e139dedeeb4b";
            };

            beamDeps  = [ lager_2_1_1 fifo_spec_0_1_27 ];

            meta = {
              description = ''Chunter interface library.'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/libchunter";
            };
          }
      ) {};

    libchunter = libchunter_0_1_45;

    libex_config_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "libex_config";
            version = "0.2.0";
            src = fetchHex {
              pkg = "libex_config";
              version = "0.2.0";
              sha256 =
                "27534209d8661d597017426922d64267f2452baac36866ba0bb470792f55292d";
            };

            meta = {
              description = ''LibEx.Config exposes helpers around accessing OTP
                            application configuration. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/reset/libex-config";
            };
          }
      ) {};

    libex_config = libex_config_0_2_0;

    libleofs_0_1_2 = callPackage
      (
        {  buildRebar3, fetchHex, jsx_1_4_5 }:
          buildRebar3 {
            name = "libleofs";
            version = "0.1.2";
            src = fetchHex {
              pkg = "libleofs";
              version = "0.1.2";
              sha256 =
                "62c39168e30a94e6bf0c3b3677995f5735ca03358465a6756db01a75c4e5c04b";
            };

            beamDeps  = [ jsx_1_4_5 ];

            meta = {
              description = ''LeoFS management library.'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/libleofs";
            };
          }
      ) {};

    libleofs = libleofs_0_1_2;

    librex_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, secure_random_0_2_0 }:
          buildMix {
            name = "librex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "librex";
              version = "1.0.0";
              sha256 =
                "c047e48eca2414394ecf5291e626fa813c8baaa9d35ab917dc6937f99461948c";
            };
            beamDeps  = [ secure_random_0_2_0 ];

            meta = {
              description = ''Convert office documents to other formats using
                            LibreOffice'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ricn/librex";
            };
          }
      ) {};

    librex = librex_1_0_0;

    libsnarl_0_3_40 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          oauth2_erlang_0_6_1,
          mdns_client_lib_0_1_33,
          libsnarlmatch_0_1_7,
          lager_3_0_2,
          fifo_spec_0_1_27
        }:
          buildRebar3 {
            name = "libsnarl";
            version = "0.3.40";
            src = fetchHex {
              pkg = "libsnarl";
              version = "0.3.40";
              sha256 =
                "fd574da4318b2732dd275fed371d13cd6ed4d0424e7acc3e0429ea97859fabbf";
            };

            beamDeps  = [
                          oauth2_erlang_0_6_1
                          mdns_client_lib_0_1_33
                          libsnarlmatch_0_1_7
                          lager_3_0_2
                          fifo_spec_0_1_27
                        ];

            meta = {
              description = ''snarl interface library'';

            };
          }
      ) {};

    libsnarl = libsnarl_0_3_40;

    libsnarlmatch_0_1_5 = callPackage
      (
        {  buildRebar3, fetchHex, fqc_0_1_5 }:
          buildRebar3 {
            name = "libsnarlmatch";
            version = "0.1.5";
            src = fetchHex {
              pkg = "libsnarlmatch";
              version = "0.1.5";
              sha256 =
                "11410122ca7a0685c4a7df1795d7f5a1e7bf9c5f17096414402fd9d1f0e1ac04";
            };

            beamDeps  = [ fqc_0_1_5 ];

            meta = {
              description = ''permission matcher library'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/libsnarlmatch";
            };
          }
      ) {};

    libsnarlmatch_0_1_7 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "libsnarlmatch";
            version = "0.1.7";
            src = fetchHex {
              pkg = "libsnarlmatch";
              version = "0.1.7";
              sha256 =
                "72e9bcf7968e75774393778146ac6596116f1c60136dd607ad249183684ee380";
            };

            meta = {
              description = ''permission matcher library'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/libsnarlmatch";
            };
          }
      ) {};

    libsnarlmatch = libsnarlmatch_0_1_7;

    libsniffle_0_3_37 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          mdns_client_lib_0_1_33,
          lager_3_0_2,
          fifo_spec_0_1_27
        }:
          buildRebar3 {
            name = "libsniffle";
            version = "0.3.37";
            src = fetchHex {
              pkg = "libsniffle";
              version = "0.3.37";
              sha256 =
                "fa840488f50292bbe206e7c13cc9640099cacec8aea3c0c581f6cc482b5bd94c";
            };

            beamDeps  = [ mdns_client_lib_0_1_33 lager_3_0_2 fifo_spec_0_1_27
                      ];

            meta = {
              description = ''Sniffle API'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/libsniffle";
            };
          }
      ) {};

    libsniffle = libsniffle_0_3_37;

    libsodium_0_0_3 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "libsodium";
            version = "0.0.3";
            src = fetchHex {
              pkg = "libsodium";
              version = "0.0.3";
              sha256 =
                "e66e9d91647a1519194cb0b240144123d68fae0f8cb57a9be9ced30ba8e24397";
            };
            compilePorts = true;

            meta = {
              description = ''libsodium port driver'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/potatosalad/erlang-libsodium";
            };
          }
      ) {};

    libsodium = libsodium_0_0_3;

    lineo_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "lineo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "lineo";
              version = "0.1.0";
              sha256 =
                "842733d2aae3b8cfadf3acfe456241eb3434e68984d1fdbb7be15e335591e21c";
            };

            meta = {
               license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/lineo";
            };
          }
      ) {};

    lineo = lineo_0_1_0;

    linguist_0_1_5 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "linguist";
            version = "0.1.5";
            src = fetchHex {
              pkg = "linguist";
              version = "0.1.5";
              sha256 =
                "d8b0665512a800854152082f6d56142e56e5da5f5b0d879298117b7dfd55ba97";
            };

            meta = {
              description = ''Elixir Internationalization library '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrismccord/linguist";
            };
          }
      ) {};

    linguist = linguist_0_1_5;

    link_shrinkex_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "link_shrinkex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "link_shrinkex";
              version = "1.0.0";
              sha256 =
                "2c7d99b23849f90d9aec8cd4f9960c6c198351735eda754288b778fe0e5f7e82";
            };

            meta = {
              description = ''Google`s URL Shortener API for Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jonahoffline/link_shrinkex";
            };
          }
      ) {};

    link_shrinkex = link_shrinkex_1_0_0;

    liquid_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "liquid";
            version = "0.1.0";
            src = fetchHex {
              pkg = "liquid";
              version = "0.1.0";
              sha256 =
                "f2f4e2499419de30a984b706e2119007cc9f46e79a22a865715ed040a6a1f4db";
            };

            meta = {
              description = ''Liquid implementation in elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nulian/liquid-elixir";
            };
          }
      ) {};

    liquid = liquid_0_1_0;

    locker_1_0_8 = callPackage
      (
        {  buildRebar3, fetchHex, proper_1_1_1_beta }:
          buildRebar3 {
            name = "locker";
            version = "1.0.8";
            src = fetchHex {
              pkg = "locker";
              version = "1.0.8";
              sha256 =
                "9cf9890e6b12dab7b8d1997c455348742db6caf2eaac3b64c514cd4e8dca2b56";
            };

            beamDeps  = [ proper_1_1_1_beta ];

            meta = {
              longDescription = ''Distributed de-centralized consistent
                                in-memory key-value store written in Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wooga/locker";
            };
          }
      ) {};

    locker = locker_1_0_8;

    logfmt_3_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "logfmt";
            version = "3.0.2";
            src = fetchHex {
              pkg = "logfmt";
              version = "3.0.2";
              sha256 =
                "d079aab159c3682d90054dbf8228cc0f86c8d5df6e6145c60d69a81110c3ee1c";
            };

            meta = {
              description = ''Logfmt is a module for encoding and decoding
                            logfmt-style log lines.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jclem/logfmt-elixir";
            };
          }
      ) {};

    logfmt = logfmt_3_0_2;

    logger_file_backend_0_0_6 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "logger_file_backend";
            version = "0.0.6";
            src = fetchHex {
              pkg = "logger_file_backend";
              version = "0.0.6";
              sha256 =
                "57554adfad0599adc3ea540accc1791d4adffedbe87640c0b92df9b860bb1c69";
            };

            meta = {
              description = ''Simple logger backend that writes to a file'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/onkel-dirtus/logger_file_backend";
            };
          }
      ) {};

    logger_file_backend = logger_file_backend_0_0_6;

    logger_logentries_backend_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "logger_logentries_backend";
            version = "0.0.1";
            src = fetchHex {
              pkg = "logger_logentries_backend";
              version = "0.0.1";
              sha256 =
                "f3db38f7ab4dc40cd8078bf4cad79ce2a1e759f0f7f2b2dee4fbc3abb8fe3d7e";
            };

            meta = {
              longDescription = ''A Logger backend to support the Logentries
                                service (logentries.com) TCP input log
                                mechanism'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/sysdia-solutions/logger_logentries_backend";
            };
          }
      ) {};

    logger_logentries_backend = logger_logentries_backend_0_0_1;

    logger_loggly_backend_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1 }:
          buildMix {
            name = "logger_loggly_backend";
            version = "0.1.0";
            src = fetchHex {
              pkg = "logger_loggly_backend";
              version = "0.1.0";
              sha256 =
                "4b19e284f0b910c824a228093afa176ea4b9c4546893b2ad5da2769aa2bcbc85";
            };
            beamDeps  = [ httpoison_0_8_1 ];

            meta = {
              description = ''Loggly logger backend'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joeyfeldberg/loggly_backend";
            };
          }
      ) {};

    logger_loggly_backend = logger_loggly_backend_0_1_0;

    logger_logstash_backend_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, timex_1_0_1, exjsx_3_1_0 }:
          buildMix {
            name = "logger_logstash_backend";
            version = "1.0.0";
            src = fetchHex {
              pkg = "logger_logstash_backend";
              version = "1.0.0";
              sha256 =
                "ca36f8ab5f738c143da6b72c9d603ede7e201e2a1c7d683b270c2641d14bbcb2";
            };
            beamDeps  = [ timex_1_0_1 exjsx_3_1_0 ];

            meta = {
              description = ''Logstash UDP producer backend for Logger.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/logger_logstash_backend";
            };
          }
      ) {};

    logger_logstash_backend = logger_logstash_backend_1_0_0;

    logger_papertrail_backend_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "logger_papertrail_backend";
            version = "0.0.2";
            src = fetchHex {
              pkg = "logger_papertrail_backend";
              version = "0.0.2";
              sha256 =
                "afc8bce277dc827172d33b20024970811950a139552ed1d0e1ea75e2860a055e";
            };

            meta = {
              description = ''A Papertrail backend for Elixir Logger'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/larskrantz/logger_papertrail_backend";
            };
          }
      ) {};

    logger_papertrail_backend = logger_papertrail_backend_0_0_2;

    lolcat_0_0_1 = callPackage
      (
        {  buildRebar3, fetchHex, quickrand_1_5_1, colorful_0_6_0 }:
          buildRebar3 {
            name = "lolcat";
            version = "0.0.1";
            src = fetchHex {
              pkg = "lolcat";
              version = "0.0.1";
              sha256 =
                "884799d2e7f294a6a5455e19c9816592d7b1314cefaba18952876fef0c4a10af";
            };

            beamDeps  = [ quickrand_1_5_1 colorful_0_6_0 ];

            meta = {
              description = ''The clone of lolcat. written in elixir '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/restartr/ex-lolcat";
            };
          }
      ) {};

    lolcat = lolcat_0_0_1;

    loom_0_0_10 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "loom";
            version = "0.0.10";
            src = fetchHex {
              pkg = "loom";
              version = "0.0.10";
              sha256 =
                "f32cf0fe1c14efb9b4fda15285a5d331b64e952da7a0561c66f7e2b671d36cb8";
            };

            meta = {
              description = ''A modern CRDT library that uses protocols to
                            create composable CRDTs.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/asonge/loom";
            };
          }
      ) {};

    loom = loom_0_0_10;

    lru_1_3_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "lru";
            version = "1.3.1";
            src = fetchHex {
              pkg = "lru";
              version = "1.3.1";
              sha256 =
                "cd6ac15c383d58cd2933df9cb918617b24b12b6e5fb24d94c4c8f200fd93f619";
            };

            meta = {
              description = ''implements a fixed-size LRU cache'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/barrel-db/erlang-lru";
            };
          }
      ) {};

    lru = lru_1_3_1;

    lru_cache_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "lru_cache";
            version = "0.1.0";
            src = fetchHex {
              pkg = "lru_cache";
              version = "0.1.0";
              sha256 =
                "9543e4b00ad3763fa2a92cf9ed7429dff645d912f5d9134b32d573bb327f56b5";
            };

            meta = {
              description = ''ETS-based LRU Cache'';

              homepage = "https://github.com/arago/lru_cache";
            };
          }
      ) {};

    lru_cache = lru_cache_0_1_0;

    ltsv_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ltsv";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ltsv";
              version = "0.1.0";
              sha256 =
                "62e56251331da6cf5b95de9ecf6e0984749b0ba935356397151fa19f2491a449";
            };

            meta = {
              description = ''A Labeled Tab-separated Values Parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/ltsvex";
            };
          }
      ) {};

    ltsv = ltsv_0_1_0;

    luhn_0_3_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "luhn";
            version = "0.3.0";
            src = fetchHex {
              pkg = "luhn";
              version = "0.3.0";
              sha256 =
                "e98e7dac83e18d75dbcb87559f17f7b40c00edf79a38b02b9ab5a7d74b05efc2";
            };

            meta = {
              description = ''Luhn algorithm in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/luhn_ex";
            };
          }
      ) {};

    luhn = luhn_0_3_0;

    luhnatex_0_5_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "luhnatex";
            version = "0.5.0";
            src = fetchHex {
              pkg = "luhnatex";
              version = "0.5.0";
              sha256 =
                "d2edc93e2058f1608217eb90402cc776b40f389f445e6c2a82792a0993f4b6de";
            };

            meta = {
              description = ''Luhn algorithm in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/my-flow/luhnatex";
            };
          }
      ) {};

    luhnatex = luhnatex_0_5_0;

    lz4_0_2_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "lz4";
            version = "0.2.2";
            src = fetchHex {
              pkg = "lz4";
              version = "0.2.2";
              sha256 =
                "a59522221e7cdfe3792bf8b3bb21cfe7ac657790e5826201fa2c5d0bc7484a2d";
            };
            compilePorts = true;

            meta = {
              description = ''LZ4 bindings for Erlang'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/szktty/erlang-lz4.git";
            };
          }
      ) {};

    lz4 = lz4_0_2_2;

    lz_string_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "lz_string";
            version = "0.0.3";
            src = fetchHex {
              pkg = "lz_string";
              version = "0.0.3";
              sha256 =
                "747ddaee6f146d6133c16c53f18ca9dc429d5c1e0ca11d8eeb322630448ec08b";
            };

            meta = {
              description = ''Elixir implementation of pieroxy`s lz-string
                            compression algorithm.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/koudelka/elixir-lz-string";
            };
          }
      ) {};

    lz_string = lz_string_0_0_3;

    m2x_1_3_1 = callPackage
      (
        {  buildMix, fetchHex, json_0_3_3, hackney_1_4_8 }:
          buildMix {
            name = "m2x";
            version = "1.3.1";
            src = fetchHex {
              pkg = "m2x";
              version = "1.3.1";
              sha256 =
                "3325226ac185b40304469aa94a7376511bf57d535eb1d32b2aca6c2009c54fe2";
            };
            beamDeps  = [ json_0_3_3 hackney_1_4_8 ];

            meta = {
              longDescription = ''Elixir client library for the AT&T M2X
                                (http://m2x.att.com) API. AT&T M2X is a
                                cloud-based fully managed time-series data
                                storage service for network connected
                                machine-to-machine (M2M) devices and the
                                Internet of Things (IoT).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/attm2x/m2x-elixir";
            };
          }
      ) {};

    m2x = m2x_1_3_1;

    m2x_erlang_1_3_1 = callPackage
      (
        {  buildMix, fetchHex, jsx_2_8_0, hackney_1_4_8 }:
          buildMix {
            name = "m2x_erlang";
            version = "1.3.1";
            src = fetchHex {
              pkg = "m2x_erlang";
              version = "1.3.1";
              sha256 =
                "873db746f4428490670b54aabcc93fda8d94c3c4e25c94a9aef7275858a8b809";
            };
            beamDeps  = [ jsx_2_8_0 hackney_1_4_8 ];

            meta = {
              longDescription = ''Erlang client library for the AT&T M2X
                                (http://m2x.att.com) API. AT&T M2X is a
                                cloud-based fully managed time-series data
                                storage service for network connected
                                machine-to-machine (M2M) devices and the
                                Internet of Things (IoT).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/attm2x/m2x-erlang";
            };
          }
      ) {};

    m2x_erlang = m2x_erlang_1_3_1;

    mad_0_9_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "mad";
            version = "0.9.0";
            src = fetchHex {
              pkg = "mad";
              version = "0.9.0";
              sha256 =
                "5eeb635094586b517f08000b059b680981c7da5527bab83e7bfa3f54176c0f1e";
            };

            meta = {
              description = ''Small and fast rebar replacement'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/mad";
            };
          }
      ) {};

    mad = mad_0_9_0;

    mail_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mail";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mail";
              version = "0.0.2";
              sha256 =
                "724cea5cac7b0ffdf2fa65a8d89d7c83de72da7eba6d6b31f8669854cb32baa3";
            };

            meta = {
              description = ''Easily build a composable mail message'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DockYard/elixir-mail";
            };
          }
      ) {};

    mail = mail_0_0_2;

    mailchimp_0_0_5 = callPackage
      (
        {  buildMix, fetchHex, poison_2_1_0, httpoison_0_7_5 }:
          buildMix {
            name = "mailchimp";
            version = "0.0.5";
            src = fetchHex {
              pkg = "mailchimp";
              version = "0.0.5";
              sha256 =
                "e2681ec4a99a3ba59a523e1e6369ca276399733fb34d08fd823a1e0658613de9";
            };
            beamDeps  = [ poison_2_1_0 httpoison_0_7_5 ];

            meta = {
              description = ''A basic Elixir wrapper for version 3 of the
                            MailChimp API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/duartejc/mailchimp";
            };
          }
      ) {};

    mailchimp = mailchimp_0_0_5;

    mailer_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, timex_1_0_1, gen_smtp_0_9_0 }:
          buildMix {
            name = "mailer";
            version = "1.0.0";
            src = fetchHex {
              pkg = "mailer";
              version = "1.0.0";
              sha256 =
                "cd54048c0cea44b9d96b82352d74fadf078e705b343c62a6e6e27f60de21099b";
            };
            beamDeps  = [ timex_1_0_1 gen_smtp_0_9_0 ];

            meta = {
              description = ''Mailer - A simple email client'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/antp/mailer";
            };
          }
      ) {};

    mailer = mailer_1_0_0;

    mailgun_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mailgun";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mailgun";
              version = "0.0.2";
              sha256 =
                "9e00f4411d5838556d326b02038f6fa3f173a67af28148329014f9889cd4a5c4";
            };

            meta = {
              description = ''Elixir Mailgun Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrismccord/mailgun";
            };
          }
      ) {};

    mailgun_0_1_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2 }:
          buildMix {
            name = "mailgun";
            version = "0.1.2";
            src = fetchHex {
              pkg = "mailgun";
              version = "0.1.2";
              sha256 =
                "9cc828e06238045c92414db8f2e9a64a6004aca9b9a4856e5222db99bd8528e8";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''Elixir Mailgun Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrismccord/mailgun";
            };
          }
      ) {};

    mailgun = mailgun_0_1_2;

    mailgun_webhook_auth_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, plug_0_8_1, cowboy_1_0_4 }:
          buildMix {
            name = "mailgun_webhook_auth";
            version = "1.0.0";
            src = fetchHex {
              pkg = "mailgun_webhook_auth";
              version = "1.0.0";
              sha256 =
                "0e6c93d8fd37fc948db0f92ee545ecbed99787dc04ceb8981e588b06ad3108eb";
            };
            beamDeps  = [ plug_0_8_1 cowboy_1_0_4 ];

            meta = {
              description = ''A Plug for validating Mailgun Webhook requests in
                            Elixir applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/typesend/mailgun_webhook_auth";
            };
          }
      ) {};

    mailgun_webhook_auth = mailgun_webhook_auth_1_0_0;

    mailibex_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mailibex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mailibex";
              version = "0.1.0";
              sha256 =
                "01f207ee181a58d629c5329d378ee319f9dbab9259e28367751d8860ffe63a36";
            };

            meta = {
              longDescription = ''Mailibex is an email library in Elixir :
                                currently implements DKIM, SPF, DMARC, MimeMail
                                (using iconv nif for encoding), MimeType (and
                                file type detection), a simplified api to modify
                                or create mimemail as a keyword list. Next step
                                is a full implementation of SMTP client and
                                server, to make it possible to use emails as a
                                routable API for events and messages between
                                your applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/mailibex";
            };
          }
      ) {};

    mailibex = mailibex_0_1_0;

    mailman_0_2_1 = callPackage
      (
        {
          buildMix, fetchHex, gen_smtp_0_9_0, ex_doc_0_11_4, earmark_0_2_1
        }:
          buildMix {
            name = "mailman";
            version = "0.2.1";
            src = fetchHex {
              pkg = "mailman";
              version = "0.2.1";
              sha256 =
                "b1594af744dc0e879ed8e42133c7d1d8136468218be2c6dfbf416dd3861b20c7";
            };
            beamDeps  = [ gen_smtp_0_9_0 ex_doc_0_11_4 earmark_0_2_1 ];

            meta = {
              description = ''Library providing a clean way of defining mailers
                            in Elixir apps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kamilc/mailman";
            };
          }
      ) {};

    mailman = mailman_0_2_1;

    majremind_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "majremind";
            version = "0.0.1";
            src = fetchHex {
              pkg = "majremind";
              version = "0.0.1";
              sha256 =
                "604ba3b2142497b2384c73b2320f9738711a9cc07b4348f8e870ee6e470c4749";
            };

            meta = {
              longDescription = ''A self-maintained database of your updated
                                server which tells you which one needs to be
                                updated. It uses Disk Erlang Term Storage for
                                its internal database, located at
                                $HOME/.config/majremind/ '';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    majremind = majremind_0_0_1;

    mandrag_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, exrm_0_15_1 }:
          buildMix {
            name = "mandrag";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mandrag";
              version = "0.1.1";
              sha256 =
                "e9e9fcbb844a2a86ecd95f5f8fa7db9f6ff88f3e2a6dca2bd996f4f71bbf125d";
            };
            beamDeps  = [ exrm_0_15_1 ];

            meta = {
              description = ''A simple, extremely assumptive deploy script for
                            Phoenix apps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cschiewek/mandrag";
            };
          }
      ) {};

    mandrag = mandrag_0_1_1;

    mandrake_0_0_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mandrake";
            version = "0.0.4";
            src = fetchHex {
              pkg = "mandrake";
              version = "0.0.4";
              sha256 =
                "ed672e094f68ff07c1f8e78a3c8a95af3e23a71ca90515ad441738446ee18887";
            };

            meta = {
              longDescription = ''Mandrake is a functional programming library
                                that bring something else magic in elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mbasso/mandrake";
            };
          }
      ) {};

    mandrake = mandrake_0_0_4;

    mandrill_0_4_1 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, exjsx_3_1_0 }:
          buildMix {
            name = "mandrill";
            version = "0.4.1";
            src = fetchHex {
              pkg = "mandrill";
              version = "0.4.1";
              sha256 =
                "2d554149c425c511a006d978427acc1d384c8f6d4f3699fdce04e42e24268400";
            };
            beamDeps  = [ httpoison_0_8_1 exjsx_3_1_0 ];

            meta = {
              longDescription = ''A Mandrill wrapper for Elixir Requires an
                                active account with Mandrill
                                (http://mandrill.com).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/mandrill-elixir";
            };
          }
      ) {};

    mandrill = mandrill_0_4_1;

    mandrillex_0_2_0 = callPackage
      (
        {
          buildMix, fetchHex, jsex_2_0_0, httpoison_0_8_1, hackney_1_0_6
        }:
          buildMix {
            name = "mandrillex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mandrillex";
              version = "0.2.0";
              sha256 =
                "840bf36e545cde376797603df4109aae49d2c17b2b06f84a058fff4448d362eb";
            };
            beamDeps  = [ jsex_2_0_0 httpoison_0_8_1 hackney_1_0_6 ];

            meta = {
              longDescription = ''A Mandrill wrapper for Elixir Requires an
                                active account with Mandrill
                                (http://mandrill.com). '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/mandrillex";
            };
          }
      ) {};

    mandrillex = mandrillex_0_2_0;

    marco_polo_0_2_1 = callPackage
      (
        {  buildMix, fetchHex, decimal_1_1_1, connection_1_0_0_rc_1 }:
          buildMix {
            name = "marco_polo";
            version = "0.2.1";
            src = fetchHex {
              pkg = "marco_polo";
              version = "0.2.1";
              sha256 =
                "60730b3b488e11c91b57f0d3490baf86fd2972cd51a481480a5aec1e2aacf5fd";
            };
            beamDeps  = [ decimal_1_1_1 connection_1_0_0_rc_1 ];

            meta = {
              description = ''Binary driver for the OrientDB database.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/MyMedsAndMe/marco_polo";
            };
          }
      ) {};

    marco_polo = marco_polo_0_2_1;

    mariaex_0_4_3 = callPackage
      (
        {  buildMix, fetchHex, decimal_1_1_1 }:
          buildMix {
            name = "mariaex";
            version = "0.4.3";
            src = fetchHex {
              pkg = "mariaex";
              version = "0.4.3";
              sha256 =
                "5403290df22598e0152c7f1edd64f6372238055d5e72cc830780d019f4d22d57";
            };
            beamDeps  = [ decimal_1_1_1 ];

            meta = {
              description = ''Pure elixir database driver for MariaDB /
                            MySQL.'';

              homepage = "https://github.com/xerions/mariaex";
            };
          }
      ) {};

    mariaex_0_5_0 = callPackage
      (
        {  buildMix, fetchHex, decimal_1_1_1 }:
          buildMix {
            name = "mariaex";
            version = "0.5.0";
            src = fetchHex {
              pkg = "mariaex";
              version = "0.5.0";
              sha256 =
                "fe2a576c6b4e446c3744af7dda0a3ed6f179f80451a8e412be520b9005bb26c0";
            };
            beamDeps  = [ decimal_1_1_1 ];

            meta = {
              description = ''Pure elixir database driver for MariaDB /
                            MySQL.'';

              homepage = "https://github.com/xerions/mariaex";
            };
          }
      ) {};

    mariaex_0_6_2 = callPackage
      (
        {  buildMix, fetchHex, decimal_1_1_1, connection_1_0_2 }:
          buildMix {
            name = "mariaex";
            version = "0.6.2";
            src = fetchHex {
              pkg = "mariaex";
              version = "0.6.2";
              sha256 =
                "195d9f46e09029872505402159ec713cdfa7b847622cc6b6db658c0d24f85ecd";
            };
            beamDeps  = [ decimal_1_1_1 connection_1_0_2 ];

            meta = {
              description = ''Pure elixir database driver for MariaDB /
                            MySQL.'';

              homepage = "https://github.com/xerions/mariaex";
            };
          }
      ) {};

    mariaex = mariaex_0_6_2;

    marked_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "marked";
            version = "0.0.1";
            src = fetchHex {
              pkg = "marked";
              version = "0.0.1";
              sha256 =
                "6e16369d41355bef05b18f98230afe08dcb3ccfaaab168382513d86c19721035";
            };

            meta = {
              description = ''CommonMark compatible Markdown parser'';

            };
          }
      ) {};

    marked = marked_0_0_1;

    maru_0_9_3 = callPackage
      (
        {  buildMix, fetchHex, poison_1_0_3, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "maru";
            version = "0.9.3";
            src = fetchHex {
              pkg = "maru";
              version = "0.9.3";
              sha256 =
                "6dd160dbc77b72a1954d53c5d584402006f0c28a278f3f28c5ec651246db480d";
            };
            beamDeps  = [ poison_1_0_3 plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              description = ''REST-like API micro-framework for elixir inspired
                            by grape.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/falood/maru";
            };
          }
      ) {};

    maru = maru_0_9_3;

    maru_entity_0_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "maru_entity";
            version = "0.1.2";
            src = fetchHex {
              pkg = "maru_entity";
              version = "0.1.2";
              sha256 =
                "93b1f9f3941032cdf98b999cf4db85cace7e6259a78427322c5af8a5621e45b6";
            };

            meta = {
              description = ''Elixir copy of grape-entity'';

            };
          }
      ) {};

    maru_entity = maru_entity_0_1_2;

    maru_swagger_0_7_1 = callPackage
      (
        {  buildMix, fetchHex, maru_0_9_3 }:
          buildMix {
            name = "maru_swagger";
            version = "0.7.1";
            src = fetchHex {
              pkg = "maru_swagger";
              version = "0.7.1";
              sha256 =
                "035cfecc126ccdc830694c8c6f6c1d3376b6d037b31d30f31b53334305179940";
            };
            beamDeps  = [ maru_0_9_3 ];

            meta = {
              description = ''Add swagger compliant documentation to your maru
                            API'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/falood/maru_swagger";
            };
          }
      ) {};

    maru_swagger = maru_swagger_0_7_1;

    marvel_1_0_0 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          timex_0_13_5,
          poison_1_5_2,
          httpoison_0_8_1
        }:
          buildRebar3 {
            name = "marvel";
            version = "1.0.0";
            src = fetchHex {
              pkg = "marvel";
              version = "1.0.0";
              sha256 =
                "7b5e99ccfa84954c2e46295aa72ab57b7511e1ec8e0bd13d1c5948efe1a0d23d";
            };

            beamDeps  = [ timex_0_13_5 poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Marvel API and CLI Client '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/marvel";
            };
          }
      ) {};

    marvel = marvel_1_0_0;

    marvin_0_3_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          slack_0_3_0,
          poison_2_1_0,
          ibrowse_4_2_2,
          httpotion_2_2_0
        }:
          buildMix {
            name = "marvin";
            version = "0.3.0";
            src = fetchHex {
              pkg = "marvin";
              version = "0.3.0";
              sha256 =
                "722a97aef1d0f7fb783948002897ea1ec67ac77cb471016386bf485bb8bd86c7";
            };
            beamDeps  = [
                          slack_0_3_0 poison_2_1_0 ibrowse_4_2_2 httpotion_2_2_0
                        ];

            meta = {
              description = ''A Slack bot framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/willrax/marvin";
            };
          }
      ) {};

    marvin = marvin_0_3_0;

    math_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "math";
            version = "0.0.1";
            src = fetchHex {
              pkg = "math";
              version = "0.0.1";
              sha256 =
                "ca9c87163b052d2c849a7b4ef3d8664f9400024f26c6add1ce200aa72604a90d";
            };

            meta = {
              description = ''The missing Math module for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/folz/math";
            };
          }
      ) {};

    math = math_0_0_1;

    matrix_0_3_1 = callPackage
      (
        {  buildMix, fetchHex, exprintf_0_1_6, earmark_0_2_1 }:
          buildMix {
            name = "matrix";
            version = "0.3.1";
            src = fetchHex {
              pkg = "matrix";
              version = "0.3.1";
              sha256 =
                "3184d70b36666d52e011caf8be4590e2ecf3cc772203ec22b44d90c302592523";
            };
            beamDeps  = [ exprintf_0_1_6 earmark_0_2_1 ];

            meta = {
              longDescription = ''Matrix is a linear algebra library for
                                manipulating dense matrices. Its primary design
                                goal is ease of use.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/twist-vector/elixir-matrix.git";
            };
          }
      ) {};

    matrix = matrix_0_3_1;

    maybe_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "maybe";
            version = "0.0.1";
            src = fetchHex {
              pkg = "maybe";
              version = "0.0.1";
              sha256 =
                "b1915afa2dd6a2db64ad7b20b41eeb2d3cb576cdbd20679594eb6ef76f612638";
            };

            meta = {
              description = ''Utils to deal with errors'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zweifisch/maybe";
            };
          }
      ) {};

    maybe = maybe_0_0_1;

    mazurka_0_3_32 = callPackage
      (
        {
          buildMix,
          fetchHex,
          xml_builder_0_0_8,
          poison_2_1_0,
          plug_1_1_1,
          mimetype_parser_0_1_1,
          mazurka_dsl_0_1_1,
          html_builder_0_1_0,
          etude_0_3_7,
          ecto_1_0_7
        }:
          buildMix {
            name = "mazurka";
            version = "0.3.32";
            src = fetchHex {
              pkg = "mazurka";
              version = "0.3.32";
              sha256 =
                "93a1a7fe508daae8df47a6bf8d3969d5cf93a206b65a5c350a0ea26005968f6a";
            };
            beamDeps  = [
                          xml_builder_0_0_8
                          poison_2_1_0
                          plug_1_1_1
                          mimetype_parser_0_1_1
                          mazurka_dsl_0_1_1
                          html_builder_0_1_0
                          etude_0_3_7
                          ecto_1_0_7
                        ];

            meta = {
              description = ''hypermedia api toolkit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mazurka/mazurka";
            };
          }
      ) {};

    mazurka = mazurka_0_3_32;

    mazurka_dsl_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mazurka_dsl";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mazurka_dsl";
              version = "0.1.1";
              sha256 =
                "2877b27736daa1f5757ff1c2b34ec35d43c8e501b5292be5f9db7de95b88ea69";
            };

            meta = {
              description = ''DSL for defining mazurka resources'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mazurka/mazurka_dsl";
            };
          }
      ) {};

    mazurka_dsl = mazurka_dsl_0_1_1;

    mazurka_mediatype_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, etude_0_4_0 }:
          buildMix {
            name = "mazurka_mediatype";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mazurka_mediatype";
              version = "0.2.0";
              sha256 =
                "4ccd8b27d6405e93cb34861f211d69b79ab46c2dbc5c7874d4ee3c580a5754bb";
            };
            beamDeps  = [ etude_0_4_0 ];

            meta = {
              description = ''mazurka mediatype interface'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mazurka/mazurka_mediatype";
            };
          }
      ) {};

    mazurka_mediatype = mazurka_mediatype_0_2_0;

    mazurka_mediatype_hyperjson_0_2_3 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_1_3_1,
          mazurka_mediatype_0_2_0,
          etude_0_4_0
        }:
          buildMix {
            name = "mazurka_mediatype_hyperjson";
            version = "0.2.3";
            src = fetchHex {
              pkg = "mazurka_mediatype_hyperjson";
              version = "0.2.3";
              sha256 =
                "f09489f242598ece8496f50c9dfc3d1a051b6115a654ebbb9ce5336e04b2cb8d";
            };
            beamDeps  = [ poison_1_3_1 mazurka_mediatype_0_2_0 etude_0_4_0 ];

            meta = {
              description = ''hyper+json mediatype compiler for mazurka'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/mazurka/mazurka_mediatype_hyperjson";
            };
          }
      ) {};

    mazurka_mediatype_hyperjson = mazurka_mediatype_hyperjson_0_2_3;

    mcrypt_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "mcrypt";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mcrypt";
              version = "0.1.0";
              sha256 =
                "508a35ba255190f80309dcabf9c81c88b86b9ec13af180627ad51b8e5cf2a4cd";
            };
            compilePorts = true;

            meta = {
              description = ''NIF wrapper around libmcrypt.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/system76/elixir-mcrypt";
            };
          }
      ) {};

    mcrypt = mcrypt_0_1_0;

    mcup_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mcup";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mcup";
              version = "0.0.2";
              sha256 =
                "c59537882707237c961d3d69b149619ec35c808cd5e98646cbcb7985e300b975";
            };

            meta = {
              description = ''DSL for markup. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/mcup";
            };
          }
      ) {};

    mcup = mcup_0_0_2;

    mdns_client_0_1_7 = callPackage
      (
        {  buildRebar3, fetchHex, lager_2_1_1 }:
          buildRebar3 {
            name = "mdns_client";
            version = "0.1.7";
            src = fetchHex {
              pkg = "mdns_client";
              version = "0.1.7";
              sha256 =
                "c707532d693bd19bed8ccd167574b6b0337f07e38b87bd7f9111d9cb9799fac2";
            };

            beamDeps  = [ lager_2_1_1 ];

            meta = {
              description = ''mDNS service discovery client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Licenser/erlang-mdns-client";
            };
          }
      ) {};

    mdns_client = mdns_client_0_1_7;

    mdns_client_lib_0_1_33 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          pooler_1_4_0,
          mdns_client_0_1_7,
          lager_2_1_1
        }:
          buildRebar3 {
            name = "mdns_client_lib";
            version = "0.1.33";
            src = fetchHex {
              pkg = "mdns_client_lib";
              version = "0.1.33";
              sha256 =
                "9ad3723c929acbdfec70021ceb6606e59c7e6189af97652409bfc9624052e0fe";
            };

            beamDeps  = [ pooler_1_4_0 mdns_client_0_1_7 lager_2_1_1 ];

            meta = {
              description = ''client lib for mdns aware tcp servers'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/Licenser/mdns_client_lib";
            };
          }
      ) {};

    mdns_client_lib = mdns_client_lib_0_1_33;

    mdns_server_0_2_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "mdns_server";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mdns_server";
              version = "0.2.0";
              sha256 =
                "bc9465880e15e57033960ab6820258b87134bef69032210c67e53e3718e289d0";
            };

            meta = {
              description = ''mDNS service discovery server'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Licenser/erlang-mdns-server";
            };
          }
      ) {};

    mdns_server = mdns_server_0_2_0;

    mdns_server_lib_0_2_3 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          ranch_1_1_0,
          mdns_server_0_2_0,
          lager_3_0_2
        }:
          buildRebar3 {
            name = "mdns_server_lib";
            version = "0.2.3";
            src = fetchHex {
              pkg = "mdns_server_lib";
              version = "0.2.3";
              sha256 =
                "078775ccea5d768095716ca6bd82f657601203352495d9726f4cc080c8c07695";
            };

            beamDeps  = [ ranch_1_1_0 mdns_server_0_2_0 lager_3_0_2 ];

            meta = {
              description = ''server side for mdns client server
                            implementation'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/Licenser/mdns_server_lib";
            };
          }
      ) {};

    mdns_server_lib = mdns_server_lib_0_2_3;

    meck_0_8_4 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "meck";
            version = "0.8.4";
            src = fetchHex {
              pkg = "meck";
              version = "0.8.4";
              sha256 =
                "2cdfbd0edd8f62b3d2061efc03c0e490282dd2ea6de44e15d2006e83f4f8eead";
            };

            meta = {
              description = ''A mocking framework for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/eproxus/meck";
            };
          }
      ) {};

    meck = meck_0_8_4;

    medex_0_1_2 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, cowboy_1_0_4, consul_1_0_3 }:
          buildMix {
            name = "medex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "medex";
              version = "0.1.2";
              sha256 =
                "dd8dd07892a4aedbe7680fa8637b1c17b7615b2aaea0b25b84acad4ed50700d2";
            };
            beamDeps  = [ plug_1_1_1 cowboy_1_0_4 consul_1_0_3 ];

            meta = {
              longDescription = ''Medical Examination - application for
                                register health check callbacks and represent
                                their state via HTTP.'';

              homepage = "https://github.com/xerions/medex";
            };
          }
      ) {};

    medex = medex_0_1_2;

    meld_0_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "meld";
            version = "0.1.2";
            src = fetchHex {
              pkg = "meld";
              version = "0.1.2";
              sha256 =
                "3f86b810df38e0767a472829a26f92c07c986c1bcc41421eba021a5a6c174e83";
            };

            meta = {
              description = ''create real CLIs in elixir, using mix tasks'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/conflate/meld";
            };
          }
      ) {};

    meld = meld_0_1_2;

    mellon_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, poison_2_1_0, plug_1_1_1 }:
          buildMix {
            name = "mellon";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mellon";
              version = "0.1.0";
              sha256 =
                "e9252f1abdc4c38a4ad9cc3bd194630f7756ba22a25e6ebf8e937b1600cb9aae";
            };
            beamDeps  = [ poison_2_1_0 plug_1_1_1 ];

            meta = {
              longDescription = ''Mellon is a Plug used in authentication of
                                APIs. It`s flexible, you can define your own
                                validator etc.'';

              homepage = "https://github.com/sajmoon/mellon";
            };
          }
      ) {};

    mellon = mellon_0_1_0;

    memcache_client_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, poolboy_1_5_1, poison_1_5_2 }:
          buildMix {
            name = "memcache_client";
            version = "1.0.0";
            src = fetchHex {
              pkg = "memcache_client";
              version = "1.0.0";
              sha256 =
                "ef5977dc10fd0d55606887168735ae4a0c481a1edbf2a28e042cab3f53e1f9c3";
            };
            beamDeps  = [ poolboy_1_5_1 poison_1_5_2 ];

            meta = {
              description = ''Memcache client library utilizing the memcache
                            binary protocol.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsharju/memcache_client";
            };
          }
      ) {};

    memcache_client = memcache_client_1_0_0;

    message_pack_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "message_pack";
            version = "0.2.0";
            src = fetchHex {
              pkg = "message_pack";
              version = "0.2.0";
              sha256 =
                "94f31aa2734989e97562fcd1ad0b159e8571f4b97f591995bfdcbbbcfcaadd83";
            };

            meta = {
              description = ''MessagePack Implementation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mururu/msgpack-elixir";
            };
          }
      ) {};

    message_pack = message_pack_0_2_0;

    meta_0_0_1 = callPackage
      (
        {  buildRebar3, fetchHex, forms_0_0_1 }:
          buildRebar3 {
            name = "meta";
            version = "0.0.1";
            src = fetchHex {
              pkg = "meta";
              version = "0.0.1";
              sha256 =
                "9aa1be58e265a16eafb9092d9675427672721ca9d3c924664e561b0857c6dcb8";
            };

            beamDeps  = [ forms_0_0_1 ];

            meta = {
              description = ''A metaprogramming library for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/efcasado/forms";
            };
          }
      ) {};

    meta = meta_0_0_1;

    metainvestigator_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, floki_0_7_1 }:
          buildMix {
            name = "metainvestigator";
            version = "0.0.3";
            src = fetchHex {
              pkg = "metainvestigator";
              version = "0.0.3";
              sha256 =
                "774b3973090491a9a342a68c5cf099c98581ae0f1b1d313a08a7d2030d541781";
            };
            beamDeps  = [ floki_0_7_1 ];

            meta = {
              description = ''A library for web scraping, inspired by
                            MetaInspector'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nekova/metainvestigator";
            };
          }
      ) {};

    metainvestigator = metainvestigator_0_0_3;

    metrics_0_2_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "metrics";
            version = "0.2.1";
            src = fetchHex {
              pkg = "metrics";
              version = "0.2.1";
              sha256 =
                "1cccc3534fa5a7861a3dcc0414afba00a616937e82c95d6172a523a5d2e97c03";
            };

            meta = {
              description = ''A generic interface to different metrics systems
                            in Erlang.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-metrics";
            };
          }
      ) {};

    metrics = metrics_0_2_1;

    metrix_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, logfmt_3_0_2 }:
          buildMix {
            name = "metrix";
            version = "0.2.0";
            src = fetchHex {
              pkg = "metrix";
              version = "0.2.0";
              sha256 =
                "544fbe90988d7ac1e828287b44d88166c8aa2738ec983b1578af7d51d7b63dd7";
            };
            beamDeps  = [ logfmt_3_0_2 ];

            meta = {
              longDescription = ''Metrix is a library to log custom application
                                metrics, in a well-structured, human *and*
                                machine readable format, for use by downstream
                                log processing systems (like Librato, Reimann,
                                etc...)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rwdaigle/metrix";
            };
          }
      ) {};

    metrix = metrix_0_2_0;

    mex_0_0_5 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mex";
            version = "0.0.5";
            src = fetchHex {
              pkg = "mex";
              version = "0.0.5";
              sha256 =
                "52765dc6f5d0b03dba9f08424b85cfbc96f873dfc769cdb6a26ac391ad3344e3";
            };

            meta = {
              description = ''Macro-expansion display helper for IEx.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mrluc/mex";
            };
          }
      ) {};

    mex = mex_0_0_5;

    microformats2_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, httpotion_2_2_0, floki_0_7_1 }:
          buildMix {
            name = "microformats2";
            version = "0.0.1";
            src = fetchHex {
              pkg = "microformats2";
              version = "0.0.1";
              sha256 =
                "9b14b1065763c422beb7fea518a1374bb17bcbe8f903381612e4deb3c9b8e385";
            };
            beamDeps  = [ httpotion_2_2_0 floki_0_7_1 ];

            meta = {
              description = ''A microformats2 parser
                            (http://microformats.org/wiki/microformats-2) for
                            Elixir'';
              license = stdenv.lib.licenses.agpl3;
              homepage = "https://github.com/ckruse/microformats2-elixir";
            };
          }
      ) {};

    microformats2 = microformats2_0_0_1;

    milliseconds_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "milliseconds";
            version = "0.0.1";
            src = fetchHex {
              pkg = "milliseconds";
              version = "0.0.1";
              sha256 =
                "6f82b9f47590e96ed90761d6eb331a9c11a40b68216d5e4867420899420035f0";
            };

            meta = {
              longDescription = '' Simple library to work with milliseconds.
                                Convert text to milliseconds: convert("2d")
                                Convert milliseconds to text: convert(8640000)
                                Calculate future time: future_time("6hrs") '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/davebryson/elixir_milliseconds";
            };
          }
      ) {};

    milliseconds = milliseconds_0_0_1;

    mime_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mime";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mime";
              version = "0.0.1";
              sha256 =
                "24098ddfbd23433846d064a337531dcd3b1c3abdad4c359bf4f1a89243270a00";
            };

            meta = {
              description = ''A mime type module for elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elixirdrops/mime";
            };
          }
      ) {};

    mime = mime_0_0_1;

    mimerl_1_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "mimerl";
            version = "1.0.0";
            src = fetchHex {
              pkg = "mimerl";
              version = "1.0.0";
              sha256 =
                "a30b01104a29bd3a363db8646e4ce0f7980f9ecd23a98707c46c3ced918c41b4";
            };

            meta = {
              description = ''Library to handle mimetypes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benoitc/mimerl";
            };
          }
      ) {};

    mimerl_1_0_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "mimerl";
            version = "1.0.2";
            src = fetchHex {
              pkg = "mimerl";
              version = "1.0.2";
              sha256 =
                "7a4c8e1115a2732a67d7624e28cf6c9f30c66711a9e92928e745c255887ba465";
            };

            meta = {
              description = ''Library to handle mimetypes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benoitc/mimerl";
            };
          }
      ) {};

    mimerl_1_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "mimerl";
            version = "1.1.0";
            src = fetchHex {
              pkg = "mimerl";
              version = "1.1.0";
              sha256 =
                "def0f1922a5dcdeeee6e4f41139b364e7f0f40239774b528a0986b12bcb42ddc";
            };

            meta = {
              description = ''Library to handle mimetypes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benoitc/mimerl";
            };
          }
      ) {};

    mimerl = mimerl_1_1_0;

    mimetype_parser_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mimetype_parser";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mimetype_parser";
              version = "0.1.1";
              sha256 =
                "ec26e5e2bb279babd5bd415d626d04040d9f719fc2b0066eb909777a93015fce";
            };

            meta = {
              description = ''parse mimetypes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/mimetype_parser";
            };
          }
      ) {};

    mimetype_parser = mimetype_parser_0_1_1;

    mimex_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mimex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mimex";
              version = "0.1.0";
              sha256 =
                "68858d5fb6a59780c3b94a445fd994856c3f1d0f3ed8dff6a95b6aa80027e4de";
            };

            meta = {
              description = ''MIME type utilities for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hex-sh/mimex";
            };
          }
      ) {};

    mimex = mimex_0_1_0;

    minmaxlist_0_0_5 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "minmaxlist";
            version = "0.0.5";
            src = fetchHex {
              pkg = "minmaxlist";
              version = "0.0.5";
              sha256 =
                "6d14c8a55196e803cb6cdfded42f57d61b96e4bd3ce7c31f36e33a3257256d8e";
            };

            meta = {
              longDescription = ''Elixir library extending `Enum.min_by/2`,
                                `Enum.max_by/2` and `Enum.min_max_by/2` to
                                return a list of results instead of just one.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seantanly/elixir-minmaxlist";
            };
          }
      ) {};

    minmaxlist = minmaxlist_0_0_5;

    misc_random_0_2_6 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "misc_random";
            version = "0.2.6";
            src = fetchHex {
              pkg = "misc_random";
              version = "0.2.6";
              sha256 =
                "4fe3db3bddcf55d93404fa9f5bf006800d54bfeb78bcf583376750d28ac0d7bc";
            };

            meta = {
              longDescription = ''This is a very thin wrapper around erlang`s
                                random:uniform method. It allows you to create
                                random strings or numbers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gutschilla/elixir-helper-random";
            };
          }
      ) {};

    misc_random = misc_random_0_2_6;

    mix_apidoc_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2 }:
          buildMix {
            name = "mix_apidoc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mix_apidoc";
              version = "0.1.0";
              sha256 =
                "e22e8a2ebf33efb6feb9a7ee6ee69a2df73496c8c6793a57cd426e9e9b1ba82e";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              longDescription = ''A mix task that triggers apidoc to create
                                documentation for RESTful web APIs from inline
                                code annotations.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sldab/mix_apidoc";
            };
          }
      ) {};

    mix_apidoc = mix_apidoc_0_1_0;

    mix_deps_tree_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mix_deps_tree";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mix_deps_tree";
              version = "0.1.0";
              sha256 =
                "de19ea3eebf578080263f25fdf6a248fdc460aa86e41d582cc0d0379329fa6b6";
            };

            meta = {
              description = ''Mix task to print dependency tree of an
                            application to a terminal'';

              homepage = "https://github.com/liveforeverx/mix_deps_tree";
            };
          }
      ) {};

    mix_deps_tree = mix_deps_tree_0_1_0;

    mix_erlang_tasks_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mix_erlang_tasks";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mix_erlang_tasks";
              version = "0.1.0";
              sha256 =
                "95d2839c422c482a70c08a8702da8242f86b773f8ab6e8602a4eb72da8da04ed";
            };

            meta = {
              longDescription = ''This project provides a few Mix tasks that
                                make it more convenient to use Mix as a build
                                tool and package manager when developing
                                applications in Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alco/mix-erlang-tasks";
            };
          }
      ) {};

    mix_erlang_tasks = mix_erlang_tasks_0_1_0;

    mix_eunit_0_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mix_eunit";
            version = "0.1.2";
            src = fetchHex {
              pkg = "mix_eunit";
              version = "0.1.2";
              sha256 =
                "910cd611635e845be3c57b2c6c0dac7af24c87055b3d289fe93d7df1dafaeb6c";
            };

            meta = {
              description = ''A mix task to run eunit tests, works for umbrella
                            projects'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dantswain/mix_eunit";
            };
          }
      ) {};

    mix_eunit = mix_eunit_0_1_2;

    mix_info_0_7_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mix_info";
            version = "0.7.2";
            src = fetchHex {
              pkg = "mix_info";
              version = "0.7.2";
              sha256 =
                "7b4430ea649bb0c978f3b761403c068b08d9781c3f325c3f0dc57c1b44f395a2";
            };

            meta = {
              longDescription = ''A mix task that counts directories, files,
                                lines of code, modules, functions etc and
                                displays the results.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pskordilakis/mix_info";
            };
          }
      ) {};

    mix_info = mix_info_0_7_2;

    mix_test_watch_0_2_5 = callPackage
      (
        {  buildMix, fetchHex, fs_0_9_2 }:
          buildMix {
            name = "mix_test_watch";
            version = "0.2.5";
            src = fetchHex {
              pkg = "mix_test_watch";
              version = "0.2.5";
              sha256 =
                "68ddd24df6d6ca77f8a95d4bb0443998031984122aa574d79434fac25f10da7b";
            };
            beamDeps  = [ fs_0_9_2 ];

            meta = {
              description = ''Automatically run tests when files change'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/mix-test.watch";
            };
          }
      ) {};

    mix_test_watch = mix_test_watch_0_2_5;

    mixpanel_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, exjsx_3_1_0 }:
          buildMix {
            name = "mixpanel";
            version = "0.0.3";
            src = fetchHex {
              pkg = "mixpanel";
              version = "0.0.3";
              sha256 =
                "7b81d80d3705e5d4451951984bac49d476e3c79131138e9ffb66538f9c51a56e";
            };
            beamDeps  = [ exjsx_3_1_0 ];

            meta = {
              description = ''A client for the Mixpanel HTTP API. See
                            mixpanel.com.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/michihuber/mixpanel_ex";
            };
          }
      ) {};

    mixpanel = mixpanel_0_0_3;

    mixpanel_api_ex_0_8_3 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "mixpanel_api_ex";
            version = "0.8.3";
            src = fetchHex {
              pkg = "mixpanel_api_ex";
              version = "0.8.3";
              sha256 =
                "1ff5eb4aa333495a86868873deb8fcd04c5f2e6f2560d77ac6ccbe07e2e3d7b4";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Elixir client for the Mixpanel API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/agevio/mixpanel_api_ex";
            };
          }
      ) {};

    mixpanel_api_ex = mixpanel_api_ex_0_8_3;

    mixpanel_data_client_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_3_1, httpoison_0_8_1 }:
          buildMix {
            name = "mixpanel_data_client";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mixpanel_data_client";
              version = "0.0.2";
              sha256 =
                "7f3bbd608ae18153655f27bd50ea01ad85630d6c1cc6ab9ed336e95419f06c86";
            };
            beamDeps  = [ poison_1_3_1 httpoison_0_8_1 ];

            meta = {
              description = ''Client library for interacting with the Mixpanel
                            Data API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeregrine/mixpanel_data_client";
            };
          }
      ) {};

    mixpanel_data_client = mixpanel_data_client_0_0_2;

    mixstar_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, netrc_0_0_2, httpoison_0_8_1 }:
          buildMix {
            name = "mixstar";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mixstar";
              version = "0.0.1";
              sha256 =
                "d7f9014711d04049c90a8f835857d1bde04647b326d1ec949e2a90477f4d4a39";
            };
            beamDeps  = [ netrc_0_0_2 httpoison_0_8_1 ];

            meta = {
              description = ''MixStar starred GitHub repository that depends on
                            your project'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/mix-star";
            };
          }
      ) {};

    mixstar = mixstar_0_0_1;

    mixunit_0_9_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "mixunit";
            version = "0.9.2";
            src = fetchHex {
              pkg = "mixunit";
              version = "0.9.2";
              sha256 =
                "2c0e66d10d479ec95c636d2de1db04cba03574282182af0df49c297230b22d43";
            };

            meta = {
              description = ''an eunit task for mix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/mixunit";
            };
          }
      ) {};

    mixunit = mixunit_0_9_2;

    mmExchangeRate_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, jsx_2_8_0, httpotion_1_0_0 }:
          buildMix {
            name = "mmExchangeRate";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mmExchangeRate";
              version = "0.0.1";
              sha256 =
                "6daf6e74bf3ce8f9d7cc19b18b023d700201a847dde94a0eef1f263ce65efbac";
            };
            beamDeps  = [ jsx_2_8_0 httpotion_1_0_0 ];

            meta = {
              longDescription = ''A simple exchange rate checker and calculator
                                based on Central Bank of Myanmar Api. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Arkar-Aung/mmExchangeRate";
            };
          }
      ) {};

    mmExchangeRate = mmExchangeRate_0_0_1;

    mmath_0_1_15 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "mmath";
            version = "0.1.15";
            src = fetchHex {
              pkg = "mmath";
              version = "0.1.15";
              sha256 =
                "2ad56c5a321dda866f36981df134b9e2f393b46786cd2549ed626d1423458c86";
            };
            compilePorts = true;

            meta = {
              description = ''math library for metric sequences and binary
                            arrays.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/mmath";
            };
          }
      ) {};

    mmath_0_1_16 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "mmath";
            version = "0.1.16";
            src = fetchHex {
              pkg = "mmath";
              version = "0.1.16";
              sha256 =
                "dcf450b5527ba445e0b33ecdb0d546fa9bff96f6efbf6d314447f32344d37ef6";
            };
            compilePorts = true;

            meta = {
              description = ''math library for metric sequences and binary
                            arrays.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/mmath";
            };
          }
      ) {};

    mmath = mmath_0_1_16;

    mobiledoc_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mobiledoc";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mobiledoc";
              version = "0.0.1";
              sha256 =
                "02aaa0168d51cd5d491127128f568ff37a6415115c45076a79bc8f7f449c524a";
            };

            meta = {
              description = ''An HTML renderer for the MobileDoc format used by
                            the ContentKit editor.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/zeppelin/mobiledoc-renderer-elixir";
            };
          }
      ) {};

    mobiledoc = mobiledoc_0_0_1;

    mochiweb_2_12_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "mochiweb";
            version = "2.12.2";
            src = fetchHex {
              pkg = "mochiweb";
              version = "2.12.2";
              sha256 =
                "d3e681d4054b74a96cf2efcd09e94157ab83a5f55ddc4ce69f90b8144673bd7a";
            };

            meta = {
              description = ''MochiWeb is an Erlang library for building
                            lightweight HTTP servers. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mochi/mochiweb";
            };
          }
      ) {};

    mochiweb = mochiweb_2_12_2;

    mock_0_1_1 = callPackage
      (
        {  buildRebar3, fetchHex, meck_0_8_4 }:
          buildRebar3 {
            name = "mock";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mock";
              version = "0.1.1";
              sha256 =
                "d2d73a2f0621bbf23011fdc6a29eca114381e77098e19b71d0774278ca80bc01";
            };

            beamDeps  = [ meck_0_8_4 ];

            meta = {
              longDescription = ''A mocking libary for the Elixir language. We
                                use the Erlang meck library to provide module
                                mocking functionality for Elixir. It uses macros
                                in Elixir to expose the functionality in a
                                convenient manner for integrating in Elixir
                                tests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jjh42/mock";
            };
          }
      ) {};

    mock = mock_0_1_1;

    module_mocker_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "module_mocker";
            version = "0.2.0";
            src = fetchHex {
              pkg = "module_mocker";
              version = "0.2.0";
              sha256 =
                "ce8aa59f0c58ce7d333a1853f6a3a106fe0cbbe79f6f9aeb72370d66ed454f5b";
            };

            meta = {
              longDescription = ''ModuleMocker allows to use different module
                                in development and test environment. It allows
                                convention to mock module for test'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rohanpujaris/module_mocker";
            };
          }
      ) {};

    module_mocker = module_mocker_0_2_0;

    moebius_1_0_8 = callPackage
      (
        {
          buildMix,
          fetchHex,
          timex_0_19_5,
          postgrex_0_9_1,
          poison_1_5_2,
          json_0_3_3,
          inflex_1_5_0
        }:
          buildMix {
            name = "moebius";
            version = "1.0.8";
            src = fetchHex {
              pkg = "moebius";
              version = "1.0.8";
              sha256 =
                "6fb42bfb7a85409e5281d990d9db5a5012221019867eef34de2e49fce245b0d9";
            };
            beamDeps  = [
                          timex_0_19_5
                          postgrex_0_9_1
                          poison_1_5_2
                          json_0_3_3
                          inflex_1_5_0
                        ];

            meta = {
              description = ''A functional approach to data access with
                            Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/robconery/moebius";
            };
          }
      ) {};

    moebius = moebius_1_0_8;

    mogrify_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mogrify";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mogrify";
              version = "0.2.0";
              sha256 =
                "47e9c3c9eba9772f0d5da28e430efef4e9317a7f805357de06a18945ebbf9a5e";
            };

            meta = {
              description = ''ImageMagick command line wrapper.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/route/mogrify";
            };
          }
      ) {};

    mogrify = mogrify_0_2_0;

    mojoauth_1_0_2 = callPackage
      (
        {  buildMix, fetchHex, timex_1_0_1 }:
          buildMix {
            name = "mojoauth";
            version = "1.0.2";
            src = fetchHex {
              pkg = "mojoauth";
              version = "1.0.2";
              sha256 =
                "72d8b3fdff6d6571d7dcc9ad46b249823c84e0321920a0e9d6f39ee5f9fc2f23";
            };
            beamDeps  = [ timex_1_0_1 ];

            meta = {
              longDescription = ''MojoAuth is a set of standard approaches to
                                cross-app authentication based on HMAC.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adhearsion/mojo-auth.ex";
            };
          }
      ) {};

    mojoauth = mojoauth_1_0_2;

    moment_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "moment";
            version = "0.1.0";
            src = fetchHex {
              pkg = "moment";
              version = "0.1.0";
              sha256 =
                "0cc098c8ba88f768ffd41e4bc4bb45b559d49361a2f8f7a39c686020da3f1842";
            };

            meta = {
              description = ''Parse, validate, manipulate, and display dates in
                            Elixir.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/atabary/moment";
            };
          }
      ) {};

    moment = moment_0_1_0;

    mon_handler_1_0_2 = callPackage
      (
        {  buildMix, fetchHex, dialyze_0_2_0 }:
          buildMix {
            name = "mon_handler";
            version = "1.0.2";
            src = fetchHex {
              pkg = "mon_handler";
              version = "1.0.2";
              sha256 =
                "d18942f95750b94e3da1d9fca7a2ea4b1b1d27c017feff76cb109b29bb308f58";
            };
            beamDeps  = [ dialyze_0_2_0 ];

            meta = {
              longDescription = ''A minimal GenServer that monitors a given
                                GenEvent handler. This server will handle exits
                                of the Handler and attempt to re-add it to the
                                manager when unexpected exits occur. Exits for
                                :normal, :shutdown or :swapped reasons will not
                                attempt a re-add to the manager.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tattdcodemonkey/mon_handler";
            };
          }
      ) {};

    mon_handler = mon_handler_1_0_2;

    monad_1_0_5 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "monad";
            version = "1.0.5";
            src = fetchHex {
              pkg = "monad";
              version = "1.0.5";
              sha256 =
                "d8ebe20971160e96bd6cdf11b5e8b5c24b70fddde3d198e5f7c3b5ebfbc78d6e";
            };

            meta = {
              description = ''Monads and do-syntax for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rmies/monad";
            };
          }
      ) {};

    monad = monad_1_0_5;

    monadex_1_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "monadex";
            version = "1.0.2";
            src = fetchHex {
              pkg = "monadex";
              version = "1.0.2";
              sha256 =
                "968784f2789fcb30b118399e51736f2265ca6b2823cc8fcabd73d6e4ac23e082";
            };

            meta = {
              description = ''Improve pipelines with monads.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rob-brown/MonadEx";
            };
          }
      ) {};

    monadex = monadex_1_0_2;

    mondo_0_1_0 = callPackage
      (
        {
          buildMix, fetchHex, poison_2_1_0, plug_1_1_1, httpoison_0_8_1
        }:
          buildMix {
            name = "mondo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mondo";
              version = "0.1.0";
              sha256 =
                "f557216314e098137f5140f1194e2eba7a2a030d78affc23ea5943f586ab1095";
            };
            beamDeps  = [ poison_2_1_0 plug_1_1_1 httpoison_0_8_1 ];

            meta = {
              description = ''An Elixir client for the Mondo API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stevedomin/mondo_elixir";
            };
          }
      ) {};

    mondo = mondo_0_1_0;

    monetized_0_3_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, ecto_1_1_3, decimal_1_1_1 }:
          buildMix {
            name = "monetized";
            version = "0.3.2";
            src = fetchHex {
              pkg = "monetized";
              version = "0.3.2";
              sha256 =
                "1978e46c6dd352fea0e9ce208835886ea4fd07dfc1555ee2f9adce98a9e82ce6";
            };
            beamDeps  = [ poison_1_5_2 ecto_1_1_3 decimal_1_1_1 ];

            meta = {
              description = ''A lightweight solution for handling and storing
                            money.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/theocodes/monetized";
            };
          }
      ) {};

    monetized = monetized_0_3_2;

    money_0_0_1_dev = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "money";
            version = "0.0.1-dev";
            src = fetchHex {
              pkg = "money";
              version = "0.0.1-dev";
              sha256 =
                "ea032fa5bbed9b9e8a91192601d612b805b1855e0ed6cdb99e3277b0a2735aeb";
            };

            meta = {
              longDescription = ''Elixir library for working with Money safer,
                                easier, and fun, is an interpretation of the
                                Fowler`s Money pattern in fun.prog.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/liuggio/money";
            };
          }
      ) {};

    money = money_0_0_1_dev;

    mongo_0_5_4 = callPackage
      (
        {  buildMix, fetchHex, bson_0_4_4 }:
          buildMix {
            name = "mongo";
            version = "0.5.4";
            src = fetchHex {
              pkg = "mongo";
              version = "0.5.4";
              sha256 =
                "fb6e0ed11bd2f193e12d0f905eb1968525b52dc99441ecbbf90c7745df246ed8";
            };
            beamDeps  = [ bson_0_4_4 ];

            meta = {
              description = ''MongoDB driver for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/checkiz/elixir-mongo";
            };
          }
      ) {};

    mongo = mongo_0_5_4;

    mongodb_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, poolboy_1_5_1, connection_1_0_2 }:
          buildMix {
            name = "mongodb";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mongodb";
              version = "0.1.1";
              sha256 =
                "714f0543288c42bc42bf3ee6ac5f52db3fbc0b152610aa2536b51c244652abe0";
            };
            beamDeps  = [ poolboy_1_5_1 connection_1_0_2 ];

            meta = {
              description = ''MongoDB driver for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/mongodb";
            };
          }
      ) {};

    mongodb = mongodb_0_1_1;

    mongodb_ecto_0_1_3 = callPackage
      (
        {  buildMix, fetchHex, mongodb_0_1_1, ecto_1_0_7 }:
          buildMix {
            name = "mongodb_ecto";
            version = "0.1.3";
            src = fetchHex {
              pkg = "mongodb_ecto";
              version = "0.1.3";
              sha256 =
                "8befad3e958f3924cb780dbf958d63539d48e23ca680e4e9dc1cf63b6827ce8a";
            };
            beamDeps  = [ mongodb_0_1_1 ecto_1_0_7 ];

            meta = {
              description = ''MongoDB adapter for Ecto'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/michalmuskala/mongodb_ecto";
            };
          }
      ) {};

    mongodb_ecto = mongodb_ecto_0_1_3;

    monk_0_1_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "monk";
            version = "0.1.3";
            src = fetchHex {
              pkg = "monk";
              version = "0.1.3";
              sha256 =
                "35e6a2eea7090612fa25a003fb95ac120f27087f203445bbc33ac18682ddd724";
            };

            meta = {
              description = ''Monk helps to distinguish good from evil with an
                            simple ok/error monad'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niahoo/monk";
            };
          }
      ) {};

    monk = monk_0_1_3;

    morph_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "morph";
            version = "0.1.0";
            src = fetchHex {
              pkg = "morph";
              version = "0.1.0";
              sha256 =
                "a20a6bfda56cb8f2d9904e2ea4b2b0a4159ab2692181919f6eb4fe9f52abf3f2";
            };

            meta = {
              description = ''Lightweight string transformations for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/cmoncrief/elixir-morph";
            };
          }
      ) {};

    morph = morph_0_1_0;

    motor_hat_0_6_1 = callPackage
      (
        {  buildMix, fetchHex, elixir_ale_0_4_1 }:
          buildMix {
            name = "motor_hat";
            version = "0.6.1";
            src = fetchHex {
              pkg = "motor_hat";
              version = "0.6.1";
              sha256 =
                "f555e0ec59ee95d4dc6c14cbc3d9d12014f9bd7882c776dde715b9b1674ffa79";
            };
            beamDeps  = [ elixir_ale_0_4_1 ];

            meta = {
              longDescription = ''Elixir implementation of the pyhton motor_hat
                                library from Adafruit for there motor_hat board.
                                Library:
                                https://github.com/adafruit/Adafruit-Motor-HAT-Python-Library
                                Board: https://www.adafruit.com/product/2348'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/matthewphilyaw/motor_hat";
            };
          }
      ) {};

    motor_hat = motor_hat_0_6_1;

    moxie_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "moxie";
            version = "0.0.1";
            src = fetchHex {
              pkg = "moxie";
              version = "0.0.1";
              sha256 =
                "193e18ce0888f01fe2b43d0dcf79af5f48e50eba3a73609703cb4c04bea2ae46";
            };

            meta = {
               license = stdenv.lib.licenses.free;
              homepage = "https://github.com/molossus/moxie";
            };
          }
      ) {};

    moxie = moxie_0_0_1;

    mpinyin_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mpinyin";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mpinyin";
              version = "0.0.2";
              sha256 =
                "1de0911391e6a76a91166f5210d4254165692ea28c00d4f153763d0a5757cb92";
            };

            meta = {
              description = ''Pinyin module for Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Hor/mpinyin";
            };
          }
      ) {};

    mpinyin = mpinyin_0_0_2;

    msgpack_0_4_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "msgpack";
            version = "0.4.0";
            src = fetchHex {
              pkg = "msgpack";
              version = "0.4.0";
              sha256 =
                "cb69184b254bcddfd0b3b813fa9ffc87dd4642ad026bb8117e2384b55239eae4";
            };

            meta = {
              description = ''MessagePack serializer/deserializer'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "http://msgpack.org";
            };
          }
      ) {};

    msgpack = msgpack_0_4_0;

    msgpax_0_7_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "msgpax";
            version = "0.7.0";
            src = fetchHex {
              pkg = "msgpax";
              version = "0.7.0";
              sha256 =
                "c51838cc08674eada16ff7ff516b1c4028fecba602bdc04747f85a94dca25202";
            };

            meta = {
              longDescription = ''This library provides an API for serializing
                                and de-serializing Elixir terms using the
                                MessagePack format'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/msgpax";
            };
          }
      ) {};

    msgpax_0_8_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "msgpax";
            version = "0.8.2";
            src = fetchHex {
              pkg = "msgpax";
              version = "0.8.2";
              sha256 =
                "aa0baa382383160d90275a1b5d8f72c457a2feed89cbb1bd080a5c3821389507";
            };

            meta = {
              longDescription = ''This library provides an API for serializing
                                and de-serializing Elixir terms using the
                                MessagePack format'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/msgpax";
            };
          }
      ) {};

    msgpax = msgpax_0_8_2;

    mstore_0_1_9 = callPackage
      (
        {  buildRebar3, fetchHex, trie_1_5_0, mmath_0_1_15 }:
          buildRebar3 {
            name = "mstore";
            version = "0.1.9";
            src = fetchHex {
              pkg = "mstore";
              version = "0.1.9";
              sha256 =
                "c9b0ac9de587e72d292b923c12fcc1ce8b74946dd688987246a5a4d26679b6ca";
            };

            beamDeps  = [ trie_1_5_0 mmath_0_1_15 ];

            meta = {
              description = ''Fast, flat metric store.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/mstore";
            };
          }
      ) {};

    mstore = mstore_0_1_9;

    mt940_0_4_0 = callPackage
      (
        {  buildMix, fetchHex, timex_0_19_5, decimal_1_1_1 }:
          buildMix {
            name = "mt940";
            version = "0.4.0";
            src = fetchHex {
              pkg = "mt940";
              version = "0.4.0";
              sha256 =
                "7d9f509b4fa43bee0feaba3fa1aceed394145daa522561cd84b584d968be3be4";
            };
            beamDeps  = [ timex_0_19_5 decimal_1_1_1 ];

            meta = {
              description = ''MT940 parser for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/my-flow/mt940";
            };
          }
      ) {};

    mt940 = mt940_0_4_0;

    mtx_1_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "mtx";
            version = "1.0.0";
            src = fetchHex {
              pkg = "mtx";
              version = "1.0.0";
              sha256 =
                "3bdcb209fe3cdfc5a6b5b95f619ecd123b7ee1d9203ace2178c8ff73be5bb90f";
            };

            meta = {
              description = ''Metrics Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/mtx";
            };
          }
      ) {};

    mtx = mtx_1_0_0;

    multidef_0_2_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "multidef";
            version = "0.2.1";
            src = fetchHex {
              pkg = "multidef";
              version = "0.2.1";
              sha256 =
                "719dfdb9206ea34fc7b49c282b30adab752f9d1efb22678907d54fa0b54c50c6";
            };

            meta = {
              longDescription = ''Lets you define multiple heads for the same
                                function: defmodule Test do import MultiDef mdef
                                fred do { :init, val } -> fred {:double, val} {
                                :double, val } -> IO.puts(val*2) a, b -> a+b end
                                end IO.inspect Test.fred 1, 2 #=> 3 IO.inspect
                                Test.fred { :init, 4 } #=> 8 '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/mdef";
            };
          }
      ) {};

    multidef = multidef_0_2_1;

    multiset_0_0_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "multiset";
            version = "0.0.4";
            src = fetchHex {
              pkg = "multiset";
              version = "0.0.4";
              sha256 =
                "f713b5102d17963fc516e0017725d716dade0b1fec979f0e3a53b8d203748c45";
            };

            meta = {
              description = ''Multisets for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/hilverd/multiset-elixir";
            };
          }
      ) {};

    multiset = multiset_0_0_4;

    murdoch_0_0_1 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1, goth_0_0_3
        }:
          buildMix {
            name = "murdoch";
            version = "0.0.1";
            src = fetchHex {
              pkg = "murdoch";
              version = "0.0.1";
              sha256 =
                "77ec44ca76d6b4a14df7222104a36cb29ed25f7d52fb3ffe30807ddc82a2d9ad";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 goth_0_0_3 ];

            meta = {
              longDescription = ''A library for interacting with Google Cloud
                                Pub/Sub (PubSub). Supports both publication and
                                pull subscription'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peburrows/murdoch";
            };
          }
      ) {};

    murdoch = murdoch_0_0_1;

    murmur_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "murmur";
            version = "1.0.0";
            src = fetchHex {
              pkg = "murmur";
              version = "1.0.0";
              sha256 =
                "5e81af1fe3c7a166830e5a695e2f2253a5255888c2f510d206d103914b4e28da";
            };

            meta = {
              longDescription = ''Murmur is a pure Elixir implementation of the
                                non-cryptographic hash Murmur3. It aims to
                                implement the x86_32bit, x86_128bit and
                                x64_128bit variants.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmcabrita/murmur";
            };
          }
      ) {};

    murmur = murmur_1_0_0;

    mustache_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mustache";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mustache";
              version = "0.0.2";
              sha256 =
                "0d91f0a6221f482e736987c59032e84f6bade6ae9179e595592e2cc0b728b441";
            };

            meta = {
              description = ''Mustache templates for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/schultyy/Mustache.ex";
            };
          }
      ) {};

    mustache = mustache_0_0_2;

    mustachex_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mustachex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mustachex";
              version = "0.0.1";
              sha256 =
                "356a7268e609c77a5b02d4ea4d98a189684a07709ec7db2dafd2b34da79bb402";
            };

            meta = {
              description = ''Mustache for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jui/mustachex";
            };
          }
      ) {};

    mustachex = mustachex_0_0_1;

    mynumber_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mynumber";
            version = "1.0.0";
            src = fetchHex {
              pkg = "mynumber";
              version = "1.0.0";
              sha256 =
                "9d95bd6c7a2178c1fe3b9dc2712a6d9567885389a1a20b27518ea6067deeb0f7";
            };

            meta = {
              description = ''Mynumber Validation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cncgl/elixir_mynumber";
            };
          }
      ) {};

    mynumber = mynumber_1_0_0;

    mysql_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "mysql";
            version = "1.0.0";
            src = fetchHex {
              pkg = "mysql";
              version = "1.0.0";
              sha256 =
                "34b8e9252e150d329798a0d7f7054f40c08703ccdd7e37dfc5116fe388513251";
            };

            meta = {
              description = ''MySQL/OTP – MySQL driver for Erlang/OTP'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/mysql-otp/mysql-otp";
            };
          }
      ) {};

    mysql = mysql_1_0_0;

    mysqlex_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, mysql_1_0_0 }:
          buildMix {
            name = "mysqlex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mysqlex";
              version = "0.0.1";
              sha256 =
                "5df9c80e9ff9a61fe9ddb4c8883963686f66e21168b64acfa55b14c50e9305ee";
            };
            beamDeps  = [ mysql_1_0_0 ];

            meta = {
              longDescription = ''An Ecto-compatible wrapper around the
                                mysql-otp library.
                                https://github.com/mysql-otp/mysql-otp'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tjheeta/mysqlex";
            };
          }
      ) {};

    mysqlex = mysqlex_0_0_1;

    n2o_2_3_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "n2o";
            version = "2.3.0";
            src = fetchHex {
              pkg = "n2o";
              version = "2.3.0";
              sha256 =
                "fca4f0a259fda332784d6d7948f8aadec5fb6a7695d5ac79b849b0ae547fb7b8";
            };

            meta = {
              description = ''N2O Application Server'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/n2o";
            };
          }
      ) {};

    n2o = n2o_2_3_0;

    nacl_0_3_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "nacl";
            version = "0.3.0";
            src = fetchHex {
              pkg = "nacl";
              version = "0.3.0";
              sha256 =
                "83a626d0ddd17a9c9528aa57a79e0e19746a42def007bc48c4984f0905098a7b";
            };
            compilePorts = true;

            meta = {
              description = ''Erlang-NaCl hex package'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tonyg/erlang-nacl";
            };
          }
      ) {};

    nacl = nacl_0_3_0;

    nadia_0_3_3 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "nadia";
            version = "0.3.3";
            src = fetchHex {
              pkg = "nadia";
              version = "0.3.3";
              sha256 =
                "8ea94a9a92aac18b98736148892c6ec672fa599cb5aa222757393c1551228b4e";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Telegram Bot API Wrapper written in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zhyu/nadia";
            };
          }
      ) {};

    nadia = nadia_0_3_3;

    nat_set_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "nat_set";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nat_set";
              version = "0.0.1";
              sha256 =
                "cc6ed65c754153d7c98c9825370780831cfbe638d162cb4ae2178eadcdd00611";
            };

            meta = {
              description = ''Represent sets of natural numbers compactly in
                            Elixir using bitwise operations'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/hilverd/nat-set-elixir";
            };
          }
      ) {};

    nat_set = nat_set_0_0_1;

    nativegen_0_4_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "nativegen";
            version = "0.4.1";
            src = fetchHex {
              pkg = "nativegen";
              version = "0.4.1";
              sha256 =
                "54c36ca3c0333f04b84f8b15fa028fcecfe77614954c78e87b22ed56e977f46f";
            };

            meta = {
              description = ''Accessible REST API code generator for native
                            app.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yoavlt/nativegen";
            };
          }
      ) {};

    nativegen = nativegen_0_4_1;

    nats_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poolboy_1_5_1, json_0_3_3 }:
          buildMix {
            name = "nats";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nats";
              version = "0.0.1";
              sha256 =
                "5568e91f56f65388ad6cb92ddbd70cec5227dadea9d12ec558e93bfe71c9bf78";
            };
            beamDeps  = [ poolboy_1_5_1 json_0_3_3 ];

            meta = {
              description = ''A NATS client written in elixir supporting
                            pub/sub for microservices'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aforward/elixir_nats";
            };
          }
      ) {};

    nats = nats_0_0_1;

    nats_msg_0_3_3 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "nats_msg";
            version = "0.3.3";
            src = fetchHex {
              pkg = "nats_msg";
              version = "0.3.3";
              sha256 =
                "80b2669f8c53395c156d3a121befe71a5131d7a42f14a38fbd7778a179b498ac";
            };

            meta = {
              description = ''Pure Erlang NATS Protocol Message
                            Encoder/Decoder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuce/nats_msg";
            };
          }
      ) {};

    nats_msg = nats_msg_0_3_3;

    natsio_0_1_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "natsio";
            version = "0.1.4";
            src = fetchHex {
              pkg = "natsio";
              version = "0.1.4";
              sha256 =
                "3ed391e3e5f494828da2cb4949e661df782004cfe8273b9f1685ba4bc858187e";
            };

            meta = {
              description = ''NATS framework for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nats-io/elixir-nats";
            };
          }
      ) {};

    natsio = natsio_0_1_4;

    natural_sort_0_3_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "natural_sort";
            version = "0.3.0";
            src = fetchHex {
              pkg = "natural_sort";
              version = "0.3.0";
              sha256 =
                "6c3476edf395c487a8b55d104458e0f029ca2adb7a0373d12a7a08643f7e7172";
            };

            meta = {
              description = ''Sort a list of strings containing numbers in a
                            natural manner. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DanCouper/natural_sort";
            };
          }
      ) {};

    natural_sort = natural_sort_0_3_0;

    naughtygram_0_2_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_1_5_2,
          httpoison_0_7_5,
          floki_0_7_1,
          exprintf_0_1_6
        }:
          buildMix {
            name = "naughtygram";
            version = "0.2.0";
            src = fetchHex {
              pkg = "naughtygram";
              version = "0.2.0";
              sha256 =
                "7ae4fb6518c06116139bc6a1fe6e3e52fe590acc4d5dc487c01fc2878ba6819d";
            };
            beamDeps  = [
                          poison_1_5_2
                          httpoison_0_7_5
                          floki_0_7_1
                          exprintf_0_1_6
                        ];

            meta = {
              description = ''Instagram Private API client library for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zensavona/naughtygram";
            };
          }
      ) {};

    naughtygram = naughtygram_0_2_0;

    navigation_history_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "navigation_history";
            version = "0.2.0";
            src = fetchHex {
              pkg = "navigation_history";
              version = "0.2.0";
              sha256 =
                "9fbddedd831930c3f2e784c53442558d90d68040f9921dfa9441da63d6b8dacc";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              description = ''Navigation history tracking plug'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/tuvistavie/plug-navigation-history";
            };
          }
      ) {};

    navigation_history = navigation_history_0_2_0;

    navigation_tree_0_4_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "navigation_tree";
            version = "0.4.4";
            src = fetchHex {
              pkg = "navigation_tree";
              version = "0.4.4";
              sha256 =
                "a4e6aad3224ad9c463a1ac0412463a18ac71b7a78ea16303ad72f43f1fb217c6";
            };

            meta = {
              longDescription = ''A navigation tree representation with helpers
                                to generate HTML out of it - depending of
                                userroles. Also creates nice HTML navbars for
                                Bootstrap. Implemented as Agent to hold config
                                state.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/gutschilla/elixir-navigation-tree";
            };
          }
      ) {};

    navigation_tree = navigation_tree_0_4_4;

    neat_ex_1_1_0 = callPackage
      (
        {  buildMix, fetchHex, json_0_3_3 }:
          buildMix {
            name = "neat_ex";
            version = "1.1.0";
            src = fetchHex {
              pkg = "neat_ex";
              version = "1.1.0";
              sha256 =
                "42d08b8c1bb5245d19864f683df77354ee466b285bac48abed3dd3471a738b21";
            };
            beamDeps  = [ json_0_3_3 ];

            meta = {
              longDescription = ''This project provides the means to define,
                                simulate, and serialize
                                Artificial-Neural-Networks (ANNs), as well as
                                the means to develop them through use of the
                                Neuro-Evolution of Augmenting Toplogies (NEAT)
                                algorithm created by Dr. Kenneth Stanley.
                                Neuro-Evolution, unlike back-propogation, easily
                                allows the usage of recurrent neural networks
                                instead of just feed-forward networks, and
                                fitness functions instead of just training data.
                                Additionally, since NEAT augments topologies,
                                all the engine needs to start is the
                                input/output layout, and a fitness function.'';
              license = stdenv.lib.licenses.asl20;
            };
          }
      ) {};

    neat_ex = neat_ex_1_1_0;

    neo4j_sips_0_1_12 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poolboy_1_5_1,
          poison_1_5_2,
          httpoison_0_7_5,
          con_cache_0_9_0
        }:
          buildMix {
            name = "neo4j_sips";
            version = "0.1.12";
            src = fetchHex {
              pkg = "neo4j_sips";
              version = "0.1.12";
              sha256 =
                "7a4547b36abd57856f04c8d0b7f2a39eb9fdf7a8c088fdf5836853559ad7aee2";
            };
            beamDeps  = [
                          poolboy_1_5_1
                          poison_1_5_2
                          httpoison_0_7_5
                          con_cache_0_9_0
                        ];

            meta = {
              description = ''A very simple and versatile Neo4J Elixir
                            driver'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/florinpatrascu/neo4j_sips";
            };
          }
      ) {};

    neo4j_sips = neo4j_sips_0_1_12;

    neotoma_1_7_3 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "neotoma";
            version = "1.7.3";
            src = fetchHex {
              pkg = "neotoma";
              version = "1.7.3";
              sha256 =
                "2da322b9b1567ffa0706a7f30f6bbbde70835ae44a1050615f4b4a3d436e0f28";
            };

            meta = {
              description = ''PEG/Packrat toolkit and parser-generator.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seancribbs/neotoma";
            };
          }
      ) {};

    neotoma = neotoma_1_7_3;

    neotomex_0_1_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "neotomex";
            version = "0.1.4";
            src = fetchHex {
              pkg = "neotomex";
              version = "0.1.4";
              sha256 =
                "0a15f69aa859882699e30a30386ad47a16abb5e862c27aea56e51040d682fa5a";
            };

            meta = {
              description = ''A PEG parser/transformer with a pleasant Elixir
                            DSL.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/jtmoulia/neotomex";
            };
          }
      ) {};

    neotomex = neotomex_0_1_4;

    nerves_io_neopixel_0_2_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "nerves_io_neopixel";
            version = "0.2.0";
            src = fetchHex {
              pkg = "nerves_io_neopixel";
              version = "0.2.0";
              sha256 =
                "662ca0af01330399eba9aff9806c086027ec5b3a2e235af4cd909282a6d09afa";
            };

            meta = {
              description = ''Drive WS2812B "NeoPixel" RGB LED strips from a
                            Raspberry Pi using Elixir.'';
              license = with stdenv.lib.licenses; [ mit free ];
              homepage = "https://github.com/GregMefford/nerves_io_neopixel";
            };
          }
      ) {};

    nerves_io_neopixel = nerves_io_neopixel_0_2_0;

    nest_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "nest";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nest";
              version = "0.0.1";
              sha256 =
                "4092651c14022a285eb4ffb8b6e9c3d6c5937729644fcc88b43f74324bc3bac3";
            };

            meta = {
              longDescription = ''A library for using the Nest API, allowing
                                integration with Nest Thermostats and other Nest
                                devices.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamzaninovich/nest";
            };
          }
      ) {};

    nest = nest_0_0_1;

    nested_set_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, ecto_1_1_3 }:
          buildMix {
            name = "nested_set";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nested_set";
              version = "0.0.1";
              sha256 =
                "cd38faeaef21ad1675d4a4467cff6b439b90ca1c07fac72857ab63804967a00d";
            };
            beamDeps  = [ ecto_1_1_3 ];

            meta = {
              longDescription = ''Nested Set implementation for Ecto/Phoenix.
                                It is our first attempt to make something like
                                acts_as_nested_set in rails. Still in WIP, be
                                cautious if planing to use.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/bansalakhil/elixir_nested_set";
            };
          }
      ) {};

    nested_set = nested_set_0_0_1;

    netrc_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "netrc";
            version = "0.0.2";
            src = fetchHex {
              pkg = "netrc";
              version = "0.0.2";
              sha256 =
                "a82b1702d8702a51b17e1756261b316ae3a72ac07bbf04e3a1258cc1210f6000";
            };

            meta = {
              description = ''Read netrc files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/netrcex";
            };
          }
      ) {};

    netrc = netrc_0_0_2;

    netstrings_2_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "netstrings";
            version = "2.0.0";
            src = fetchHex {
              pkg = "netstrings";
              version = "2.0.0";
              sha256 =
                "f510110b2a821363409fd77942f61309b6c0000a8cdda91a6f653e95f3c36c23";
            };

            meta = {
              description = ''Netstrings implementaton'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/netstrings_ex";
            };
          }
      ) {};

    netstrings = netstrings_2_0_0;

    news_0_3_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "news";
            version = "0.3.0";
            src = fetchHex {
              pkg = "news";
              version = "0.3.0";
              sha256 =
                "b8759a3cb0bb40e86d5a5ea65b911a066da4ec197b097be88fb67f6358838124";
            };

            meta = {
              description = ''Publish elixir and erlang new weekly'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zhongwencool/news";
            };
          }
      ) {};

    news = news_0_3_0;

    ngram_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ngram";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ngram";
              version = "0.0.1";
              sha256 =
                "13185be68166d8314ae63f70eceb58a4e00b441d3294633450d4f8a7c565e218";
            };

            meta = {
              description = ''n-gram tokenization and distance calculations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ardcore/ngram";
            };
          }
      ) {};

    ngram = ngram_0_0_1;

    nice_nickname_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_4_0 }:
          buildMix {
            name = "nice_nickname";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nice_nickname";
              version = "0.0.1";
              sha256 =
                "7d5c635290df8fa7a59dbaa22e519102e13ddb8ac4cae5a7a40018c9ff795b42";
            };
            beamDeps  = [ poison_1_4_0 ];

            meta = {
              description = ''A nickname generator and profanity filter for
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/skylerparr/nice_nickname";
            };
          }
      ) {};

    nice_nickname = nice_nickname_0_0_1;

    nifty_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "nifty";
            version = "0.0.3";
            src = fetchHex {
              pkg = "nifty";
              version = "0.0.3";
              sha256 =
                "ef5c6ea64835d3371382c7e042c42aec0b85625b232b4b9e1f2587e1c8e5401e";
            };

            meta = {
              longDescription = ''A semi-useful tool to generate boilerplate
                                when you want to use a NIF in your project. You
                                don`t really want to use a NIF in your project,
                                until you do. Then this might save you writing
                                most of the boilerplate.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rossjones/nifty";
            };
          }
      ) {};

    nifty = nifty_0_0_3;

    nile_0_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "nile";
            version = "0.1.2";
            src = fetchHex {
              pkg = "nile";
              version = "0.1.2";
              sha256 =
                "3b7c463f7e0d12a38757b893d41d08772d6f06e5e4a15812409b655acb4b6dfc";
            };

            meta = {
              description = ''Elixir stream extensions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/nile";
            };
          }
      ) {};

    nile = nile_0_1_2;

    ninjaproxies_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "ninjaproxies";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ninjaproxies";
              version = "0.2.0";
              sha256 =
                "5524329d00944690b362d30fef9c4032c03c401cc44d0ad9e98e147f5792fade";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Ninjaproxies client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zensavona/ninjaproxies";
            };
          }
      ) {};

    ninjaproxies = ninjaproxies_0_2_0;

    nio_google_authenticator_1_0_1 = callPackage
      (
        {  buildMix, fetchHex, pot_0_9_4, ecto_2_0_0_beta_0 }:
          buildMix {
            name = "nio_google_authenticator";
            version = "1.0.1";
            src = fetchHex {
              pkg = "nio_google_authenticator";
              version = "1.0.1";
              sha256 =
                "a8a82c6c40e9575e8bea2fc7302af05bcd478b3a6a0e9df212617f807fe23758";
            };
            beamDeps  = [ pot_0_9_4 ecto_2_0_0_beta_0 ];

            meta = {
              longDescription = ''NioGoogleAuthenticator is a collection of
                                Elixir convenience functions to generate secrets
                                and validate tokens used in conjunction with
                                Google Authenticator. It also includes functions
                                that automatically add a secret to an
                                Ecto.Changeset.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/maxneuvians/nio_google_authenticator";
            };
          }
      ) {};

    nio_google_authenticator = nio_google_authenticator_1_0_1;

    nio_google_geocoder_0_7_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_1_5_2,
          httpoison_0_8_1,
          ecto_2_0_0_beta_0
        }:
          buildMix {
            name = "nio_google_geocoder";
            version = "0.7.0";
            src = fetchHex {
              pkg = "nio_google_geocoder";
              version = "0.7.0";
              sha256 =
                "ba551ad6138b133d6b90ac96c0443aa31724084049059bf15710dac4c1f3e701";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ecto_2_0_0_beta_0 ];

            meta = {
              longDescription = ''NioGoogleGeocoder is a collection of Elixir
                                convenience functions to geocode a single, or
                                list of, addresses. It also includes a function
                                that automatically adds a geo location to an
                                `Ecto.Changeset`.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/maxneuvians/nio_google_geocoder";
            };
          }
      ) {};

    nio_google_geocoder = nio_google_geocoder_0_7_0;

    nodefinder_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, erlcloud_0_9_2 }:
          buildRebar3 {
            name = "nodefinder";
            version = "1.5.1";
            src = fetchHex {
              pkg = "nodefinder";
              version = "1.5.1";
              sha256 =
                "c617372ee14c344c546a978936d7ceab283609b3b33b6516ed9b3651ad5bfb48";
            };

            beamDeps  = [ erlcloud_0_9_2 ];

            meta = {
              description = ''Strategies For Automatic Node Discovery'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/okeuday/nodefinder";
            };
          }
      ) {};

    nodefinder = nodefinder_1_5_1;

    normalize_email_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, is_email_0_0_2 }:
          buildMix {
            name = "normalize_email";
            version = "0.0.1";
            src = fetchHex {
              pkg = "normalize_email";
              version = "0.0.1";
              sha256 =
                "ac5864ecf0d002ecbc56f9296bff7c01fc1d7e2e84e2529f7726f1a068f5d584";
            };
            beamDeps  = [ is_email_0_0_2 ];

            meta = {
              description = ''Normalize an email address'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnotander/normalize_email";
            };
          }
      ) {};

    normalize_email = normalize_email_0_0_1;

    normalize_url_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "normalize_url";
            version = "0.0.2";
            src = fetchHex {
              pkg = "normalize_url";
              version = "0.0.2";
              sha256 =
                "491ea6aa41e044dd85248407e5ebc94a608f89b30292e7ee72d52c3659421016";
            };

            meta = {
              description = ''Normalize a url'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnotander/normalize_url";
            };
          }
      ) {};

    normalize_url = normalize_url_0_0_2;

    not_qwerty123_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, gettext_0_10_0 }:
          buildMix {
            name = "not_qwerty123";
            version = "1.0.0";
            src = fetchHex {
              pkg = "not_qwerty123";
              version = "1.0.0";
              sha256 =
                "f1ec4634e5608ffae5c1d546696e77abfce8ee1fa415de93e43a2161d70d59d4";
            };
            beamDeps  = [ gettext_0_10_0 ];

            meta = {
              description = ''Library to check password strength and generate
                            random passwords.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/notqwerty123";
            };
          }
      ) {};

    not_qwerty123 = not_qwerty123_1_0_0;

    number_0_4_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "number";
            version = "0.4.1";
            src = fetchHex {
              pkg = "number";
              version = "0.4.1";
              sha256 =
                "773d28c837acf17b0056deb54b7d966a3d6a9d853e88c08829b5732cb7029fb9";
            };

            meta = {
              description = ''Convert numbers to various string formats, such
                            as currency'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/number";
            };
          }
      ) {};

    number = number_0_4_1;

    oauth2_0_3_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_1_5_2,
          plug_1_1_1,
          httpoison_0_8_1,
          hackney_1_4_8
        }:
          buildMix {
            name = "oauth2";
            version = "0.3.0";
            src = fetchHex {
              pkg = "oauth2";
              version = "0.3.0";
              sha256 =
                "ee23e6fb6ac84abce23713ba93f1df2fd368c9ad7b9288f0ef6fcec0e0249043";
            };
            beamDeps  = [
                          poison_1_5_2 plug_1_1_1 httpoison_0_8_1 hackney_1_4_8
                        ];

            meta = {
              description = ''An Elixir OAuth 2.0 Client Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/oauth2";
            };
          }
      ) {};

    oauth2_0_5_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_1_5_2,
          mimetype_parser_0_1_1,
          httpoison_0_8_1
        }:
          buildMix {
            name = "oauth2";
            version = "0.5.0";
            src = fetchHex {
              pkg = "oauth2";
              version = "0.5.0";
              sha256 =
                "1bc7d89a27a85fcdd9ebad7a0f4b80c4ae4ae98ed4cf87545667892f92e6a4dd";
            };
            beamDeps  = [ poison_1_5_2 mimetype_parser_0_1_1 httpoison_0_8_1
                      ];

            meta = {
              description = ''An Elixir OAuth 2.0 Client Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/oauth2";
            };
          }
      ) {};

    oauth2 = oauth2_0_5_0;

    oauth2_erlang_0_6_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "oauth2_erlang";
            version = "0.6.1";
            src = fetchHex {
              pkg = "oauth2_erlang";
              version = "0.6.1";
              sha256 =
                "dc60e92de379fd27c3b9296e2368e97797233a092297d41f47f3a72846b2a974";
            };

            meta = {
              description = ''Erlang OAuth 2.0 implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kivra/oauth2";
            };
          }
      ) {};

    oauth2_erlang = oauth2_erlang_0_6_1;

    oauth2cli_0_0_4 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_1_5_2,
          plug_0_9_0,
          httpoison_0_7_5,
          hackney_1_4_8,
          cowboy_1_0_4
        }:
          buildMix {
            name = "oauth2cli";
            version = "0.0.4";
            src = fetchHex {
              pkg = "oauth2cli";
              version = "0.0.4";
              sha256 =
                "16645e7bb9b3af13d1187da955403ff70c0cdaded278d0c51503ea6c29172b5b";
            };
            beamDeps  = [
                          poison_1_5_2
                          plug_0_9_0
                          httpoison_0_7_5
                          hackney_1_4_8
                          cowboy_1_0_4
                        ];

            meta = {
              description = ''Simple OAuth2 client '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mgamini/oauth2cli-elixir";
            };
          }
      ) {};

    oauth2cli = oauth2cli_0_0_4;

    oauth2ex_0_0_8 = callPackage
      (
        {
          buildMix,
          fetchHex,
          timex_1_0_0_rc4,
          plug_1_1_1,
          httpoison_0_8_1,
          exjsx_3_2_0,
          cowboy_1_0_4
        }:
          buildMix {
            name = "oauth2ex";
            version = "0.0.8";
            src = fetchHex {
              pkg = "oauth2ex";
              version = "0.0.8";
              sha256 =
                "0420cc1ee402922a77cdd9a090cb886083fdc42658df9d8401e72d7a1daab4c0";
            };
            beamDeps  = [
                          timex_1_0_0_rc4
                          plug_1_1_1
                          httpoison_0_8_1
                          exjsx_3_2_0
                          cowboy_1_0_4
                        ];

            meta = {
              description = ''An OAuth 2.0 client library for elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/oauth2ex";
            };
          }
      ) {};

    oauth2ex = oauth2ex_0_0_8;

    oauther_1_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "oauther";
            version = "1.0.2";
            src = fetchHex {
              pkg = "oauther";
              version = "1.0.2";
              sha256 =
                "2b65e6408600d5daed7bb1b108533624b6c34491f0278b44013400aa7b551e4d";
            };

            meta = {
              description = ''Library to authenticate with OAuth 1.0
                            protocol.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/oauther";
            };
          }
      ) {};

    oauther = oauther_1_0_2;

    obelisk_0_10_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          rss_0_2_1,
          plug_0_11_3,
          mock_0_1_1,
          earmark_0_1_19,
          cowboy_1_0_4,
          chronos_1_0_0,
          calliope_0_3_0,
          anubis_0_1_0
        }:
          buildMix {
            name = "obelisk";
            version = "0.10.0";
            src = fetchHex {
              pkg = "obelisk";
              version = "0.10.0";
              sha256 =
                "faf46188e3f79c8ac512ae104016f18d05598198feb35a09c8936c548dfba06e";
            };
            beamDeps  = [
                          rss_0_2_1
                          plug_0_11_3
                          mock_0_1_1
                          earmark_0_1_19
                          cowboy_1_0_4
                          chronos_1_0_0
                          calliope_0_3_0
                          anubis_0_1_0
                        ];

            meta = {
              longDescription = '' obelisk is a static site generator for
                                Elixir. It is inspired by jekyll, with the goal
                                of being fast and simple to use and extend. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bennyhallett/obelisk";
            };
          }
      ) {};

    obelisk = obelisk_0_10_0;

    observer_cli_1_0_3 = callPackage
      (
        {  buildRebar3, fetchHex, recon_2_2_1 }:
          buildRebar3 {
            name = "observer_cli";
            version = "1.0.3";
            src = fetchHex {
              pkg = "observer_cli";
              version = "1.0.3";
              sha256 =
                "18e5d9aa5412ec063cf9719bcfe73bf990c5fed5c9a3c8422c2b5d9529fc8b0d";
            };

            beamDeps  = [ recon_2_2_1 ];

            meta = {
              description = ''Visualize Erlang Nodes On The Command Line'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zhongwencool/observer_cli";
            };
          }
      ) {};

    observer_cli = observer_cli_1_0_3;

    octokit_0_0_3 = callPackage
      (
        {
          buildMix, fetchHex, timex_1_0_1, poison_2_1_0, httpoison_0_8_1
        }:
          buildMix {
            name = "octokit";
            version = "0.0.3";
            src = fetchHex {
              pkg = "octokit";
              version = "0.0.3";
              sha256 =
                "5cc713c2052c3a46e24ac04781bee4199926e2a175597b9f1c4c7d9ddb2b4241";
            };
            beamDeps  = [ timex_1_0_1 poison_2_1_0 httpoison_0_8_1 ];

            meta = {
              description = ''An Elixir library for accessing the GitHub
                            API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lee-dohm/octokit.ex";
            };
          }
      ) {};

    octokit = octokit_0_0_3;

    og_0_0_5 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "og";
            version = "0.0.5";
            src = fetchHex {
              pkg = "og";
              version = "0.0.5";
              sha256 =
                "6260a10988cee65dfc6245e60a719c15a8239167946a7f8f847fb3b9fa624022";
            };

            meta = {
              description = ''Og is a small collection of logger helper
                            functions in elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stephenmoloney/og";
            };
          }
      ) {};

    og = og_0_0_5;

    ok_0_1_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ok";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ok";
              version = "0.1.3";
              sha256 =
                "e5ac8a719f097467925d492da2cd2ad9543dfd8729739fa4a32a671337eb08bb";
            };

            meta = {
              description = ''Effecient error handling in elixir pipelines.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/CrowdHailer/OK";
            };
          }
      ) {};

    ok = ok_0_1_3;

    ok_jose_2_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ok_jose";
            version = "2.0.0";
            src = fetchHex {
              pkg = "ok_jose";
              version = "2.0.0";
              sha256 =
                "55377aa3f9b6e563aeb14b3960e4d2a697a059799e8d8ee390059faeaab219eb";
            };

            meta = {
              description = ''Pipe functions that produce ok/error tuples.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/ok_jose";
            };
          }
      ) {};

    ok_jose = ok_jose_2_0_0;

    okta_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_4_0, httpoison_0_7_5 }:
          buildMix {
            name = "okta";
            version = "0.0.1";
            src = fetchHex {
              pkg = "okta";
              version = "0.0.1";
              sha256 =
                "1fb857a60a917bfe9ff6b1bf87908ba8aa1387ddc4586f9b9465fe19415d825a";
            };
            beamDeps  = [ poison_1_4_0 httpoison_0_7_5 ];

            meta = {
              description = ''An Elixir Library for interfacing Okta'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Cobenian/okta";
            };
          }
      ) {};

    okta = okta_0_0_1;

    omise_0_1_4 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "omise";
            version = "0.1.4";
            src = fetchHex {
              pkg = "omise";
              version = "0.1.4";
              sha256 =
                "35e7fe1776da9cf5ddeb0138391868d6dbbe976e5a932183c4f445371b1b0c4d";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Omise client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/teerawat1992/omise";
            };
          }
      ) {};

    omise = omise_0_1_4;

    one_signal_0_0_6 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "one_signal";
            version = "0.0.6";
            src = fetchHex {
              pkg = "one_signal";
              version = "0.0.6";
              sha256 =
                "d90ec5f9e43d164e2942422d3c1e9a6b26a956ea135eb1a316380e12ef6b27d1";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Elixir wrapper of OneSignal'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yoavlt/one_signal";
            };
          }
      ) {};

    one_signal = one_signal_0_0_6;

    onetime_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, timex_1_0_1 }:
          buildMix {
            name = "onetime";
            version = "1.0.0";
            src = fetchHex {
              pkg = "onetime";
              version = "1.0.0";
              sha256 =
                "28481e7e239caa0002a42178af46cb80c3501faca7c1b953558e9d8dbba76c4c";
            };
            beamDeps  = [ timex_1_0_1 ];

            meta = {
              description = ''An onetime key-value store'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryo33/onetime-elixir";
            };
          }
      ) {};

    onetime = onetime_1_0_0;

    oop_0_0_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "oop";
            version = "0.0.4";
            src = fetchHex {
              pkg = "oop";
              version = "0.0.4";
              sha256 =
                "ab09b287b80ce860f34bf07652c23a9a21c4064aca730a25becfe30c6b46b81b";
            };

            meta = {
              description = ''OOP in Elixir!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wojtekmach/oop";
            };
          }
      ) {};

    oop = oop_0_0_4;

    opbeat_0_3_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "opbeat";
            version = "0.3.0";
            src = fetchHex {
              pkg = "opbeat";
              version = "0.3.0";
              sha256 =
                "20977e8ae08a1789326a3e5c0c8fa3265dd0e6ddc1fb6abe25c3a33d3fc9e692";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Elixir client for opbeat'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/teodor-pripoae/opbeat";
            };
          }
      ) {};

    opbeat = opbeat_0_3_0;

    openmaize_0_15_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          postgrex_0_11_1,
          poison_1_5_2,
          plug_1_1_1,
          ecto_2_0_0_beta_0,
          cowboy_1_0_4,
          comeonin_2_1_1
        }:
          buildMix {
            name = "openmaize";
            version = "0.15.1";
            src = fetchHex {
              pkg = "openmaize";
              version = "0.15.1";
              sha256 =
                "2ef5890c2fa041cd7d11d2b16b76dd7d8b6ac6e5044093732b1441fdaa10fd56";
            };
            beamDeps  = [
                          postgrex_0_11_1
                          poison_1_5_2
                          plug_1_1_1
                          ecto_2_0_0_beta_0
                          cowboy_1_0_4
                          comeonin_2_1_1
                        ];

            meta = {
              description = ''Authentication library for Elixir using Plug.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/elixircnx/openmaize";
            };
          }
      ) {};

    openmaize = openmaize_0_15_1;

    openstack_0_0_4 = callPackage
      (
        {
          buildMix,
          fetchHex,
          table_0_0_4,
          poison_1_5_2,
          maybe_0_0_1,
          httpoison_0_8_1
        }:
          buildMix {
            name = "openstack";
            version = "0.0.4";
            src = fetchHex {
              pkg = "openstack";
              version = "0.0.4";
              sha256 =
                "ddc471e2d95edb26b3f826986f730fbb1fb70de62edaa00a0c1cd7fd6de7fde1";
            };
            beamDeps  = [
                          table_0_0_4 poison_1_5_2 maybe_0_0_1 httpoison_0_8_1
                        ];

            meta = {
              description = ''Openstack Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zweifisch/openstack.ex";
            };
          }
      ) {};

    openstack = openstack_0_0_4;

    ordered_list_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ordered_list";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ordered_list";
              version = "0.1.0";
              sha256 =
                "6b6410f35d1bda7335fc0c5f16e2b6f5a6a8c162363073931347dc184521159d";
            };

            meta = {
              description = ''Sorting and reordering positions in a list.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aarondufall/ordered_list";
            };
          }
      ) {};

    ordered_list = ordered_list_0_1_0;

    os_utils_0_3_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "os_utils";
            version = "0.3.0";
            src = fetchHex {
              pkg = "os_utils";
              version = "0.3.0";
              sha256 =
                "b49e32630b3f198b5fe4f6858aa03d1236d659564f98d522c9e646c045e13b64";
            };

            meta = {
              description = ''OS utilities for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/orderthruchaos/os_utils";
            };
          }
      ) {};

    os_utils = os_utils_0_3_0;

    osc_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "osc";
            version = "0.1.1";
            src = fetchHex {
              pkg = "osc";
              version = "0.1.1";
              sha256 =
                "41830bf1494e6f2419ab8e35d11c0f650aab1d37b45d1b3fdfcc3682e191324c";
            };

            meta = {
              description = ''OSC encoder/decoder for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/osc_ex";
            };
          }
      ) {};

    osc = osc_0_1_1;

    overpass_0_1_1 = callPackage
      (
        {
          buildMix, fetchHex, sweet_xml_0_5_1, jsx_2_8_0, httpoison_0_7_5
        }:
          buildMix {
            name = "overpass";
            version = "0.1.1";
            src = fetchHex {
              pkg = "overpass";
              version = "0.1.1";
              sha256 =
                "6a664bd17e7612825fd7c3a0c3e0039412d83ac6d459c84018caf07e800cb6a8";
            };
            beamDeps  = [ sweet_xml_0_5_1 jsx_2_8_0 httpoison_0_7_5 ];

            meta = {
              description = ''A Elixir wrapper to access the Overpass API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CodeforChemnitz/elixir-overpass";
            };
          }
      ) {};

    overpass = overpass_0_1_1;

    p1_mysql_1_0_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "p1_mysql";
            version = "1.0.1";
            src = fetchHex {
              pkg = "p1_mysql";
              version = "1.0.1";
              sha256 =
                "4235c0d95d4ec01ed7511ebb253f5c54a9635b766a8b923f41e238ed85008e7d";
            };

            meta = {
              description = ''Pure Erlang MySQL driver'';
              license = with stdenv.lib.licenses; [ free asl20 ];
              homepage = "https://github.com/processone/p1_mysql";
            };
          }
      ) {};

    p1_mysql = p1_mysql_1_0_1;

    p1_oauth2_0_6_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "p1_oauth2";
            version = "0.6.1";
            src = fetchHex {
              pkg = "p1_oauth2";
              version = "0.6.1";
              sha256 =
                "304923dcaf1edcc84b7f3f6fab1d5235777604ec3334453cf50de1060300e002";
            };

            meta = {
              description = ''Erlang OAuth 2.0 implementation'';
              license = with stdenv.lib.licenses; [ mit asl20 ];
              homepage = "https://github.com/processone/p1_oauth2";
            };
          }
      ) {};

    p1_oauth2 = p1_oauth2_0_6_1;

    p1_pgsql_1_0_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "p1_pgsql";
            version = "1.0.1";
            src = fetchHex {
              pkg = "p1_pgsql";
              version = "1.0.1";
              sha256 =
                "7436d18f320b200e4cab6a0c16d6416aa32115b9dcfabfb05af6e9cbd62d1c0c";
            };

            meta = {
              description = ''PostgreSQL driver'';
              license = with stdenv.lib.licenses; [ epl10 asl20 ];
              homepage = "https://github.com/processone/p1_pgsql";
            };
          }
      ) {};

    p1_pgsql = p1_pgsql_1_0_1;

    p1_stringprep_1_0_1 = callPackage
      (
        {  buildRebar3, fetchHex, p1_utils_1_0_3 }:
          buildRebar3 {
            name = "p1_stringprep";
            version = "1.0.1";
            src = fetchHex {
              pkg = "p1_stringprep";
              version = "1.0.1";
              sha256 =
                "e36ce6434010eba2fb6fc18bf4ba65797be3bba17a686f79a2326d26614071c0";
            };
            compilePorts = true;
            beamDeps  = [ p1_utils_1_0_3 ];

            meta = {
              description = ''Fast Stringprep Erlang / Elixir implementation'';
              license = with stdenv.lib.licenses; [ asl20 free ];
              homepage = "https://github.com/processone/stringprep";
            };
          }
      ) {};

    p1_stringprep = p1_stringprep_1_0_1;

    p1_utils_1_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "p1_utils";
            version = "1.0.0";
            src = fetchHex {
              pkg = "p1_utils";
              version = "1.0.0";
              sha256 =
                "b2c6316286b071f2f667fb1c59b44fe0c996917515fa93374a4a3264affc5105";
            };

            meta = {
              description = ''Erlang utility modules from ProcessOne'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/p1_utils";
            };
          }
      ) {};

    p1_utils_1_0_3 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "p1_utils";
            version = "1.0.3";
            src = fetchHex {
              pkg = "p1_utils";
              version = "1.0.3";
              sha256 =
                "6bf7dc7108eee70e036ea745faf5f55b4354e267f14371ea13338f58ce402d5e";
            };

            meta = {
              description = ''Erlang utility modules from ProcessOne'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/p1_utils";
            };
          }
      ) {};

    p1_utils = p1_utils_1_0_3;

    p1_xml_1_1_1 = callPackage
      (
        {  buildRebar3, fetchHex, p1_utils_1_0_0 }:
          buildRebar3 {
            name = "p1_xml";
            version = "1.1.1";
            src = fetchHex {
              pkg = "p1_xml";
              version = "1.1.1";
              sha256 =
                "ab68956163cc5ff8c749c503507a36c543841259e78c58a2bbe0ebe76a0b7ce3";
            };
            compilePorts = true;
            beamDeps  = [ p1_utils_1_0_0 ];

            meta = {
              description = ''XML parsing library. Now obsolete. Use fast_xml
                            instead'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/xml";
            };
          }
      ) {};

    p1_xml = p1_xml_1_1_1;

    p1_xmlrpc_1_15_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "p1_xmlrpc";
            version = "1.15.1";
            src = fetchHex {
              pkg = "p1_xmlrpc";
              version = "1.15.1";
              sha256 =
                "4bca3009ad6b6c37c30255e3d63191a188e0fc6b6db41a428fe111d699d1a330";
            };

            meta = {
              description = ''XML-RPC server'';
              license = with stdenv.lib.licenses; [ bsd2 asl20 ];
              homepage = "https://github.com/processone/p1_xmlrpc";
            };
          }
      ) {};

    p1_xmlrpc = p1_xmlrpc_1_15_1;

    pact_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "pact";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pact";
              version = "0.2.0";
              sha256 =
                "a19000dcfd6c6b220e508ed44e9040d83e4814db2f6f74b11de1a4597a8de05e";
            };

            meta = {
              description = ''Elixir dependency registry for better testing and
                            cleaner code'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/pact";
            };
          }
      ) {};

    pact = pact_0_2_0;

    pagexduty_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, exjsx_3_1_0 }:
          buildMix {
            name = "pagexduty";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pagexduty";
              version = "0.1.0";
              sha256 =
                "7292a63eeb27637ff19f91f50910d2bbbc860e1eb0413aa5a5035ef32b41b232";
            };
            beamDeps  = [ httpoison_0_8_1 exjsx_3_1_0 ];

            meta = {
              description = ''A Pagerduty client for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ride/pagexduty";
            };
          }
      ) {};

    pagexduty = pagexduty_0_1_0;

    paginex_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "paginex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "paginex";
              version = "0.0.1";
              sha256 =
                "4fdc1a0bb02fbd910d24c59caae6d5793fd24a2a29d6498c04a332095e616770";
            };

            meta = {
              description = ''Exposes a pagination struct that can be helpful
                            to render the pagination html.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bhserna/paginex";
            };
          }
      ) {};

    paginex = paginex_0_0_1;

    painstaking_0_5_6 = callPackage
      (
        {  buildMix, fetchHex, exoddic_1_2_0 }:
          buildMix {
            name = "painstaking";
            version = "0.5.6";
            src = fetchHex {
              pkg = "painstaking";
              version = "0.5.6";
              sha256 =
                "f7efbebacbea3e0bb8adf79ab90ca896e54d179eb76a4da4eb1687411fa4af58";
            };
            beamDeps  = [ exoddic_1_2_0 ];

            meta = {
              description = ''Bet stake sizing recommendations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/painstaking";
            };
          }
      ) {};

    painstaking = painstaking_0_5_6;

    palette_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "palette";
            version = "0.0.2";
            src = fetchHex {
              pkg = "palette";
              version = "0.0.2";
              sha256 =
                "0ad5bbd207b4462078888882b494de937690659bb72ca34ff247b1c9c4784033";
            };

            meta = {
              description = ''A handy library for colouring strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/palette";
            };
          }
      ) {};

    palette = palette_0_0_2;

    pandex_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "pandex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pandex";
              version = "0.1.0";
              sha256 =
                "a9c6b401be16af5f385c4ff8fc7e3eb9686e2829b0855854de428ff2bd23e34f";
            };

            meta = {
              longDescription = ''Pandex is a lightweight Elixir wrapper for
                                [Pandoc](http://pandoc.org). Pandex enables you
                                to convert Markdown, CommonMark, HTML, Latex,
                                json, html to HTML, HTML5, opendocument, rtf,
                                texttile, asciidoc, markdown, json and others.
                                Pandex has no dependencies other than Pandoc
                                itself.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/filterkaapi/pandex";
            };
          }
      ) {};

    pandex = pandex_0_1_0;

    pangu_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "pangu";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pangu";
              version = "0.1.0";
              sha256 =
                "2634cc2463421757aca0a76665de83940d4fda12f8ed316ae929bb29f64d06c5";
            };

            meta = {
              description = ''Paranoid text spacing in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cataska/pangu.ex";
            };
          }
      ) {};

    pangu = pangu_0_1_0;

    parabaikElixirConverter_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "parabaikElixirConverter";
            version = "0.0.1";
            src = fetchHex {
              pkg = "parabaikElixirConverter";
              version = "0.0.1";
              sha256 =
                "ac72f871ac393ca2e42d11f9103019f6270209b1b0fe58d6f110f5dd66c387e4";
            };

            meta = {
              longDescription = ''ParabaikElixirConverter is just a Elixir
                                version of Parabaik converter. It can convert
                                from Unicode to Zawgyi-One and Zawgyi-One to
                                Unicode vice versa. '';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/Arkar-Aung/ParabaikElixirConverter";
            };
          }
      ) {};

    parabaikElixirConverter = parabaikElixirConverter_0_0_1;

    parallel_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "parallel";
            version = "0.0.3";
            src = fetchHex {
              pkg = "parallel";
              version = "0.0.3";
              sha256 =
                "d9b5e98c1892f5376b4dfa28c48a3a17029f86a28d1f9ec2f7c1a2747f256a4d";
            };

            meta = {
              description = ''Straightforward parallel processing for Elixir'';

              homepage = "https://github.com/Anonyfox/parallel";
            };
          }
      ) {};

    parallel = parallel_0_0_3;

    parallel_stream_1_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "parallel_stream";
            version = "1.0.1";
            src = fetchHex {
              pkg = "parallel_stream";
              version = "1.0.1";
              sha256 =
                "de54833225b0e67f21db47333a08685aed50d778a2f11cf7e36ae9e3fe4ee107";
            };

            meta = {
              description = ''Parallel stream operations for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/beatrichartz/parallel_stream";
            };
          }
      ) {};

    parallel_stream = parallel_stream_1_0_1;

    params_1_0_1 = callPackage
      (
        {  buildMix, fetchHex, ecto_1_1_3 }:
          buildMix {
            name = "params";
            version = "1.0.1";
            src = fetchHex {
              pkg = "params";
              version = "1.0.1";
              sha256 =
                "182cfd185f886ad72e350baa7c2b1a5a0f77c52140ddc2604a5efef0f122dd51";
            };
            beamDeps  = [ ecto_1_1_3 ];

            meta = {
              description = ''Parameter structure validation and casting with
                            Ecto.Schema.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/params";
            };
          }
      ) {};

    params = params_1_0_1;

    paratize_2_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "paratize";
            version = "2.1.2";
            src = fetchHex {
              pkg = "paratize";
              version = "2.1.2";
              sha256 =
                "3ac2970f8c40979bdd7ea6eebb106fb8c51e64e745e0f068e059cfbecbace433";
            };

            meta = {
              description = ''Elixir library providing some handy parallel
                            processing facilities.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seantanly/elixir-paratize";
            };
          }
      ) {};

    paratize = paratize_2_1_2;

    parse_client_0_2_3 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_7_5, exjsx_3_0_2 }:
          buildMix {
            name = "parse_client";
            version = "0.2.3";
            src = fetchHex {
              pkg = "parse_client";
              version = "0.2.3";
              sha256 =
                "b80b259f9645ea4767824d47c12f719faf51a8031c4162f316fbe99a77b45c23";
            };
            beamDeps  = [ httpoison_0_7_5 exjsx_3_0_2 ];

            meta = {
              description = ''Elixir client for the parse.com REST API '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elixircnx/parse_elixir_client";
            };
          }
      ) {};

    parse_client = parse_client_0_2_3;

    parse_torrent_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, bencodex_1_0_0 }:
          buildMix {
            name = "parse_torrent";
            version = "0.1.0";
            src = fetchHex {
              pkg = "parse_torrent";
              version = "0.1.0";
              sha256 =
                "4dd7e2a51e6da91d0bbf843735ceeee43dda1f704a0d2717cefa11a259dec65d";
            };
            beamDeps  = [ bencodex_1_0_0 ];

            meta = {
              description = ''Parses a .torrent file and returns a map'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/preciz/parse_torrent";
            };
          }
      ) {};

    parse_torrent = parse_torrent_0_1_0;

    parse_trans_2_9_0 = callPackage
      (
        {  buildRebar3, fetchHex, edown_0_7_0 }:
          buildRebar3 {
            name = "parse_trans";
            version = "2.9.0";
            src = fetchHex {
              pkg = "parse_trans";
              version = "2.9.0";
              sha256 =
                "dda020976ad4aafe051ce785c0460a71a11b8b6b8c08a98e2c45b83edfdf2978";
            };

            beamDeps  = [ edown_0_7_0 ];

            meta = {
              description = ''Parse transform utilities for Erlang.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/uwiger/parse_trans";
            };
          }
      ) {};

    parse_trans = parse_trans_2_9_0;

    parselix_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "parselix";
            version = "0.1.0";
            src = fetchHex {
              pkg = "parselix";
              version = "0.1.0";
              sha256 =
                "c728426e1361e94918a7b24d45b86f00e0e7225e9086b02074ac7b33a4307406";
            };

            meta = {
              description = ''A Parser Combinator Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryo33/Parselix";
            };
          }
      ) {};

    parselix = parselix_0_1_0;

    parsex_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, poison_1_1_1 }:
          buildMix {
            name = "parsex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "parsex";
              version = "0.0.2";
              sha256 =
                "024657ae8d29eba99caf90276ac2d7f27cf435a543d4036859fd4ab6ffbceb75";
            };
            beamDeps  = [ httpoison_0_8_1 poison_1_1_1 ];

            meta = {
              description = ''ParsEx is an Elixir HTTP Client for communicating
                            with Parse.com`s Restful API '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/maarek/ParsEx";
            };
          }
      ) {};

    parsex = parsex_0_0_2;

    passport_0_0_4 = callPackage
      (
        {  buildMix, fetchHex, phoenix_1_1_4, comeonin_2_1_1 }:
          buildMix {
            name = "passport";
            version = "0.0.4";
            src = fetchHex {
              pkg = "passport";
              version = "0.0.4";
              sha256 =
                "10e8e42cfd5fa834d7c3c3276c39274a3824100f2ffeed26adb4ed8475f0be91";
            };
            beamDeps  = [ phoenix_1_1_4 comeonin_2_1_1 ];

            meta = {
              description = ''Provides authentication for phoenix
                            applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/opendrops/passport";
            };
          }
      ) {};

    passport = passport_0_0_4;

    pathway_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2 }:
          buildMix {
            name = "pathway";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pathway";
              version = "0.1.0";
              sha256 =
                "ae734bc8db0d91c0876e15b7e22e8d7616701eff94b1bd2930d2783a1b11c01d";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''A HTTP client library for the Trak.io REST API.
                            '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/novabyte/pathway";
            };
          }
      ) {};

    pathway = pathway_0_1_0;

    pattern_tap_0_2_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "pattern_tap";
            version = "0.2.2";
            src = fetchHex {
              pkg = "pattern_tap";
              version = "0.2.2";
              sha256 =
                "2d17fe4c076b12efe39a362ade88d11d8bed204009027755802213db9feb3675";
            };

            meta = {
              description = ''Macro for tapping into a pattern match while
                            using the pipe operator '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mgwidmann/elixir-pattern_tap";
            };
          }
      ) {};

    pattern_tap = pattern_tap_0_2_2;

    pavlov_0_2_3 = callPackage
      (
        {  buildMix, fetchHex, meck_0_8_4 }:
          buildMix {
            name = "pavlov";
            version = "0.2.3";
            src = fetchHex {
              pkg = "pavlov";
              version = "0.2.3";
              sha256 =
                "4d38e96b7581261a49f00d2046603ad3c9af6d52abd26d16bbf6a0a5a82c9643";
            };
            beamDeps  = [ meck_0_8_4 ];

            meta = {
              longDescription = ''Pavlov is a BDD library for your Elixir
                                projects, allowing you to write expressive unit
                                tests that tell the story of how your
                                application behaves. The syntax tries to follow
                                RSpec`s wherever possible.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sproutapp/pavlov";
            };
          }
      ) {};

    pavlov = pavlov_0_2_3;

    pbkdf2_2_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "pbkdf2";
            version = "2.0.0";
            src = fetchHex {
              pkg = "pbkdf2";
              version = "2.0.0";
              sha256 =
                "1e793ce6fdb0576613115714deae9dfc1d1537eaba74f07efb36de139774488d";
            };

            meta = {
              description = ''Erlang PBKDF2 Key Derivation Function'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/basho/erlang-pbkdf2";
            };
          }
      ) {};

    pbkdf2 = pbkdf2_2_0_0;

    pc_1_2_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "pc";
            version = "1.2.0";
            src = fetchHex {
              pkg = "pc";
              version = "1.2.0";
              sha256 =
                "ef0f59d26a25af0a5247ef1a06d28d8300f8624647b02dc521ac79a7eceb8883";
            };

            meta = {
              description = ''a rebar3 port compiler for native code'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/blt/port_compiler";
            };
          }
      ) {};

    pc = pc_1_2_0;

    pdf2htmlex_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "pdf2htmlex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pdf2htmlex";
              version = "0.2.0";
              sha256 =
                "50885e995d25362b1f25c74796c0627657147d4d10ccb4be736be3b06b8a44a3";
            };

            meta = {
              description = ''Convert PDF docs to beautiful HTML files without
                            losing text or format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ricn/pdf2htmlex";
            };
          }
      ) {};

    pdf2htmlex = pdf2htmlex_0_2_0;

    pdf_generator_0_3_1 = callPackage
      (
        {  buildMix, fetchHex, porcelain_2_0_1, misc_random_0_2_6 }:
          buildMix {
            name = "pdf_generator";
            version = "0.3.1";
            src = fetchHex {
              pkg = "pdf_generator";
              version = "0.3.1";
              sha256 =
                "d81181dd60db4bfbf121161208c69d2aeabce74e24125a009761e1bf4cab11a7";
            };
            beamDeps  = [ porcelain_2_0_1 misc_random_0_2_6 ];

            meta = {
              longDescription = ''A simple wrapper for wkhtmltopdf (HTML to
                                PDF) and PDFTK (adds in encryption) for use in
                                Elixir projects.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gutschilla/elixir-pdf-generator";
            };
          }
      ) {};

    pdf_generator = pdf_generator_0_3_1;

    peatio_client_1_5_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_1_5_2,
          httpoison_0_8_1,
          hackney_1_4_4,
          decimal_1_1_1
        }:
          buildMix {
            name = "peatio_client";
            version = "1.5.0";
            src = fetchHex {
              pkg = "peatio_client";
              version = "1.5.0";
              sha256 =
                "701489d2b53b76194bb8745003c2e5665045ba4132ec1020813c63671d19081e";
            };
            beamDeps  = [
                          poison_1_5_2
                          httpoison_0_8_1
                          hackney_1_4_4
                          decimal_1_1_1
                        ];

            meta = {
              description = ''Peatio Exchange compatibility API for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peatio/peatio-client-elixir";
            };
          }
      ) {};

    peatio_client = peatio_client_1_5_0;

    peon_2_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "peon";
            version = "2.0.0";
            src = fetchHex {
              pkg = "peon";
              version = "2.0.0";
              sha256 =
                "3d87e626f5d014563d1cf319c0fe8576c8eb3f4399ecc9a0d7fb2385a180aaab";
            };

            meta = {
              description = ''Use Elixir maps as a document storage format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/supernintendo/peon";
            };
          }
      ) {};

    peon = peon_2_0_0;

    pet_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, yomel_0_5_0 }:
          buildMix {
            name = "pet";
            version = "0.1.1";
            src = fetchHex {
              pkg = "pet";
              version = "0.1.1";
              sha256 =
                "5ec25c6c2337e286919c925dce46ecfa4b09311f516ecd922c71391cd4caa697";
            };
            beamDeps  = [ yomel_0_5_0 ];

            meta = {
              description = ''Account management tool compatible with pit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/pet";
            };
          }
      ) {};

    pet = pet_0_1_1;

    petick_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "petick";
            version = "0.0.1";
            src = fetchHex {
              pkg = "petick";
              version = "0.0.1";
              sha256 =
                "77ca306a379109aeb98528fdc5642dccc0b66379e67058814470d0cf30053586";
            };

            meta = {
              description = ''Periodic timer'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niku/petick";
            };
          }
      ) {};

    petick = petick_0_0_1;

    phoenix_0_2_10 = callPackage
      (
        {
          buildMix,
          fetchHex,
          inflex_0_2_3,
          ex_conf_0_1_2,
          plug_0_5_0,
          jazz_0_1_1
        }:
          buildMix {
            name = "phoenix";
            version = "0.2.10";
            src = fetchHex {
              pkg = "phoenix";
              version = "0.2.10";
              sha256 =
                "bb65584ef5696cf90cb4823fd82d5fd930d7e092f171410687c90924519b0022";
            };
            beamDeps  = [ inflex_0_2_3 ex_conf_0_1_2 plug_0_5_0 jazz_0_1_1 ];

            meta = {
              longDescription = ''Productive. Reliable. Fast. A productive web
                                framework that does not compromise speed and
                                maintainability.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/phoenix";
            };
          }
      ) {};

    phoenix_0_4_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          cowboy_1_0_4,
          plug_0_7_0,
          linguist_0_1_5,
          poison_1_1_1
        }:
          buildMix {
            name = "phoenix";
            version = "0.4.1";
            src = fetchHex {
              pkg = "phoenix";
              version = "0.4.1";
              sha256 =
                "b1e72759e90a814b6a5d4d94e218b2c975bd156ebdfb4c54f8dc8b590267b4e0";
            };
            beamDeps  = [ cowboy_1_0_4 plug_0_7_0 linguist_0_1_5 poison_1_1_1
                      ];

            meta = {
              longDescription = ''Productive. Reliable. Fast. A productive web
                                framework that does not compromise speed and
                                maintainability.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/phoenix";
            };
          }
      ) {};

    phoenix_1_0_4 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "phoenix";
            version = "1.0.4";
            src = fetchHex {
              pkg = "phoenix";
              version = "1.0.4";
              sha256 =
                "591d5f7f3a6f5407e8491a92dc6a2d0b7b94ef4f3526ad8ef4eb82660e6f69f6";
            };
            beamDeps  = [ poison_1_5_2 plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              longDescription = ''Productive. Reliable. Fast. A productive web
                                framework that does not compromise speed and
                                maintainability.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/phoenix";
            };
          }
      ) {};

    phoenix_1_1_4 = callPackage
      (
        {  buildMix, fetchHex, poison_1_0_3, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "phoenix";
            version = "1.1.4";
            src = fetchHex {
              pkg = "phoenix";
              version = "1.1.4";
              sha256 =
                "5765238fd5caef83a8ce9242d63b4302963f44aefe70510a597aae86b5b6cd10";
            };
            beamDeps  = [ poison_1_0_3 plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              longDescription = ''Productive. Reliable. Fast. A productive web
                                framework that does not compromise speed and
                                maintainability.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/phoenix";
            };
          }
      ) {};

    phoenix = phoenix_1_1_4;

    phoenix_calendar_0_1_2 = callPackage
      (
        {  buildMix, fetchHex, phoenix_html_2_5_0, calendar_0_12_3 }:
          buildMix {
            name = "phoenix_calendar";
            version = "0.1.2";
            src = fetchHex {
              pkg = "phoenix_calendar";
              version = "0.1.2";
              sha256 =
                "f22968fd2287b419bf9791845b62501bf0177630d01a92b0ba33e5f00978ca3c";
            };
            beamDeps  = [ phoenix_html_2_5_0 calendar_0_12_3 ];

            meta = {
              description = ''Integration between Phoenix & Calendar'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lau/phoenix_calendar";
            };
          }
      ) {};

    phoenix_calendar = phoenix_calendar_0_1_2;

    phoenix_dtl_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "phoenix_dtl";
            version = "0.0.1";
            src = fetchHex {
              pkg = "phoenix_dtl";
              version = "0.0.1";
              sha256 =
                "04e80730e1437dc624bd96207eaef064320209bb73e48915b4b52a9a01271898";
            };

            meta = {
              description = ''Phoenix Template Engine for the django template
                            language '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andihit/phoenix_dtl";
            };
          }
      ) {};

    phoenix_dtl = phoenix_dtl_0_0_1;

    phoenix_ecto_3_0_0_beta_0 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_0_3, phoenix_html_2_5_0, ecto_0_2_6
        }:
          buildMix {
            name = "phoenix_ecto";
            version = "3.0.0-beta.0";
            src = fetchHex {
              pkg = "phoenix_ecto";
              version = "3.0.0-beta.0";
              sha256 =
                "f5e7c174329e9f64e6970c46a122654b6d27c619f3e6184e4db10577b0e5daac";
            };
            beamDeps  = [ poison_1_0_3 phoenix_html_2_5_0 ecto_0_2_6 ];

            meta = {
              description = ''Integration between Phoenix & Ecto'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/phoenixframework/phoenix_ecto";
            };
          }
      ) {};

    phoenix_ecto = phoenix_ecto_3_0_0_beta_0;

    phoenix_gen_gulp_jspm_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, phoenix_1_1_4 }:
          buildMix {
            name = "phoenix_gen_gulp_jspm";
            version = "1.0.0";
            src = fetchHex {
              pkg = "phoenix_gen_gulp_jspm";
              version = "1.0.0";
              sha256 =
                "7124ff1f232d82da40619579d2b3a5d15834f9cf3880ba3e8176cb7321b9eb59";
            };
            beamDeps  = [ phoenix_1_1_4 ];

            meta = {
              description = ''Replaces Brunch with Gulp and adds JSPM'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/phoenix_gen_gulp_jspm";
            };
          }
      ) {};

    phoenix_gen_gulp_jspm = phoenix_gen_gulp_jspm_1_0_0;

    phoenix_generator_0_2_1 = callPackage
      (
        {  buildMix, fetchHex, inflex_0_3_0 }:
          buildMix {
            name = "phoenix_generator";
            version = "0.2.1";
            src = fetchHex {
              pkg = "phoenix_generator";
              version = "0.2.1";
              sha256 =
                "2be3753fba7b4a9afa461d270ab5111d76d1e5997b8e1587344051d85b6a1a36";
            };
            beamDeps  = [ inflex_0_3_0 ];

            meta = {
              description = ''A collection of boilerplate generators for the
                            Phoenix web framework.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/etufe/phoenix_generator";
            };
          }
      ) {};

    phoenix_generator = phoenix_generator_0_2_1;

    phoenix_haml_0_2_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          phoenix_html_2_5_0,
          phoenix_1_0_4,
          calliope_0_3_0
        }:
          buildMix {
            name = "phoenix_haml";
            version = "0.2.0";
            src = fetchHex {
              pkg = "phoenix_haml";
              version = "0.2.0";
              sha256 =
                "ec4f0dae227972a472661f1e8f9c51e8618290c8b6e5ca084ff81f6e7318468e";
            };
            beamDeps  = [ phoenix_html_2_5_0 phoenix_1_0_4 calliope_0_3_0 ];

            meta = {
              description = ''Phoenix Template Engine for Haml'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrismccord/phoenix_haml";
            };
          }
      ) {};

    phoenix_haml = phoenix_haml_0_2_0;

    phoenix_html_2_5_0 = callPackage
      (
        {  buildMix, fetchHex, plug_0_8_1 }:
          buildMix {
            name = "phoenix_html";
            version = "2.5.0";
            src = fetchHex {
              pkg = "phoenix_html";
              version = "2.5.0";
              sha256 =
                "a3ef7288bf4a8304c65092774f602e3b1120536bed20dba9e90a5d2d41163fd4";
            };
            beamDeps  = [ plug_0_8_1 ];

            meta = {
              description = ''Phoenix.HTML functions for working with HTML
                            strings and templates'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/phoenix_html";
            };
          }
      ) {};

    phoenix_html = phoenix_html_2_5_0;

    phoenix_html_sanitizer_0_2_0 = callPackage
      (
        {
          buildMix, fetchHex, phoenix_html_2_5_0, html_sanitize_ex_0_3_1
        }:
          buildMix {
            name = "phoenix_html_sanitizer";
            version = "0.2.0";
            src = fetchHex {
              pkg = "phoenix_html_sanitizer";
              version = "0.2.0";
              sha256 =
                "4cb5ae02d5560ff4e24cc378487065d038f0efd4883925a770b05c1c1d56a13c";
            };
            beamDeps  = [ phoenix_html_2_5_0 html_sanitize_ex_0_3_1 ];

            meta = {
              description = ''HTML sanitizer for Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/elixirstatus/phoenix_html_sanitizer";
            };
          }
      ) {};

    phoenix_html_sanitizer = phoenix_html_sanitizer_0_2_0;

    phoenix_linguist_0_0_1 = callPackage
      (
        {
          buildMix, fetchHex, phoenix_1_1_4, linguist_0_1_5, cowboy_1_0_4
        }:
          buildMix {
            name = "phoenix_linguist";
            version = "0.0.1";
            src = fetchHex {
              pkg = "phoenix_linguist";
              version = "0.0.1";
              sha256 =
                "4a27898ab733b3b55c9fe38bd7ae299a92cfb290dc7d9bc940e1af653de1b1eb";
            };
            beamDeps  = [ phoenix_1_1_4 linguist_0_1_5 cowboy_1_0_4 ];

            meta = {
              longDescription = ''A project that integrates Phoenix with
                                Linguist, providing a plug and view helpers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jxs/phoenix_linguist";
            };
          }
      ) {};

    phoenix_linguist = phoenix_linguist_0_0_1;

    phoenix_live_reload_1_0_3 = callPackage
      (
        {  buildMix, fetchHex, phoenix_0_2_10, fs_0_9_2 }:
          buildMix {
            name = "phoenix_live_reload";
            version = "1.0.3";
            src = fetchHex {
              pkg = "phoenix_live_reload";
              version = "1.0.3";
              sha256 =
                "fbb65b7e4f4205b2e5d7061480889bd34d5c943a56feebd20b3dd949332fed85";
            };
            beamDeps  = [ phoenix_0_2_10 fs_0_9_2 ];

            meta = {
              description = ''Provides live-reload functionality for Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/phoenixframework/phoenix_live_reload";
            };
          }
      ) {};

    phoenix_live_reload = phoenix_live_reload_1_0_3;

    phoenix_pubsub_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "phoenix_pubsub";
            version = "0.0.1";
            src = fetchHex {
              pkg = "phoenix_pubsub";
              version = "0.0.1";
              sha256 =
                "ea9f1853699e838965155af063f536f440afacadca316fb657858b3ac40da2eb";
            };

            meta = {
              description = ''Distributed PubSub and Presence platform'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/phoenix_pubsub";
            };
          }
      ) {};

    phoenix_pubsub = phoenix_pubsub_0_0_1;

    phoenix_pubsub_postgres_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, postgrex_0_11_1, poolboy_1_4_2 }:
          buildMix {
            name = "phoenix_pubsub_postgres";
            version = "0.0.2";
            src = fetchHex {
              pkg = "phoenix_pubsub_postgres";
              version = "0.0.2";
              sha256 =
                "85b43b941b8c3dcf3f967dcd5bca1e29716235398b8b6c03d52d6611d5cf82ad";
            };
            beamDeps  = [ postgrex_0_11_1 poolboy_1_4_2 ];

            meta = {
              description = ''Postgresql PubSub adapter for Phoenix apps'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/opendrops/phoenix-pubsub-postgres";
            };
          }
      ) {};

    phoenix_pubsub_postgres = phoenix_pubsub_postgres_0_0_2;

    phoenix_pubsub_rabbitmq_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poolboy_1_4_2, amqp_0_1_4 }:
          buildMix {
            name = "phoenix_pubsub_rabbitmq";
            version = "0.0.1";
            src = fetchHex {
              pkg = "phoenix_pubsub_rabbitmq";
              version = "0.0.1";
              sha256 =
                "e2158052cb3adfedca953fe8318dd5633d276728cc4fae6daa54d0dd7b7401c6";
            };
            beamDeps  = [ poolboy_1_4_2 amqp_0_1_4 ];

            meta = {
              description = ''RabbitMQ adapter for the Phoenix framework PubSub
                            layer. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pma/phoenix_pubsub_rabbitmq";
            };
          }
      ) {};

    phoenix_pubsub_rabbitmq = phoenix_pubsub_rabbitmq_0_0_1;

    phoenix_pubsub_redis_2_0_0 = callPackage
      (
        {
          buildMix, fetchHex, redo_2_0_1, poolboy_1_2_1, phoenix_1_1_4
        }:
          buildMix {
            name = "phoenix_pubsub_redis";
            version = "2.0.0";
            src = fetchHex {
              pkg = "phoenix_pubsub_redis";
              version = "2.0.0";
              sha256 =
                "a10e9f4c419bed62d807e8be82f9ed5c9d8dfaef302165a0eec3e51ed1cb1cfa";
            };
            beamDeps  = [ redo_2_0_1 poolboy_1_2_1 phoenix_1_1_4 ];

            meta = {
              description = ''The Redis PubSub adapter for the Phoenix
                            framework'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/phoenixframework/phoenix_pubsub_redis";
            };
          }
      ) {};

    phoenix_pubsub_redis = phoenix_pubsub_redis_2_0_0;

    phoenix_pubsub_vernemq_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "phoenix_pubsub_vernemq";
            version = "0.0.3";
            src = fetchHex {
              pkg = "phoenix_pubsub_vernemq";
              version = "0.0.3";
              sha256 =
                "92c228aee119d21c68b0b43250414686dee16986cb4d0039608612abd0d22824";
            };

            meta = {
              description = ''The VerneMQ MQTT pubsub adapter for the Phoenix
                            framework'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/larshesel/phoenix_pubsub_vernemq";
            };
          }
      ) {};

    phoenix_pubsub_vernemq = phoenix_pubsub_vernemq_0_0_3;

    phoenix_simple_form_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, phoenix_html_2_5_0 }:
          buildMix {
            name = "phoenix_simple_form";
            version = "0.0.2";
            src = fetchHex {
              pkg = "phoenix_simple_form";
              version = "0.0.2";
              sha256 =
                "e059ada8c507168d2267d6a1db1790192c063ca5e2a3579dfd2d1b07e25e9f45";
            };
            beamDeps  = [ phoenix_html_2_5_0 ];

            meta = {
              description = ''Easy form handling for phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sbrink/phoenix_simple_form";
            };
          }
      ) {};

    phoenix_simple_form = phoenix_simple_form_0_0_2;

    phoenix_slim_0_4_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          slim_fast_0_10_0,
          phoenix_html_2_5_0,
          phoenix_1_1_4
        }:
          buildMix {
            name = "phoenix_slim";
            version = "0.4.1";
            src = fetchHex {
              pkg = "phoenix_slim";
              version = "0.4.1";
              sha256 =
                "4225e74608e29c93c603c6cde61766b604495e04ef65d6ca325ff1a9a492c563";
            };
            beamDeps  = [ slim_fast_0_10_0 phoenix_html_2_5_0 phoenix_1_1_4
                      ];

            meta = {
              description = ''Phoenix Template Engine for Slim'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/doomspork/phoenix_slim";
            };
          }
      ) {};

    phoenix_slim = phoenix_slim_0_4_1;

    phoenix_slime_0_4_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          slime_0_12_1,
          phoenix_html_2_5_0,
          phoenix_1_1_4,
          cowboy_1_0_4
        }:
          buildMix {
            name = "phoenix_slime";
            version = "0.4.1";
            src = fetchHex {
              pkg = "phoenix_slime";
              version = "0.4.1";
              sha256 =
                "aa4036f88a0cab517ca8fa506c7c465fbb89f9857270c5711f6b83cec1cb8849";
            };
            beamDeps  = [
                          slime_0_12_1
                          phoenix_html_2_5_0
                          phoenix_1_1_4
                          cowboy_1_0_4
                        ];

            meta = {
              description = ''Phoenix Template Engine for Slim-like
                            templates'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slime-lang/phoenix_slime";
            };
          }
      ) {};

    phoenix_slime = phoenix_slime_0_4_1;

    phoenix_timex_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, timex_1_0_1, phoenix_html_2_5_0 }:
          buildMix {
            name = "phoenix_timex";
            version = "0.0.3";
            src = fetchHex {
              pkg = "phoenix_timex";
              version = "0.0.3";
              sha256 =
                "47b2c32de83581ef12b58bdd9518c8180684ec7161cc7944d3b27542e414bc84";
            };
            beamDeps  = [ timex_1_0_1 phoenix_html_2_5_0 ];

            meta = {
              description = ''Phoenix and Timex integration'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Paradem/phoenix_timex";
            };
          }
      ) {};

    phoenix_timex = phoenix_timex_0_0_3;

    phoenix_token_auth_0_4_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          timex_1_0_0_rc4,
          secure_random_0_1_1,
          postgrex_0_11_1,
          poison_1_4_0,
          phoenix_1_1_4,
          mailgun_0_1_2,
          joken_0_13_1,
          ecto_2_0_0_beta_0,
          cowboy_1_0_4,
          comeonin_2_0_3
        }:
          buildMix {
            name = "phoenix_token_auth";
            version = "0.4.0";
            src = fetchHex {
              pkg = "phoenix_token_auth";
              version = "0.4.0";
              sha256 =
                "be1f3ed9d770b4d8650a30b6c091513d44e0c0331616366457713db77de2a620";
            };
            beamDeps  = [
                          timex_1_0_0_rc4
                          secure_random_0_1_1
                          postgrex_0_11_1
                          poison_1_4_0
                          phoenix_1_1_4
                          mailgun_0_1_2
                          joken_0_13_1
                          ecto_2_0_0_beta_0
                          cowboy_1_0_4
                          comeonin_2_0_3
                        ];

            meta = {
              longDescription = ''Solution for token auth in Phoenix apps.
                                Provides an api for registration, account
                                confirmation and logging in.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/manukall/phoenix_token_auth";
            };
          }
      ) {};

    phoenix_token_auth = phoenix_token_auth_0_4_0;

    phst_transform_0_9_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "phst_transform";
            version = "0.9.0";
            src = fetchHex {
              pkg = "phst_transform";
              version = "0.9.0";
              sha256 =
                "a5e76cd5b0549a36ec6268644a04366a7672bf449ecb5065dba441faf0c29dc1";
            };

            meta = {
              longDescription = ''An Elixir Protocol and implementation for
                                creating a tranform of any elixir data.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/philosophers-stone/transform";
            };
          }
      ) {};

    phst_transform = phst_transform_0_9_0;

    picosat_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "picosat";
            version = "0.1.0";
            src = fetchHex {
              pkg = "picosat";
              version = "0.1.0";
              sha256 =
                "d9bfa31240906306a6dae6bdd6fb1cb452e9462a391efa63017b17b2877cab51";
            };
            compilePorts = true;

            meta = {
              description = ''Erlang bindings for PicoSAT'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsloughter/picosat";
            };
          }
      ) {};

    picosat = picosat_0_1_0;

    pigeon_0_3_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_7_5 }:
          buildMix {
            name = "pigeon";
            version = "0.3.0";
            src = fetchHex {
              pkg = "pigeon";
              version = "0.3.0";
              sha256 =
                "cb332c872656fc426b10309f0c840635549727f35df4deb52816f2c6b920639c";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_7_5 ];

            meta = {
              description = ''HTTP2-compliant wrapper for sending iOS and
                            Android push notifications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/codedge-llc/pigeon";
            };
          }
      ) {};

    pigeon = pigeon_0_3_0;

    pin_elixir_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpotion_2_1_0 }:
          buildMix {
            name = "pin_elixir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "pin_elixir";
              version = "0.0.1";
              sha256 =
                "0140eecb7c714f9dadbcec26c45e2b2d770735029b7dcf98cdba9d793d80130a";
            };
            beamDeps  = [ poison_1_5_2 httpotion_2_1_0 ];

            meta = {
              description = ''A library to wrap the Pin Payments API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mfeckie/pin_elixir";
            };
          }
      ) {};

    pin_elixir = pin_elixir_0_0_1;

    pinglix_1_1_1 = callPackage
      (
        {  buildMix, fetchHex, timex_0_19_5, poison_1_4_0, plug_1_1_1 }:
          buildMix {
            name = "pinglix";
            version = "1.1.1";
            src = fetchHex {
              pkg = "pinglix";
              version = "1.1.1";
              sha256 =
                "bff8166655cc143518c0089aca104755ab188816707fb73a5739dd094f45e895";
            };
            beamDeps  = [ timex_0_19_5 poison_1_4_0 plug_1_1_1 ];

            meta = {
              longDescription = ''Plug compatible health check system in Elixir
                                based on
                                https://github.com/jbarnette/pinglish.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pvdvreede/pinglix";
            };
          }
      ) {};

    pinglix = pinglix_1_1_1;

    pinyin_0_1_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "pinyin";
            version = "0.1.4";
            src = fetchHex {
              pkg = "pinyin";
              version = "0.1.4";
              sha256 =
                "e0fc3dc148bc938ad12f5aefabf017620eb314ca4cf045b91ad195c557d5fa96";
            };

            meta = {
              description = ''chinese pinyin library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lidashuang/pinyin";
            };
          }
      ) {};

    pinyin = pinyin_0_1_4;

    pipe_0_0_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "pipe";
            version = "0.0.2";
            src = fetchHex {
              pkg = "pipe";
              version = "0.0.2";
              sha256 =
                "ad6d90981606bb04d040c0af49cf493417994214ce6e74ac572dc2ee67e2c064";
            };

            meta = {
              description = ''An Elixir extension that extends the pipe (|>)
                            operator through macros. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/batate/elixir-pipes";
            };
          }
      ) {};

    pipe = pipe_0_0_2;

    pipe_here_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "pipe_here";
            version = "1.0.0";
            src = fetchHex {
              pkg = "pipe_here";
              version = "1.0.0";
              sha256 =
                "95558a60ec7736685029e1b28b1c7cd7c7eae714fab779406aa2512c0f29c51e";
            };

            meta = {
              description = ''An Elixir macro for easily piping arguments at
                            any position.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/pipe_here";
            };
          }
      ) {};

    pipe_here = pipe_here_1_0_0;

    pipe_while_ok_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "pipe_while_ok";
            version = "0.0.2";
            src = fetchHex {
              pkg = "pipe_while_ok";
              version = "0.0.2";
              sha256 =
                "b62708d0a0b82f421f937b99c5ff21a966e21d9a1f42ba75b8788100ac2c6567";
            };

            meta = {
              description = ''PipeWhileOk =========== Moved to
                            https://githib.com/pragdave/exlibris '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/pipe_while_ok";
            };
          }
      ) {};

    pipe_while_ok = pipe_while_ok_0_0_2;

    pipette_0_0_4 = callPackage
      (
        {  buildMix, fetchHex, mock_0_1_1 }:
          buildMix {
            name = "pipette";
            version = "0.0.4";
            src = fetchHex {
              pkg = "pipette";
              version = "0.0.4";
              sha256 =
                "8742ea9b115071c3aa7cec4ddacfa161ff63fd647e0491ac442cb118d7198e26";
            };
            beamDeps  = [ mock_0_1_1 ];

            meta = {
              description = ''new_data = pipette(data, template)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/liquidz/pipette";
            };
          }
      ) {};

    pipette = pipette_0_0_4;

    pixie_0_3_3 = callPackage
      (
        {
          buildMix,
          fetchHex,
          timex_0_19_5,
          secure_random_0_2_0,
          poolboy_1_5_1,
          poison_1_5_2,
          plug_1_0_3,
          gproc_0_5_0,
          exredis_0_2_3,
          ex_minimatch_0_0_1,
          ex_doc_0_11_4,
          cowboy_1_0_4,
          con_cache_0_9_0
        }:
          buildMix {
            name = "pixie";
            version = "0.3.3";
            src = fetchHex {
              pkg = "pixie";
              version = "0.3.3";
              sha256 =
                "b89f9b3db05b68ce79656a4b188bae1065e96b286b5422321c37fcd508350b32";
            };
            beamDeps  = [
                          timex_0_19_5
                          secure_random_0_2_0
                          poolboy_1_5_1
                          poison_1_5_2
                          plug_1_0_3
                          gproc_0_5_0
                          exredis_0_2_3
                          ex_minimatch_0_0_1
                          ex_doc_0_11_4
                          cowboy_1_0_4
                          con_cache_0_9_0
                        ];

            meta = {
              description = ''Bayeux compatible server written in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/messagerocket/pixie";
            };
          }
      ) {};

    pixie = pixie_0_3_3;

    pkcs7_1_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "pkcs7";
            version = "1.0.2";
            src = fetchHex {
              pkg = "pkcs7";
              version = "1.0.2";
              sha256 =
                "0e4faa65411e204b7952712d58f657335109ecbb24cf79163dc96458ba8d6518";
            };

            meta = {
              description = ''PKCS7 binary padding for erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/pkcs7.erl";
            };
          }
      ) {};

    pkcs7 = pkcs7_1_0_2;

    placid_0_1_3 = callPackage
      (
        {
          buildMix,
          fetchHex,
          xml_builder_0_0_8,
          poison_1_2_1,
          plug_0_9_0,
          linguist_0_1_5,
          http_router_0_0_8,
          cowboy_1_0_4
        }:
          buildMix {
            name = "placid";
            version = "0.1.3";
            src = fetchHex {
              pkg = "placid";
              version = "0.1.3";
              sha256 =
                "78d30028ba9238c9b2cb7c5f91dc818aa3746c1c410a38fec9732de8a3c20146";
            };
            beamDeps  = [
                          xml_builder_0_0_8
                          poison_1_2_1
                          plug_0_9_0
                          linguist_0_1_5
                          http_router_0_0_8
                          cowboy_1_0_4
                        ];

            meta = {
              longDescription = ''A REST toolkit for building highly-scalable
                                and fault-tolerant HTTP APIs with Elixir '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/placid";
            };
          }
      ) {};

    placid = placid_0_1_3;

    plasm_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, postgrex_0_11_1, ecto_2_0_0_beta_0 }:
          buildMix {
            name = "plasm";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plasm";
              version = "0.1.0";
              sha256 =
                "0eb476cae0b02dedbbc558f59ca22f0791221129d15fba570c0a3b96401d6836";
            };
            beamDeps  = [ postgrex_0_11_1 ecto_2_0_0_beta_0 ];

            meta = {
              longDescription = ''Plasm is a composable query library for Ecto
                                containing several common query transforms to
                                make working with Ecto easier.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/atomic-fads/plasm";
            };
          }
      ) {};

    plasm = plasm_0_1_0;

    plist_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "plist";
            version = "0.0.2";
            src = fetchHex {
              pkg = "plist";
              version = "0.0.2";
              sha256 =
                "e3560e6d94c4464b7479bb42a0fc1450e89fe99e67af099fb5cb2b2c7402409f";
            };

            meta = {
              description = ''An Elixir library to parse files in Apple`s
                            property list formats'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ciaran/plist";
            };
          }
      ) {};

    plist = plist_0_0_2;

    plug_0_11_3 = callPackage
      (
        {  buildMix, fetchHex, cowboy_1_0_4 }:
          buildMix {
            name = "plug";
            version = "0.11.3";
            src = fetchHex {
              pkg = "plug";
              version = "0.11.3";
              sha256 =
                "82834fa130af2520b9dad4a271f4fe5c25a456cf2334aae35ef84989efec65e3";
            };
            beamDeps  = [ cowboy_1_0_4 ];

            meta = {
              description = ''A specification and conveniences for composable
                            modules between web applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/plug";
            };
          }
      ) {};

    plug_0_12_2 = callPackage
      (
        {  buildMix, fetchHex, cowboy_1_0_4 }:
          buildMix {
            name = "plug";
            version = "0.12.2";
            src = fetchHex {
              pkg = "plug";
              version = "0.12.2";
              sha256 =
                "b26e8c636fc5b83e0b69767fb3cb2c693703b7f8c1eed11091e57f6e7caebc2d";
            };
            beamDeps  = [ cowboy_1_0_4 ];

            meta = {
              description = ''A specification and conveniences for composable
                            modules between web applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/plug";
            };
          }
      ) {};

    plug_0_13_1 = callPackage
      (
        {  buildMix, fetchHex, cowboy_1_0_4 }:
          buildMix {
            name = "plug";
            version = "0.13.1";
            src = fetchHex {
              pkg = "plug";
              version = "0.13.1";
              sha256 =
                "50b7ef7c753e703b04ed79bc254ed0fbe07db3ed90894598d377c41e15f4490b";
            };
            beamDeps  = [ cowboy_1_0_4 ];

            meta = {
              description = ''A specification and conveniences for composable
                            modules between web applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/plug";
            };
          }
      ) {};

    plug_0_14_0 = callPackage
      (
        {  buildMix, fetchHex, cowboy_1_0_4 }:
          buildMix {
            name = "plug";
            version = "0.14.0";
            src = fetchHex {
              pkg = "plug";
              version = "0.14.0";
              sha256 =
                "bacee77168bce635d959d8c41e0723936fba41170edf11665deaf30ee668303d";
            };
            beamDeps  = [ cowboy_1_0_4 ];

            meta = {
              description = ''A specification and conveniences for composable
                            modules between web applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/plug";
            };
          }
      ) {};

    plug_0_5_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "plug";
            version = "0.5.0";
            src = fetchHex {
              pkg = "plug";
              version = "0.5.0";
              sha256 =
                "e34388510cdf725521cc772a8e711a090e1684bd964ced89d86b53dfd7a66ff5";
            };

            meta = {
              description = ''A specification and conveniences for composable
                            modules between web applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/plug";
            };
          }
      ) {};

    plug_0_7_0 = callPackage
      (
        {  buildMix, fetchHex, cowboy_1_0_4 }:
          buildMix {
            name = "plug";
            version = "0.7.0";
            src = fetchHex {
              pkg = "plug";
              version = "0.7.0";
              sha256 =
                "c25ceaacbdd0085653d84f8187c179e523b2edd54d393673df2d761f85795867";
            };
            beamDeps  = [ cowboy_1_0_4 ];

            meta = {
              description = ''A specification and conveniences for composable
                            modules between web applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/plug";
            };
          }
      ) {};

    plug_0_8_1 = callPackage
      (
        {  buildMix, fetchHex, cowboy_1_0_4 }:
          buildMix {
            name = "plug";
            version = "0.8.1";
            src = fetchHex {
              pkg = "plug";
              version = "0.8.1";
              sha256 =
                "bf16b2ac50df99b6179b25dd35737d5fb9dda1442f00bbeb54190244de5d8617";
            };
            beamDeps  = [ cowboy_1_0_4 ];

            meta = {
              description = ''A specification and conveniences for composable
                            modules between web applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/plug";
            };
          }
      ) {};

    plug_0_8_4 = callPackage
      (
        {  buildMix, fetchHex, cowboy_1_0_4 }:
          buildMix {
            name = "plug";
            version = "0.8.4";
            src = fetchHex {
              pkg = "plug";
              version = "0.8.4";
              sha256 =
                "22c18f351cb30df9ca0b33bedd545bdbbc7eee60f1321cfcfe703228355ff2ec";
            };
            beamDeps  = [ cowboy_1_0_4 ];

            meta = {
              description = ''A specification and conveniences for composable
                            modules between web applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/plug";
            };
          }
      ) {};

    plug_0_9_0 = callPackage
      (
        {  buildMix, fetchHex, cowboy_1_0_4 }:
          buildMix {
            name = "plug";
            version = "0.9.0";
            src = fetchHex {
              pkg = "plug";
              version = "0.9.0";
              sha256 =
                "2715df7f9e2650d1725576f5a683317d8dcaf656f524c14b384d7a54d74a09d1";
            };
            beamDeps  = [ cowboy_1_0_4 ];

            meta = {
              description = ''A specification and conveniences for composable
                            modules between web applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/plug";
            };
          }
      ) {};

    plug_1_0_3 = callPackage
      (
        {  buildMix, fetchHex, cowboy_1_0_4 }:
          buildMix {
            name = "plug";
            version = "1.0.3";
            src = fetchHex {
              pkg = "plug";
              version = "1.0.3";
              sha256 =
                "31d1cc267cf48e3db8ce00b7a7bb6ced41c04d8f3593a61318f9a7f721997f6e";
            };
            beamDeps  = [ cowboy_1_0_4 ];

            meta = {
              description = ''A specification and conveniences for composable
                            modules between web applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/plug";
            };
          }
      ) {};

    plug_1_1_1 = callPackage
      (
        {  buildMix, fetchHex, cowboy_1_0_4 }:
          buildMix {
            name = "plug";
            version = "1.1.1";
            src = fetchHex {
              pkg = "plug";
              version = "1.1.1";
              sha256 =
                "15a8ebd70bc8e545ee96212f26751d57908a3ea63cd5ca1d664a5d70038b8071";
            };
            beamDeps  = [ cowboy_1_0_4 ];

            meta = {
              description = ''A specification and conveniences for composable
                            modules between web applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/plug";
            };
          }
      ) {};

    plug = plug_1_1_1;

    plug_abort_2_1_1 = callPackage
      (
        {  buildMix, fetchHex, plug_0_8_1, cowboy_1_0_4, poison_1_0_3 }:
          buildMix {
            name = "plug_abort";
            version = "2.1.1";
            src = fetchHex {
              pkg = "plug_abort";
              version = "2.1.1";
              sha256 =
                "8da98a882ea79e08443e7d26c94ee2b572560efca3f0a5922c69e508ac02d883";
            };
            beamDeps  = [ plug_0_8_1 cowboy_1_0_4 poison_1_0_3 ];

            meta = {
              description = ''Easily abort the processing of a plug stack '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/onkel-dirtus/plug_abort";
            };
          }
      ) {};

    plug_abort = plug_abort_2_1_1;

    plug_accept_language_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "plug_accept_language";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_accept_language";
              version = "0.1.0";
              sha256 =
                "5535c842805ba980f3bf5fa5cde202fd3375c049e3681e206de1976c5765765a";
            };

            meta = {
              description = ''parse the accept-language header'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/plug_accept_language";
            };
          }
      ) {};

    plug_accept_language = plug_accept_language_0_1_0;

    plug_accesslog_0_10_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          tzdata_0_5_6,
          timex_1_0_1,
          plug_1_1_1,
          cowboy_1_0_4
        }:
          buildMix {
            name = "plug_accesslog";
            version = "0.10.0";
            src = fetchHex {
              pkg = "plug_accesslog";
              version = "0.10.0";
              sha256 =
                "c7cb4562e6ee51f9329b0aea877c3c82d5c109a1946b40b19f7311b7290d474a";
            };
            beamDeps  = [ tzdata_0_5_6 timex_1_0_1 plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              description = ''Plug for writing access logs'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mneudert/plug_accesslog";
            };
          }
      ) {};

    plug_accesslog = plug_accesslog_0_10_0;

    plug_assign_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_0_3 }:
          buildMix {
            name = "plug_assign";
            version = "1.0.0";
            src = fetchHex {
              pkg = "plug_assign";
              version = "1.0.0";
              sha256 =
                "293a2885e8d23fce64b9f81019882e14512d57cf82b863f9be860157e5f79708";
            };
            beamDeps  = [ plug_1_0_3 ];

            meta = {
              description = ''A simple plug to allow setting variables in a
                            connection.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nshafer/plug_assign";
            };
          }
      ) {};

    plug_assign = plug_assign_1_0_0;

    plug_auth_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, plug_0_8_1, cowboy_1_0_4 }:
          buildMix {
            name = "plug_auth";
            version = "0.2.0";
            src = fetchHex {
              pkg = "plug_auth";
              version = "0.2.0";
              sha256 =
                "beb4fe7afce35714055b7cf362b1bd31665c0f4f2f2f6e59076d70ed60c48dc8";
            };
            beamDeps  = [ plug_0_8_1 cowboy_1_0_4 ];

            meta = {
              description = ''A collection of authentication-related plugs'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/bitgamma/plug_auth";
            };
          }
      ) {};

    plug_auth = plug_auth_0_2_0;

    plug_basic_auth_1_1_0 = callPackage
      (
        {  buildMix, fetchHex, plug_0_8_1, cowboy_1_0_4 }:
          buildMix {
            name = "plug_basic_auth";
            version = "1.1.0";
            src = fetchHex {
              pkg = "plug_basic_auth";
              version = "1.1.0";
              sha256 =
                "6763e5ad0f17d6693e296cc3a69c1db627f9b66bda2bcded4ddfcc84a42f0c03";
            };
            beamDeps  = [ plug_0_8_1 cowboy_1_0_4 ];

            meta = {
              description = ''A Plug for using HTTP Basic Authentication in
                            Plug applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/rbishop/plug_basic_auth";
            };
          }
      ) {};

    plug_basic_auth = plug_basic_auth_1_1_0;

    plug_byte_serve_0_3_2 = callPackage
      (
        {  buildMix, fetchHex, plug_0_11_3 }:
          buildMix {
            name = "plug_byte_serve";
            version = "0.3.2";
            src = fetchHex {
              pkg = "plug_byte_serve";
              version = "0.3.2";
              sha256 =
                "f6e4873373b3efd207877ca5f797f4ea539cf2a885aae895c6c3df73ce9b75ac";
            };
            beamDeps  = [ plug_0_11_3 ];

            meta = {
              description = ''A Plug for using HTTP Byte Serving in Plug
                            applications.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/masteinhauser/plug_byte_serve";
            };
          }
      ) {};

    plug_byte_serve = plug_byte_serve_0_3_2;

    plug_cloudflare_1_2_1 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, cidr_0_5_0 }:
          buildMix {
            name = "plug_cloudflare";
            version = "1.2.1";
            src = fetchHex {
              pkg = "plug_cloudflare";
              version = "1.2.1";
              sha256 =
                "854e202c40f86c50e0b95c373c5335106f21f9059fc74d8379915ab560ecf8b6";
            };
            beamDeps  = [ plug_1_1_1 cidr_0_5_0 ];

            meta = {
              description = ''Convert CloudFlare`s CF-Connecting-IP header to
                            Plug.Conn`s remote_ip field.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/c-rack/plug_cloudflare";
            };
          }
      ) {};

    plug_cloudflare = plug_cloudflare_1_2_1;

    plug_cors_0_8_2 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "plug_cors";
            version = "0.8.2";
            src = fetchHex {
              pkg = "plug_cors";
              version = "0.8.2";
              sha256 =
                "286a36b000989538c168d115f6a017aaa15a4031e4f867d300878d81c3b8c6aa";
            };
            beamDeps  = [ plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              description = ''Deprecated: CORS Plug Middleware. Please use
                            corsica instead'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bryanjos/plug_cors";
            };
          }
      ) {};

    plug_cors = plug_cors_0_8_2;

    plug_exception_handler_0_0_4 = callPackage
      (
        {  buildMix, fetchHex, plug_0_8_1, cowboy_1_0_4 }:
          buildMix {
            name = "plug_exception_handler";
            version = "0.0.4";
            src = fetchHex {
              pkg = "plug_exception_handler";
              version = "0.0.4";
              sha256 =
                "477ea599e516bcf8efb399ca43ca3d9cecd50982222b1f5f259092d4c99fca28";
            };
            beamDeps  = [ plug_0_8_1 cowboy_1_0_4 ];

            meta = {
              description = ''Rescue exceptions from your plug stack'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/onkel-dirtus/plug_exception_handler";
            };
          }
      ) {};

    plug_exception_handler = plug_exception_handler_0_0_4;

    plug_forwarded_peer_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "plug_forwarded_peer";
            version = "0.0.2";
            src = fetchHex {
              pkg = "plug_forwarded_peer";
              version = "0.0.2";
              sha256 =
                "c2466e0f0ef75a0d925a957fa50dfcded2c4788fe67857a675411e7184ae5ec3";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              longDescription = ''Very simple plug which reads
                                `X-Forwarded-For` or `Forwarded` header
                                according to rfc7239 and fill `conn.remote_ip`
                                with the root client ip.'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/awetzel/plug_forwarded_peer";
            };
          }
      ) {};

    plug_forwarded_peer = plug_forwarded_peer_0_0_2;

    plug_fprof_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "plug_fprof";
            version = "0.0.1";
            src = fetchHex {
              pkg = "plug_fprof";
              version = "0.0.1";
              sha256 =
                "4c5e6171ab7ebb29b6d473f8c5fd758a11ade5847d31add676c944a302ab006c";
            };

            meta = {
              description = ''A Plug that adds fprof tracing to requests, to
                            allow for easy profiling.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/obmarg/plug_fprof";
            };
          }
      ) {};

    plug_fprof = plug_fprof_0_0_1;

    plug_geoip2_0_4_2 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, geolix_0_9_0 }:
          buildMix {
            name = "plug_geoip2";
            version = "0.4.2";
            src = fetchHex {
              pkg = "plug_geoip2";
              version = "0.4.2";
              sha256 =
                "2a6443040e07e677b0ff7749d2cdf7797a97254466f6740aee11544a18f4993a";
            };
            beamDeps  = [ plug_1_1_1 geolix_0_9_0 ];

            meta = {
              longDescription = ''Adds geo location to a Plug connection based
                                upon the client IP address by using MaxMind`s
                                GeoIP2 database.'';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    plug_geoip2 = plug_geoip2_0_4_2;

    plug_graphql_0_1_5 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_1_5_2,
          plug_0_8_1,
          graphql_0_1_2,
          cowboy_1_0_4
        }:
          buildMix {
            name = "plug_graphql";
            version = "0.1.5";
            src = fetchHex {
              pkg = "plug_graphql";
              version = "0.1.5";
              sha256 =
                "a0a93dfe74a701393428bd0963dd2b93db5e418f8bf095a0b1f9bdab854ef0b7";
            };
            beamDeps  = [ poison_1_5_2 plug_0_8_1 graphql_0_1_2 cowboy_1_0_4
                      ];

            meta = {
              description = ''A Plug integration for GraphQL Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/graphql-elixir/plug_graphql";
            };
          }
      ) {};

    plug_graphql = plug_graphql_0_1_5;

    plug_heartbeat_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "plug_heartbeat";
            version = "0.2.0";
            src = fetchHex {
              pkg = "plug_heartbeat";
              version = "0.2.0";
              sha256 =
                "23cb357dad510695b6bb339fdbf5d3fc8581546124f7389d63c9cf723e4ad40f";
            };
            beamDeps  = [ plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              description = ''A tiny plug for responding to heartbeat requests
                            '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/plug_heartbeat";
            };
          }
      ) {};

    plug_heartbeat = plug_heartbeat_0_2_0;

    plug_json_parser_0_0_6 = callPackage
      (
        {  buildMix, fetchHex, plug_0_8_1, cowboy_1_0_4, poison_1_1_1 }:
          buildMix {
            name = "plug_json_parser";
            version = "0.0.6";
            src = fetchHex {
              pkg = "plug_json_parser";
              version = "0.0.6";
              sha256 =
                "4c07f3adade5ad8730b6ec5d33d50b5dbe1a960e2be29a764b415c5234c79204";
            };
            beamDeps  = [ plug_0_8_1 cowboy_1_0_4 poison_1_1_1 ];

            meta = {
              description = ''JSON parse for Plug.Parsers '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/onkel-dirtus/plug_json_parser";
            };
          }
      ) {};

    plug_json_parser = plug_json_parser_0_0_6;

    plug_jwt_0_7_1 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, joken_0_16_1, cowboy_1_0_4 }:
          buildMix {
            name = "plug_jwt";
            version = "0.7.1";
            src = fetchHex {
              pkg = "plug_jwt";
              version = "0.7.1";
              sha256 =
                "a87cd8815454093c3300bdae4f2af7ec8c671fd22ce55f598309b5bed4ac3a2a";
            };
            beamDeps  = [ plug_1_1_1 joken_0_16_1 cowboy_1_0_4 ];

            meta = {
              description = ''JWT Plug Middleware'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bryanjos/plug_jwt.git";
            };
          }
      ) {};

    plug_jwt = plug_jwt_0_7_1;

    plug_media_type_router_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "plug_media_type_router";
            version = "0.0.2";
            src = fetchHex {
              pkg = "plug_media_type_router";
              version = "0.0.2";
              sha256 =
                "e5f72ee4fd1a43321532e3165b3609a1184ba2d576279a1a63e17afba084f12b";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              longDescription = ''An Elixir Plug for routing requests to other
                                Plugs based on the request`s Media Type'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cazrin/plug_media_type_router";
            };
          }
      ) {};

    plug_media_type_router = plug_media_type_router_0_0_2;

    plug_rails_cookie_session_store_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "plug_rails_cookie_session_store";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_rails_cookie_session_store";
              version = "0.1.0";
              sha256 =
                "e08041d2ad4884826d8296a5560609df04a936ceca492d094f06458699ac69da";
            };
            beamDeps  = [ plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              description = ''Rails compatible Plug session store'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/cconstantin/plug_rails_cookie_session_store";
            };
          }
      ) {};

    plug_rails_cookie_session_store =
      plug_rails_cookie_session_store_0_1_0;

    plug_redirect_https_0_0_4 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "plug_redirect_https";
            version = "0.0.4";
            src = fetchHex {
              pkg = "plug_redirect_https";
              version = "0.0.4";
              sha256 =
                "b0cf8d86bb6d39653923e48067e6259beb6daee3f0e6ea6beff9ddcbef22b4d5";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              description = ''Plug to redirect http requests to https requests
                            behind a reverse proxy'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stocks29/plug_redirect_https.git";
            };
          }
      ) {};

    plug_redirect_https = plug_redirect_https_0_0_4;

    plug_require_header_0_8_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, plug_1_1_1 }:
          buildMix {
            name = "plug_require_header";
            version = "0.8.0";
            src = fetchHex {
              pkg = "plug_require_header";
              version = "0.8.0";
              sha256 =
                "b721158316f6d2efd4b24bd05a8a1c06caa699ee25249185c8c4f03f9204b283";
            };
            beamDeps  = [ poison_1_5_2 plug_1_1_1 ];

            meta = {
              description = ''An Elixir Plug for requiring and extracting a
                            given header.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DevL/plug_require_header";
            };
          }
      ) {};

    plug_require_header = plug_require_header_0_8_0;

    plug_response_header_0_2_1 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "plug_response_header";
            version = "0.2.1";
            src = fetchHex {
              pkg = "plug_response_header";
              version = "0.2.1";
              sha256 =
                "82fd11fc70d925ed5a608ac13a9f604a80e24827f6603999d6a0f3f123862048";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              description = ''This plug allows manipulation of HTTP response
                            headers'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/c-rack/plug_response_header";
            };
          }
      ) {};

    plug_response_header = plug_response_header_0_2_1;

    plug_ribbon_0_2_1 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "plug_ribbon";
            version = "0.2.1";
            src = fetchHex {
              pkg = "plug_ribbon";
              version = "0.2.1";
              sha256 =
                "34fcbffb6fc3adde6bb167506934ab19787d2fff82b6bf93918e0000159bfe9d";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              description = ''Injects a ribbon to your web application
                            depending on the environment'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://git.io/plug_ribbon";
            };
          }
      ) {};

    plug_ribbon = plug_ribbon_0_2_1;

    plug_runtime_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "plug_runtime";
            version = "0.0.1";
            src = fetchHex {
              pkg = "plug_runtime";
              version = "0.0.1";
              sha256 =
                "b47ec0f5870e3c6adcad708c37ecbdd69ec25cd1f5bf1c15e21f78b518b7eb1c";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              longDescription = ''A simple Plug to measure the runtime of a
                                request. Results will be in the X-Runtime
                                header.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mje113/plug_runtime";
            };
          }
      ) {};

    plug_runtime = plug_runtime_0_0_1;

    plug_secure_headers_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "plug_secure_headers";
            version = "0.0.1";
            src = fetchHex {
              pkg = "plug_secure_headers";
              version = "0.0.1";
              sha256 =
                "727c5b7216aaa4bec2e0f88ed72199082820341602fad49cfc4c74477f55a905";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              description = ''HTTP security headers with validatation for
                            Phoenix/Plug'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/anotherhale/plug_secure_headers";
            };
          }
      ) {};

    plug_secure_headers = plug_secure_headers_0_0_1;

    plug_session_memcached_0_3_3 = callPackage
      (
        {
          buildMix,
          fetchHex,
          plug_1_1_1,
          ex_doc_0_11_4,
          earmark_0_2_1,
          cowboy_1_0_4
        }:
          buildMix {
            name = "plug_session_memcached";
            version = "0.3.3";
            src = fetchHex {
              pkg = "plug_session_memcached";
              version = "0.3.3";
              sha256 =
                "f9cd5de250dbab0180166c873a50d297036d72f7cbac1a076972444c41f0b4c3";
            };
            beamDeps  = [ plug_1_1_1 ex_doc_0_11_4 earmark_0_2_1 cowboy_1_0_4
                      ];

            meta = {
              description = ''A memcached session store for use with
                            Plug.Session'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/gutschilla/plug-session-memcached";
            };
          }
      ) {};

    plug_session_memcached = plug_session_memcached_0_3_3;

    plug_session_redis_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, redo_2_0_1, poolboy_1_5_1 }:
          buildMix {
            name = "plug_session_redis";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_session_redis";
              version = "0.1.0";
              sha256 =
                "8a101a1e36cb9212153191e44963f052b7478b0bfaff5a85e331afe0ae56dbeb";
            };
            beamDeps  = [ redo_2_0_1 poolboy_1_5_1 ];

            meta = {
              description = ''The Redis Plug.Session adapter for the Phoenix
                            framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aposto/plug_session_redis";
            };
          }
      ) {};

    plug_session_redis = plug_session_redis_0_1_0;

    plug_statsd_0_4_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, ex_statsd_0_5_3 }:
          buildMix {
            name = "plug_statsd";
            version = "0.4.0";
            src = fetchHex {
              pkg = "plug_statsd";
              version = "0.4.0";
              sha256 =
                "c618161e5ad93c727be6ce776e7f53542950d97a602691aee2acef2d57dbdea9";
            };
            beamDeps  = [ plug_1_1_1 ex_statsd_0_5_3 ];

            meta = {
              description = ''A (Phoenix) plug for sending request counts and
                            response times to statsd'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffweiss/plug_statsd";
            };
          }
      ) {};

    plug_statsd = plug_statsd_0_4_0;

    plug_test_helpers_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, plug_0_8_4, cowboy_1_0_4 }:
          buildMix {
            name = "plug_test_helpers";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_test_helpers";
              version = "0.1.0";
              sha256 =
                "f542d679a33d42147612164ade572fa973344b4550ffcbbb0ef540492c9e97fe";
            };
            beamDeps  = [ plug_0_8_4 cowboy_1_0_4 ];

            meta = {
              description = ''Helpers to test your Plugs with ExUnit'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xavier/plug_test_helpers";
            };
          }
      ) {};

    plug_test_helpers = plug_test_helpers_0_1_0;

    plug_wait1_0_1_4 = callPackage
      (
        {  buildMix, fetchHex, poison_1_3_1, plug_0_13_1, cowboy_1_0_4 }:
          buildMix {
            name = "plug_wait1";
            version = "0.1.4";
            src = fetchHex {
              pkg = "plug_wait1";
              version = "0.1.4";
              sha256 =
                "4ef36a750c07484e6c6513421e56ad42fa023cb424cbb4cf11a2e686a4fa4be7";
            };
            beamDeps  = [ poison_1_3_1 plug_0_13_1 cowboy_1_0_4 ];

            meta = {
              description = ''Plug adapter for the wait1 protocol'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wait1/plug_wait1";
            };
          }
      ) {};

    plug_wait1 = plug_wait1_0_1_4;

    plug_x_forwarded_for_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "plug_x_forwarded_for";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_x_forwarded_for";
              version = "0.1.0";
              sha256 =
                "7a12dff0f850855ae85d70ed0e71aff5ec55dad6c52fc46d6ba21119e6183b33";
            };

            meta = {
              description = ''x-forwarded-for plug middleware'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/plug_x_forwarded_for";
            };
          }
      ) {};

    plug_x_forwarded_for = plug_x_forwarded_for_0_1_0;

    plugin_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "plugin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plugin";
              version = "0.1.0";
              sha256 =
                "f596a2e9e14081884a841d1805e024d435c6a27e5e38b9c64214017659560fad";
            };

            meta = {
              longDescription = ''Like Plug, only without web-specific logic
                                and without a typed Conn-datastructure'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruby2elixir/plugin";
            };
          }
      ) {};

    plugin = plugin_0_1_0;

    plugs_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "plugs";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plugs";
              version = "0.1.0";
              sha256 =
                "8d6cafd3ea0d373795774c9de2a0503433d65d9c2c0d58bd23ba0d9ba3547297";
            };
            beamDeps  = [ plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              description = ''A collection of Plug middleware for web
                            applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sugar-framework/plugs";
            };
          }
      ) {};

    plugs = plugs_0_1_0;

    plugsnag_1_0_1 = callPackage
      (
        {  buildMix, fetchHex, bugsnag_1_1_1 }:
          buildMix {
            name = "plugsnag";
            version = "1.0.1";
            src = fetchHex {
              pkg = "plugsnag";
              version = "1.0.1";
              sha256 =
                "cf6c257d400b872787ced1a7175adb7332a7aa9d12d1a6ac6abcd8cf799bd06c";
            };
            beamDeps  = [ bugsnag_1_1_1 ];

            meta = {
              description = ''Bugsnag reporter for Elixir`s Plug'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jarednorman/plugsnag";
            };
          }
      ) {};

    plugsnag = plugsnag_1_0_1;

    plumber_girl_0_9_6 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "plumber_girl";
            version = "0.9.6";
            src = fetchHex {
              pkg = "plumber_girl";
              version = "0.9.6";
              sha256 =
                "2a9faf9980cae59e11a6f9cf151a634cd809de220293bbbaba849f216c247a45";
            };

            meta = {
              description = ''PlumberGirl takes care of your Elixir piping
                            issues!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruby2elixir/plumber_girl";
            };
          }
      ) {};

    plumber_girl = plumber_girl_0_9_6;

    png_0_1_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "png";
            version = "0.1.1";
            src = fetchHex {
              pkg = "png";
              version = "0.1.1";
              sha256 =
                "f8d4a17c118dcc16bb18d0fda6e26947001f9312bc6c061d2236b424fc3dd9ea";
            };

            meta = {
              longDescription = ''A pure Erlang library for creating PNG
                                images. It can currently create 8 and 16 bit
                                RGB, RGB with alpha, indexed, grayscale and
                                grayscale with alpha images.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuce/png";
            };
          }
      ) {};

    png = png_0_1_1;

    pocketex_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_3_1, httpoison_0_8_1 }:
          buildMix {
            name = "pocketex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pocketex";
              version = "0.1.0";
              sha256 =
                "b832df8e3f3102b69892cc5cfab4418de876a6ecc5780805458b9946aa407cbf";
            };
            beamDeps  = [ poison_1_3_1 httpoison_0_8_1 ];

            meta = {
              description = ''Pocketex is an Elixir client for the Pocket read
                            later service (getpocket.com) '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/essenciary/pocketex";
            };
          }
      ) {};

    pocketex = pocketex_0_1_0;

    poison_1_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "poison";
            version = "1.0.3";
            src = fetchHex {
              pkg = "poison";
              version = "1.0.3";
              sha256 =
                "632b9f5c4c2e56987f123b9f35e52b356c2de28ce7692d66becf12df10cc1012";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/devinus/poison";
            };
          }
      ) {};

    poison_1_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "poison";
            version = "1.1.1";
            src = fetchHex {
              pkg = "poison";
              version = "1.1.1";
              sha256 =
                "57e77cdafe34769dcc114c6c249847b66304e5489891306b9762e3211520d767";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/devinus/poison";
            };
          }
      ) {};

    poison_1_2_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "poison";
            version = "1.2.1";
            src = fetchHex {
              pkg = "poison";
              version = "1.2.1";
              sha256 =
                "7be9f3b2688efdcc689062ccd21e340ee5fd3ef9dcd142136034beb5ed1c2e23";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/devinus/poison";
            };
          }
      ) {};

    poison_1_3_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "poison";
            version = "1.3.1";
            src = fetchHex {
              pkg = "poison";
              version = "1.3.1";
              sha256 =
                "fbd78dd3e5abbadc17ddd89905002f6d20a03046f7555a6098d28a9f14feaf58";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/devinus/poison";
            };
          }
      ) {};

    poison_1_4_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "poison";
            version = "1.4.0";
            src = fetchHex {
              pkg = "poison";
              version = "1.4.0";
              sha256 =
                "b2715aaeb9f549f4e30739d43993e3c1b1053a4ed69d50c660621bdd1eb96606";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/devinus/poison";
            };
          }
      ) {};

    poison_1_5_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "poison";
            version = "1.5.0";
            src = fetchHex {
              pkg = "poison";
              version = "1.5.0";
              sha256 =
                "a31ffdaf77494ff12d6c2c9cb03235d4373596d2faf62ee5b99c1ae479618400";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/devinus/poison";
            };
          }
      ) {};

    poison_1_5_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "poison";
            version = "1.5.2";
            src = fetchHex {
              pkg = "poison";
              version = "1.5.2";
              sha256 =
                "4afc59dcadf71be7edc8b934b39f554ec7b31e2b1b1a4767383a663f86958ce3";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/devinus/poison";
            };
          }
      ) {};

    poison_2_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "poison";
            version = "2.0.1";
            src = fetchHex {
              pkg = "poison";
              version = "2.0.1";
              sha256 =
                "7f34906a0839f3b49b9b7647461c5144787611f599e8d743214280761699df2b";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/devinus/poison";
            };
          }
      ) {};

    poison_2_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "poison";
            version = "2.1.0";
            src = fetchHex {
              pkg = "poison";
              version = "2.1.0";
              sha256 =
                "002caaf939b97c84533ef0f621d3ed414ed703fcd03c91ec0dd62043df102c63";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/devinus/poison";
            };
          }
      ) {};

    poison = poison_2_1_0;

    poker_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "poker";
            version = "0.0.2";
            src = fetchHex {
              pkg = "poker";
              version = "0.0.2";
              sha256 =
                "9599ef62b0a2e1b15ff2697cb1603dd7be00911d8a613e1d01cfdf8c8b5d63b3";
            };

            meta = {
              description = ''An Elixir library to work with Poker hands.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wojtekmach/poker_elixir";
            };
          }
      ) {};

    poker = poker_0_0_2;

    polyglot_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "polyglot";
            version = "0.0.1";
            src = fetchHex {
              pkg = "polyglot";
              version = "0.0.1";
              sha256 =
                "83aaf990f322ea5c314b469932e87db7175374b0e0b28d078defba60dca0fb78";
            };

            meta = {
              longDescription = ''Polyglot is a localization library for Elixir
                                that provides reusable formatting rules and
                                translations for a large number of languages.'';
              license = with stdenv.lib.licenses; [ mit free ];
              homepage = "https://github.com/padde/polyglot";
            };
          }
      ) {};

    polyglot = polyglot_0_0_1;

    polyvox_id3_0_2_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "polyvox_id3";
            version = "0.2.1";
            src = fetchHex {
              pkg = "polyvox_id3";
              version = "0.2.1";
              sha256 =
                "2bb3e3b9edde6630160857563c992f7e9ea56d11d263172c95161b4275f6b48c";
            };

            meta = {
              description = ''A podcast-centric ID3 library for parsing and
                            writing ID3 tags.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/polyvox/polyvox_id3";
            };
          }
      ) {};

    polyvox_id3 = polyvox_id3_0_2_1;

    pool_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "pool";
            version = "0.0.2";
            src = fetchHex {
              pkg = "pool";
              version = "0.0.2";
              sha256 =
                "7be2ade7f9c000393d474dd96751680d5cb567cd68d3ee02c4c8e465d3a4395a";
            };

            meta = {
              description = ''Socket acceptor pool Not ready for use at this
                            time. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/pool";
            };
          }
      ) {};

    pool = pool_0_0_2;

    pool_ring_0_1_5 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "pool_ring";
            version = "0.1.5";
            src = fetchHex {
              pkg = "pool_ring";
              version = "0.1.5";
              sha256 =
                "a5d965379d8cb05e772e606951ba1b33c45b58a0809ba9f44eff453ea43068ce";
            };

            meta = {
              description = ''create a pool based on a hash ring'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/pool_ring";
            };
          }
      ) {};

    pool_ring = pool_ring_0_1_5;

    poolboy_1_2_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "poolboy";
            version = "1.2.1";
            src = fetchHex {
              pkg = "poolboy";
              version = "1.2.1";
              sha256 =
                "5e134d817f04e00b17187c50e7a38362812b7053591479a62f0025c45d622369";
            };

            meta = {
              description = ''A hunky Erlang worker pool factory'';
              license = with stdenv.lib.licenses; [ unlicense asl20 ];
              homepage = "https://github.com/devinus/poolboy";
            };
          }
      ) {};

    poolboy_1_4_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "poolboy";
            version = "1.4.2";
            src = fetchHex {
              pkg = "poolboy";
              version = "1.4.2";
              sha256 =
                "6133b67251080f32ffed4f71913cd2998fd6f02fa076677aadf7278b62853938";
            };

            meta = {
              description = ''A hunky Erlang worker pool factory'';
              license = with stdenv.lib.licenses; [ unlicense asl20 ];
              homepage = "https://github.com/devinus/poolboy";
            };
          }
      ) {};

    poolboy_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "poolboy";
            version = "1.5.1";
            src = fetchHex {
              pkg = "poolboy";
              version = "1.5.1";
              sha256 =
                "8f7168911120e13419e086e78d20e4d1a6776f1eee2411ac9f790af10813389f";
            };

            meta = {
              description = ''A hunky Erlang worker pool factory'';
              license = with stdenv.lib.licenses; [ unlicense asl20 ];
              homepage = "https://github.com/devinus/poolboy";
            };
          }
      ) {};

    poolboy = poolboy_1_5_1;

    pooler_1_4_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "pooler";
            version = "1.4.0";
            src = fetchHex {
              pkg = "pooler";
              version = "1.4.0";
              sha256 =
                "08ca384be64045b257a22a3569571c9ef33dafdac44212c7f0596f255e5a0d5c";
            };

            meta = {
              description = ''An OTP Process Pool Application'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/seth/pooler";
            };
          }
      ) {};

    pooler_1_5_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "pooler";
            version = "1.5.0";
            src = fetchHex {
              pkg = "pooler";
              version = "1.5.0";
              sha256 =
                "f493b4b947967fa4250dd1f96e86a5440ecab51da114d2c256cced58ad991908";
            };

            meta = {
              description = ''An OTP Process Pool Application'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/seth/pooler";
            };
          }
      ) {};

    pooler = pooler_1_5_0;

    populator_0_4_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "populator";
            version = "0.4.0";
            src = fetchHex {
              pkg = "populator";
              version = "0.4.0";
              sha256 =
                "4f2b2720676db740139ebd69ca0c26b111721d7d049f185f0e5a50cfca18085d";
            };

            meta = {
              description = ''Supervisor population control library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rubencaro/populator";
            };
          }
      ) {};

    populator = populator_0_4_0;

    porcelain_2_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "porcelain";
            version = "2.0.1";
            src = fetchHex {
              pkg = "porcelain";
              version = "2.0.1";
              sha256 =
                "dbe57a57c3917654694ea6be7e756e26345a59d2974fe6ec861a71f469767ad9";
            };

            meta = {
              longDescription = ''Porcelain implements a saner approach to
                                launching and communicating with external OS
                                processes from Elixir. Built on top of Erlang`s
                                ports, it provides richer functionality and
                                simpler API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alco/porcelain";
            };
          }
      ) {};

    porcelain = porcelain_2_0_1;

    portal_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "portal";
            version = "0.0.1";
            src = fetchHex {
              pkg = "portal";
              version = "0.0.1";
              sha256 =
                "975d2aa4b4e155092214bee9ecc547d4c6603001c78eb824669823e1e116c84c";
            };

            meta = {
              longDescription = ''A shooting fault-tolerant doors for
                                distributed portal data-transfer application in
                                Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/josevalim/portal";
            };
          }
      ) {};

    portal = portal_0_0_1;

    porterstemmer_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "porterstemmer";
            version = "0.0.1";
            src = fetchHex {
              pkg = "porterstemmer";
              version = "0.0.1";
              sha256 =
                "8b3987cce8602d6ad16829fd4fefc848f01efcdc46d9e806059eec6a1b9d7cc8";
            };

            meta = {
              longDescription = '' Porter stemmer in Elixir. It does not stem
                                words beginning with an uppercase letter. This
                                is to prevent stemming of acronyms or names. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/frpaulas/porterstemmer.git";
            };
          }
      ) {};

    porterstemmer = porterstemmer_0_0_1;

    posterize_0_9_2 = callPackage
      (
        {  buildMix, fetchHex, postgrex_0_11_1 }:
          buildMix {
            name = "posterize";
            version = "0.9.2";
            src = fetchHex {
              pkg = "posterize";
              version = "0.9.2";
              sha256 =
                "c88f4fdefb2bc0cad5a7b19eca21fe9954f0a6b88a3af7eb685ee5df324b0ce2";
            };
            beamDeps  = [ postgrex_0_11_1 ];

            meta = {
              description = ''erlang wrapper for postgrex'';
              license = with stdenv.lib.licenses; [ asl20 mit ];
              homepage = "https://github.com/talentdeficit/posterize";
            };
          }
      ) {};

    posterize = posterize_0_9_2;

    postgrex_0_11_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          decimal_1_1_1,
          db_connection_0_2_3,
          connection_1_0_2
        }:
          buildMix {
            name = "postgrex";
            version = "0.11.1";
            src = fetchHex {
              pkg = "postgrex";
              version = "0.11.1";
              sha256 =
                "f56d47038f4f642cee0f9c40eeea0ef9ba645b7fc77723b4764f282df95baeb8";
            };
            beamDeps  = [ decimal_1_1_1 db_connection_0_2_3 connection_1_0_2
                      ];

            meta = {
              description = ''PostgreSQL driver for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/postgrex";
            };
          }
      ) {};

    postgrex = postgrex_0_11_1;

    postgrex_0_6_0 = callPackage
      (
        {  buildMix, fetchHex, decimal_0_2_5 }:
          buildMix {
            name = "postgrex";
            version = "0.6.0";
            src = fetchHex {
              pkg = "postgrex";
              version = "0.6.0";
              sha256 =
                "aa2aede73938a952ffbbe2b1173ac52c377a2055fd3e44ac1843bef782f5f8d4";
            };
            beamDeps  = [ decimal_0_2_5 ];

            meta = {
              description = ''PostgreSQL driver for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/postgrex";
            };
          }
      ) {};

    postgrex_0_9_1 = callPackage
      (
        {  buildMix, fetchHex, decimal_1_1_1 }:
          buildMix {
            name = "postgrex";
            version = "0.9.1";
            src = fetchHex {
              pkg = "postgrex";
              version = "0.9.1";
              sha256 =
                "9c9a4ffca145479b343d7a51730557305425aab69e8d31cc32f348f85996fb5a";
            };
            beamDeps  = [ decimal_1_1_1 ];

            meta = {
              description = ''PostgreSQL driver for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/postgrex";
            };
          }
      ) {};

    pot_0_9_4 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "pot";
            version = "0.9.4";
            src = fetchHex {
              pkg = "pot";
              version = "0.9.4";
              sha256 =
                "ba6814a8e2be50d64ee65612cf627aba4784555054c22ac5066e6543f349887c";
            };

            meta = {
              longDescription = ''POT is an Erlang library for generating
                                Google Authenticator compatible one time
                                passwords.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuce/pot";
            };
          }
      ) {};

    pot = pot_0_9_4;

    power_assert_0_0_8 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "power_assert";
            version = "0.0.8";
            src = fetchHex {
              pkg = "power_assert";
              version = "0.0.8";
              sha256 =
                "b4e1d27ab8e05f01d458ba84c4caced1f9b0209b3178dfcf4334e857a8aa6cd0";
            };

            meta = {
              description = ''Power Assert in Elixir. Shows evaluation results
                            each expression.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ma2gedev/power_assert_ex";
            };
          }
      ) {};

    power_assert = power_assert_0_0_8;

    pqueue_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "pqueue";
            version = "1.5.1";
            src = fetchHex {
              pkg = "pqueue";
              version = "1.5.1";
              sha256 =
                "7ba01afe6b50ea4b239fa770f9e2c2db4871b3927ac44aea180d1fd52601b317";
            };

            meta = {
              description = ''Erlang Priority Queue Implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/okeuday/pqueue";
            };
          }
      ) {};

    pqueue = pqueue_1_5_1;

    prefecture_jp_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "prefecture_jp";
            version = "0.0.2";
            src = fetchHex {
              pkg = "prefecture_jp";
              version = "0.0.2";
              sha256 =
                "ffc29fc76ee098b5f6c7c93db3736916cc23b0ace424dd8c0f946570aeb75c22";
            };

            meta = {
              description = ''PrefectureJp is a library for Japanese
                            prefecture.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ymmtmsys/prefecture_jp";
            };
          }
      ) {};

    prefecture_jp = prefecture_jp_0_0_2;

    presentex_0_0_10 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "presentex";
            version = "0.0.10";
            src = fetchHex {
              pkg = "presentex";
              version = "0.0.10";
              sha256 =
                "86479a0b79146dadc3f224d2023d06d7f4f87fd455a3267bbd11759ebde1404c";
            };

            meta = {
              description = ''An Elixir -> HTML/JavaScript presentation
                            generation tool. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Cobenian/Presentex";
            };
          }
      ) {};

    presentex = presentex_0_0_10;

    pretty_hex_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "pretty_hex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "pretty_hex";
              version = "0.0.1";
              sha256 =
                "ab91a38480049af4811ffdaf15dbee9370acb9b20cdc870281d2006a8fe928b4";
            };

            meta = {
              description = ''A binary hex dumping library in Elixir. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/polsab/pretty_hex";
            };
          }
      ) {};

    pretty_hex = pretty_hex_0_0_1;

    pricing_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, timex_1_0_1, porcelain_2_0_1 }:
          buildMix {
            name = "pricing";
            version = "0.0.1";
            src = fetchHex {
              pkg = "pricing";
              version = "0.0.1";
              sha256 =
                "82e0438611507f600bd799c986872588f88627fdcf7a15d4031d779c9d1cd4d7";
            };
            beamDeps  = [ timex_1_0_1 porcelain_2_0_1 ];

            meta = {
              description = ''Pricing financial instruments in Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/arthurcolle/pricing";
            };
          }
      ) {};

    pricing = pricing_0_0_1;

    progress_bar_1_4_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "progress_bar";
            version = "1.4.0";
            src = fetchHex {
              pkg = "progress_bar";
              version = "1.4.0";
              sha256 =
                "c184bba509ec32f81ee03a596972b84e7e9d04de2ae076a408bd08a7a80e98fa";
            };

            meta = {
              description = ''Command-line progress bars and spinners.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/henrik/progress_bar";
            };
          }
      ) {};

    progress_bar = progress_bar_1_4_0;

    proper_1_1_1_beta = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "proper";
            version = "1.1.1-beta";
            src = fetchHex {
              pkg = "proper";
              version = "1.1.1-beta";
              sha256 =
                "bde5c0fef0f8d804a7c06aab4f293d19f42149e5880b3412b75efa608e86d342";
            };

            meta = {
              description = ''QuickCheck-inspired property-based testing tool
                            for Erlang.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/manopapad/proper";
            };
          }
      ) {};

    proper = proper_1_1_1_beta;

    proplist_1_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "proplist";
            version = "1.1.0";
            src = fetchHex {
              pkg = "proplist";
              version = "1.1.0";
              sha256 =
                "6fc73362d15b4810f4979ddf72ec53c1efc020657a57b7cdd1f682bd38c08298";
            };

            meta = {
              description = ''Proplist provides the complete Keyword API, but
                            for Proplists.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/knrz/proplist";
            };
          }
      ) {};

    proplist = proplist_1_1_0;

    protobuffs_0_8_2 = callPackage
      (
        {  buildRebar3, fetchHex, meck_0_8_4 }:
          buildRebar3 {
            name = "protobuffs";
            version = "0.8.2";
            src = fetchHex {
              pkg = "protobuffs";
              version = "0.8.2";
              sha256 =
                "b77e9d03518927b290cc5bb5cc9622a177e70289100fea9ccb57873573e54553";
            };

            beamDeps  = [ meck_0_8_4 ];

            meta = {
              longDescription = ''An implementation of Google`s Protocol
                                Buffers for Erlang, based on
                                ngerakines/erlang_protobuffs.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/erlang_protobuffs";
            };
          }
      ) {};

    protobuffs = protobuffs_0_8_2;

    provider_asn1_0_1_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "provider_asn1";
            version = "0.1.2";
            src = fetchHex {
              pkg = "provider_asn1";
              version = "0.1.2";
              sha256 =
                "b310c46a2d5675431737f10a55d6b37347c11bf3efc4c1d7b63e710e3842c1bb";
            };

            meta = {
              description = ''Compile ASN.1 with Rebar3'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/knusbaum/provider_asn1";
            };
          }
      ) {};

    provider_asn1 = provider_asn1_0_1_2;

    providers_1_4_1 = callPackage
      (
        {  buildRebar3, fetchHex, getopt_0_8_2 }:
          buildRebar3 {
            name = "providers";
            version = "1.4.1";
            src = fetchHex {
              pkg = "providers";
              version = "1.4.1";
              sha256 =
                "dfd88305670a3d942c08a2d852eeb4c20ec40ee2ba589339a48083ac74f14e36";
            };

            beamDeps  = [ getopt_0_8_2 ];

            meta = {
              description = ''Providers provider.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsloughter/providers";
            };
          }
      ) {};

    providers_1_6_0 = callPackage
      (
        {  buildRebar3, fetchHex, getopt_0_8_2 }:
          buildRebar3 {
            name = "providers";
            version = "1.6.0";
            src = fetchHex {
              pkg = "providers";
              version = "1.6.0";
              sha256 =
                "0f6876529a613d34224de8c61d3660388eb981142360f2699486d8536050ce2f";
            };

            beamDeps  = [ getopt_0_8_2 ];

            meta = {
              description = ''Providers provider.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsloughter/providers";
            };
          }
      ) {};

    providers = providers_1_6_0;

    proxy_0_0_1 = callPackage
      (
        {
          buildMix, fetchHex, plug_1_1_1, httpoison_0_8_1, cowboy_1_0_4
        }:
          buildMix {
            name = "proxy";
            version = "0.0.1";
            src = fetchHex {
              pkg = "proxy";
              version = "0.0.1";
              sha256 =
                "74691b18a0918d6e14df1f254ee9f342a547bc280151a4d88a540839ae75bbae";
            };
            beamDeps  = [ plug_1_1_1 httpoison_0_8_1 cowboy_1_0_4 ];

            meta = {
              description = ''Proxy plug for upstream servers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chadwpry/elixir-proxy";
            };
          }
      ) {};

    proxy = proxy_0_0_1;

    pubnub_ex_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, exjsx_3_2_0 }:
          buildMix {
            name = "pubnub_ex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "pubnub_ex";
              version = "0.0.2";
              sha256 =
                "83d270cfe2be6728fb96d9145371a87ddc876a97f91cdca2584cc82c2a0b91cb";
            };
            beamDeps  = [ httpoison_0_8_1 exjsx_3_2_0 ];

            meta = {
              description = ''A pubsub tool for pubnub.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryuone/pubnub_ex";
            };
          }
      ) {};

    pubnub_ex = pubnub_ex_0_0_2;

    pubsub_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "pubsub";
            version = "0.0.2";
            src = fetchHex {
              pkg = "pubsub";
              version = "0.0.2";
              sha256 =
                "2072bf67d5d4b6d41c81f0e89697d72ca323c5640e883b0d0cec7d43cf6c8ae8";
            };

            meta = {
              description = ''Publish-Subscribe utility'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/simonewebdesign/elixir_pubsub";
            };
          }
      ) {};

    pubsub = pubsub_0_0_2;

    pulse_libs_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "pulse_libs";
            version = "1.0.0";
            src = fetchHex {
              pkg = "pulse_libs";
              version = "1.0.0";
              sha256 =
                "fda2aee58af502bb58752f6a6fcc3f97b2d6eed1a63d39ab91937e5811dbb2fc";
            };

            meta = {
              description = ''Elixir standard libraries instrumented with
                            PULSE.'';
              license = stdenv.lib.licenses.asl20;
            };
          }
      ) {};

    pulse_libs = pulse_libs_1_0_0;

    pusher_0_1_2 = callPackage
      (
        {
          buildMix,
          fetchHex,
          signaturex_0_0_8,
          httpoison_0_8_1,
          exjsx_3_2_0
        }:
          buildMix {
            name = "pusher";
            version = "0.1.2";
            src = fetchHex {
              pkg = "pusher";
              version = "0.1.2";
              sha256 =
                "6a21b65a7a1e6a4fe7b1cd0d555ca25c871e68441cef3373dc5771ab0c2a47c2";
            };
            beamDeps  = [ signaturex_0_0_8 httpoison_0_8_1 exjsx_3_2_0 ];

            meta = {
              description = ''Pusher HTTP client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/pusher";
            };
          }
      ) {};

    pusher = pusher_0_1_2;

    qdate_0_4_2 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          erlware_commons_0_18_0,
          erlang_localtime_1_0_0
        }:
          buildRebar3 {
            name = "qdate";
            version = "0.4.2";
            src = fetchHex {
              pkg = "qdate";
              version = "0.4.2";
              sha256 =
                "4cb9dcc4418e57e27aff12d0e7d6c6e373a18e130ad66155a3dfdccde848c052";
            };

            beamDeps  = [ erlware_commons_0_18_0 erlang_localtime_1_0_0 ];

            meta = {
              description = ''Simple Date and Timezone handling for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/choptastic/qdate";
            };
          }
      ) {};

    qdate = qdate_0_4_2;

    qiita_ex_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, exjsx_3_2_0 }:
          buildMix {
            name = "qiita_ex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "qiita_ex";
              version = "0.0.2";
              sha256 =
                "0bb9a5535c0915c426ff13350b907cbd2b455bb99d8bcb8324ffadb6c9bcf1eb";
            };
            beamDeps  = [ httpoison_0_8_1 exjsx_3_2_0 ];

            meta = {
              description = ''Qiita API v2 Interface for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/qiita_ex";
            };
          }
      ) {};

    qiita_ex = qiita_ex_0_0_2;

    qiniu_0_2_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_3_1, httpoison_0_7_5 }:
          buildMix {
            name = "qiniu";
            version = "0.2.2";
            src = fetchHex {
              pkg = "qiniu";
              version = "0.2.2";
              sha256 =
                "6c03aeb2d58a1d44f2476eba83640978f166267b07a4e7ce6cb4b498be5cb1c5";
            };
            beamDeps  = [ poison_1_3_1 httpoison_0_7_5 ];

            meta = {
              description = ''Qiniu Resource (Cloud) Storage SDK for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tony612/qiniu";
            };
          }
      ) {};

    qiniu = qiniu_0_2_2;

    qlc_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "qlc";
            version = "1.0.0";
            src = fetchHex {
              pkg = "qlc";
              version = "1.0.0";
              sha256 =
                "80df25fc032ced6f8c0c21df4099434db09d6de87ee32237719c776974ad15cc";
            };

            meta = {
              description = ''QLC interface for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/k1complete/qlc";
            };
          }
      ) {};

    qlc = qlc_1_0_0;

    quantum_1_6_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "quantum";
            version = "1.6.1";
            src = fetchHex {
              pkg = "quantum";
              version = "1.6.1";
              sha256 =
                "877ef048391ff0c0268cc17078dd707351241af0c04041bc432398017b998bbf";
            };

            meta = {
              description = ''Cron-like job scheduler for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/c-rack/quantum-elixir";
            };
          }
      ) {};

    quantum = quantum_1_6_1;

    quark_1_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "quark";
            version = "1.0.2";
            src = fetchHex {
              pkg = "quark";
              version = "1.0.2";
              sha256 =
                "c24950acc4d6f44aff612302871b2cff5f56d6b702285bc04e7b71179e5b13c7";
            };

            meta = {
              description = ''Common combinators for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/robot-overlord/quark";
            };
          }
      ) {};

    quark = quark_1_0_2;

    queuex_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "queuex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "queuex";
              version = "0.2.0";
              sha256 =
                "e40b25befc34ecff962c92536e6a520967dd2d6031cb70a58be62269a6aec623";
            };

            meta = {
              description = ''Priority Queue'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/falood/queuex";
            };
          }
      ) {};

    queuex = queuex_0_2_0;

    quickrand_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "quickrand";
            version = "1.5.1";
            src = fetchHex {
              pkg = "quickrand";
              version = "1.5.1";
              sha256 =
                "0b3dcc6ddb23319c1f6a5ed143778864b8ad2f0ebd693a2d121cf5ae0c4db507";
            };

            meta = {
              longDescription = ''Quick Random Number Generation: Provides a
                                simple interface to call efficient random number
                                generation functions based on the context.
                                Proper random number seeding is enforced.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/okeuday/quickrand";
            };
          }
      ) {};

    quickrand = quickrand_1_5_1;

    quinn_0_0_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "quinn";
            version = "0.0.4";
            src = fetchHex {
              pkg = "quinn";
              version = "0.0.4";
              sha256 =
                "6cafeb8e6d9635b3a26caf1768c70751f0bbdc6afb9acd7067a52316b22c8de2";
            };

            meta = {
              description = ''Quinn is Elixir xml parser. '';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/nhu313/Quinn";
            };
          }
      ) {};

    quinn = quinn_0_0_4;

    quintana_0_2_0 = callPackage
      (
        {  buildRebar3, fetchHex, folsom_0_8_3 }:
          buildRebar3 {
            name = "quintana";
            version = "0.2.0";
            src = fetchHex {
              pkg = "quintana";
              version = "0.2.0";
              sha256 =
                "0646fe332ca3415ca6b0b273b4a5689ec902b9f9004ca62229ded00bd5f64cda";
            };

            beamDeps  = [ folsom_0_8_3 ];

            meta = {
              description = ''Wrapper around some Folsom functions'';

            };
          }
      ) {};

    quintana_0_2_1 = callPackage
      (
        {  buildRebar3, fetchHex, folsom_0_8_3 }:
          buildRebar3 {
            name = "quintana";
            version = "0.2.1";
            src = fetchHex {
              pkg = "quintana";
              version = "0.2.1";
              sha256 =
                "d4683eb33c71f6cab3b17b896b4fa9180f17a0a8b086440bfe0c5675182f0194";
            };

            beamDeps  = [ folsom_0_8_3 ];

            meta = {
              description = ''Wrapper around some Folsom functions'';

            };
          }
      ) {};

    quintana = quintana_0_2_1;

    rabbitElixir_1_0_1 = callPackage
      (
        {  buildMix, fetchHex, exjsx_3_1_0 }:
          buildMix {
            name = "rabbitElixir";
            version = "1.0.1";
            src = fetchHex {
              pkg = "rabbitElixir";
              version = "1.0.1";
              sha256 =
                "bc0ddae7fa0b869a6688db2e5d909d375ff0692a959aa768eed586bcfd2d0a2f";
            };
            beamDeps  = [ exjsx_3_1_0 ];

            meta = {
              description = ''Another Zawgyi <=> Unicode Converter '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Rabbit-Converter/Rabbit-Elixir";
            };
          }
      ) {};

    rabbitElixir = rabbitElixir_1_0_1;

    rabbit_common_3_5_6 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "rabbit_common";
            version = "3.5.6";
            src = fetchHex {
              pkg = "rabbit_common";
              version = "3.5.6";
              sha256 =
                "9335ab3ebc4e8e140d7bc9b1b0e7ee99c0aa87d0a746b704184121ba35c04f1c";
            };

            meta = {
              longDescription = ''Includes modules which are a runtime
                                dependency of the RabbitMQ/AMQP Erlang client
                                and are common to the RabbitMQ server.'';
              license = stdenv.lib.licenses.mpl11;
              homepage = "https://github.com/jbrisbin/rabbit_common";
            };
          }
      ) {};

    rabbit_common = rabbit_common_3_5_6;

    rackla_0_1_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_1_5_2,
          plug_0_14_0,
          hackney_1_4_8,
          cowboy_1_0_4
        }:
          buildMix {
            name = "rackla";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rackla";
              version = "0.1.0";
              sha256 =
                "640b77e8a78e66085a49fc4af6fc3b028b2db8af39ee4c950e4a812c15c8657f";
            };
            beamDeps  = [ poison_1_5_2 plug_0_14_0 hackney_1_4_8 cowboy_1_0_4
                      ];

            meta = {
              description = ''Rackla is library for building API-gateways.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/AntonFagerberg/rackla";
            };
          }
      ) {};

    rackla = rackla_0_1_0;

    radpath_0_0_5 = callPackage
      (
        {  buildMix, fetchHex, excoveralls_0_5_1 }:
          buildMix {
            name = "radpath";
            version = "0.0.5";
            src = fetchHex {
              pkg = "radpath";
              version = "0.0.5";
              sha256 =
                "0da59ca494b833988c9e2b64e075a63949adf8716bf4470d738754723de9bdca";
            };
            beamDeps  = [ excoveralls_0_5_1 ];

            meta = {
              description = ''A path library for Elixir inspired by Python path
                            libraries '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lowks/Radpath";
            };
          }
      ) {};

    radpath = radpath_0_0_5;

    rails_4_2_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "rails";
            version = "4.2.0";
            src = fetchHex {
              pkg = "rails";
              version = "4.2.0";
              sha256 =
                "731692769aa106a20c87b12dca15336fd1d16a7f02e2615ad76f6ce83a2b0b46";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              longDescription = ''A plug to get your plug/phoenix applications
                                performance more in line with Rails.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/rails";
            };
          }
      ) {};

    rails = rails_4_2_0;

    ranch_1_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "ranch";
            version = "1.1.0";
            src = fetchHex {
              pkg = "ranch";
              version = "1.1.0";
              sha256 =
                "98ade939e63e6567da5dec5bc5bd93cbdc53d53f8b1aa998adec60dc4057f048";
            };

            meta = {
              description = ''Socket acceptor pool for TCP protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/ranch";
            };
          }
      ) {};

    ranch_1_2_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "ranch";
            version = "1.2.1";
            src = fetchHex {
              pkg = "ranch";
              version = "1.2.1";
              sha256 =
                "f602d057615ce737945c239e9c8155d3f5300fc5b1255abf81f2a9d0d08e5b04";
            };

            meta = {
              description = ''Socket acceptor pool for TCP protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/ranch";
            };
          }
      ) {};

    ranch = ranch_1_2_1;

    random_0_2_2 = callPackage
      (
        {  buildMix, fetchHex, tinymt_0_3_1 }:
          buildMix {
            name = "random";
            version = "0.2.2";
            src = fetchHex {
              pkg = "random";
              version = "0.2.2";
              sha256 =
                "504b6bd71c149a8b24c77df3b64c7261112f48811c91b5b8ab71f54d338c6b37";
            };
            beamDeps  = [ tinymt_0_3_1 ];

            meta = {
              longDescription = ''This module contains pseudo-random number
                                generators for various distributions ported from
                                Python 3 random module for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuce/random";
            };
          }
      ) {};

    random = random_0_2_2;

    random_string_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "random_string";
            version = "0.0.1";
            src = fetchHex {
              pkg = "random_string";
              version = "0.0.1";
              sha256 =
                "4a90483956764f6ad3d928e27d2e6a1e830bc53b28ded5464c715eb2ec6b8ed8";
            };

            meta = {
              description = ''Generates random string (or a stream of
                            characters) of desired character sets.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sylph01/random_string";
            };
          }
      ) {};

    random_string = random_string_0_0_1;

    range_extras_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "range_extras";
            version = "0.1.0";
            src = fetchHex {
              pkg = "range_extras";
              version = "0.1.0";
              sha256 =
                "edc50d31341e1370d009df8b51d7d0e355a966068520ff38e88b8b542953e15c";
            };

            meta = {
              description = ''Elixir range utilities: constant-time random
                            sampling and set operations.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lnikkila/elixir-range-extras";
            };
          }
      ) {};

    range_extras = range_extras_0_1_0;

    rankmatcher_0_1_2 = callPackage
      (
        {  buildRebar3, fetchHex, libsnarlmatch_0_1_5 }:
          buildRebar3 {
            name = "rankmatcher";
            version = "0.1.2";
            src = fetchHex {
              pkg = "rankmatcher";
              version = "0.1.2";
              sha256 =
                "8ea5974be574159e6ac188fc4309ef86889d6b227df44b1426f39b02b7d533e7";
            };

            beamDeps  = [ libsnarlmatch_0_1_5 ];

            meta = {
              description = ''Library to rank and match lists'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/dalmatinerdb/mstore";
            };
          }
      ) {};

    rankmatcher = rankmatcher_0_1_2;

    rapidax_0_0_3 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1, cowboy_1_0_4
        }:
          buildMix {
            name = "rapidax";
            version = "0.0.3";
            src = fetchHex {
              pkg = "rapidax";
              version = "0.0.3";
              sha256 =
                "9912b79b3d2729465bf66315bd955e031aeb038f05a63faa2dc0414026edb18c";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 cowboy_1_0_4 ];

            meta = {
              description = ''Rapidly develop your API client - based on
                            rapidash gem'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/victorlcampos/rapidax";
            };
          }
      ) {};

    rapidax = rapidax_0_0_3;

    rational_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, earmark_0_2_1 }:
          buildMix {
            name = "rational";
            version = "0.2.0";
            src = fetchHex {
              pkg = "rational";
              version = "0.2.0";
              sha256 =
                "640093486afd882e5283d4269d9ab624369239016fed67e3b8038845322107b7";
            };
            beamDeps  = [ earmark_0_2_1 ];

            meta = {
              longDescription = ''Rational is a module for exact representation
                                and manipulation of rational fractions, that is,
                                those fractions that can be exactly represented
                                by a ratio of integers (e.g., 1/3 or
                                4176/22687).'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/twist-vector/elixir-rational.git";
            };
          }
      ) {};

    rational = rational_0_2_0;

    ratx_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "ratx";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ratx";
              version = "0.1.0";
              sha256 =
                "fbf933ff32fdc127200880f5b567820bf03504ade1bd697ffbc0535dbafc23d6";
            };

            meta = {
              description = ''Rate limiter and overload protection for erlang
                            and elixir applications. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/liveforeverx/ratx";
            };
          }
      ) {};

    ratx = ratx_0_1_0;

    raven_0_0_5 = callPackage
      (
        {  buildMix, fetchHex, hackney_1_0_6, uuid_0_1_5, poison_1_2_1 }:
          buildMix {
            name = "raven";
            version = "0.0.5";
            src = fetchHex {
              pkg = "raven";
              version = "0.0.5";
              sha256 =
                "dac032f4a14adbd174927508709585bd34f9baa2836ff3987b4d071790cb229a";
            };
            beamDeps  = [ hackney_1_0_6 uuid_0_1_5 poison_1_2_1 ];

            meta = {
              description = ''Raven is an Elixir client for Sentry'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vishnevskiy/raven-elixir";
            };
          }
      ) {};

    raven = raven_0_0_5;

    raygun_0_2_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          timex_1_0_1,
          poison_1_5_2,
          plug_1_1_1,
          httpoison_0_8_1
        }:
          buildMix {
            name = "raygun";
            version = "0.2.0";
            src = fetchHex {
              pkg = "raygun";
              version = "0.2.0";
              sha256 =
                "742fe2fef4fff5933802566375ce8efe27eaa2afbb8609c1bca50ef43f30bc3f";
            };
            beamDeps  = [ timex_1_0_1 poison_1_5_2 plug_1_1_1 httpoison_0_8_1
                      ];

            meta = {
              longDescription = ''Send errors in your application to Raygun.
                                Raygun captures all your application errors in
                                one place. It can be used as a Plug, via Logger
                                and/or programmatically.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cobenian/raygun";
            };
          }
      ) {};

    raygun = raygun_0_2_0;

    reactive_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "reactive";
            version = "0.0.1";
            src = fetchHex {
              pkg = "reactive";
              version = "0.0.1";
              sha256 =
                "af17deb3beedd24319940000e286a1f8d9f29beb498980475e16cc57857469f9";
            };

            meta = {
              description = ''Reactive Programming for Elixir'';

            };
          }
      ) {};

    reactive = reactive_0_0_1;

    readme_md_doc_0_1_2 = callPackage
      (
        {  buildMix, fetchHex, ex_doc_0_11_4, argument_parser_0_1_1 }:
          buildMix {
            name = "readme_md_doc";
            version = "0.1.2";
            src = fetchHex {
              pkg = "readme_md_doc";
              version = "0.1.2";
              sha256 =
                "3353e8598991afbaa8d12344212fdd9c85413d1664b026a7ee1036573c6f536c";
            };
            beamDeps  = [ ex_doc_0_11_4 argument_parser_0_1_1 ];

            meta = {
              description = ''README.md generation tool for small Elixir
                            project'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jisaacstone/readme_md_docgen";
            };
          }
      ) {};

    readme_md_doc = readme_md_doc_0_1_2;

    reagent_0_1_5 = callPackage
      (
        {  buildMix, fetchHex, exts_0_2_2, socket_0_2_8 }:
          buildMix {
            name = "reagent";
            version = "0.1.5";
            src = fetchHex {
              pkg = "reagent";
              version = "0.1.5";
              sha256 =
                "bc2765571d6358098c2c90f7870aa5111bf726a1abef2ad131f02b9aa55c5c9c";
            };
            beamDeps  = [ exts_0_2_2 socket_0_2_8 ];

            meta = {
              description = ''You need more reagents to conjure this server'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/reagent";
            };
          }
      ) {};

    reagent = reagent_0_1_5;

    reap_0_1_3 = callPackage
      (
        {  buildMix, fetchHex, jsex_2_0_0 }:
          buildMix {
            name = "reap";
            version = "0.1.3";
            src = fetchHex {
              pkg = "reap";
              version = "0.1.3";
              sha256 =
                "e260540500a29ac9945db512a550cd9b56ba4295b4aa3c1b408ad62720e7807b";
            };
            beamDeps  = [ jsex_2_0_0 ];

            meta = {
              description = ''A library for working with the refheap API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Raynes/reap";
            };
          }
      ) {};

    reap = reap_0_1_3;

    reaxive_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "reaxive";
            version = "0.1.0";
            src = fetchHex {
              pkg = "reaxive";
              version = "0.1.0";
              sha256 =
                "d185c80da34499999000f6aaab3ab891cdff34cb3a2079835e8e6f5b4e813fa2";
            };

            meta = {
              longDescription = ''Reaxive is a library inspired by Reactive
                                Extensions and ELM to provide functional
                                reactive programming to Elixir. It allows for
                                active sequences of events and a set of
                                stream-reducer like transformations such as map
                                or filter. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/alfert/reaxive";
            };
          }
      ) {};

    reaxive = reaxive_0_1_0;

    reaxt_0_3_2 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poolboy_1_5_1,
          poison_1_4_0,
          plug_1_1_1,
          exos_1_0_0,
          cowboy_1_0_4
        }:
          buildMix {
            name = "reaxt";
            version = "0.3.2";
            src = fetchHex {
              pkg = "reaxt";
              version = "0.3.2";
              sha256 =
                "48413f06e14e26b10ea513f7006625684c8db23ea18bfd61eaa5732c588f769c";
            };
            beamDeps  = [
                          poolboy_1_5_1
                          poison_1_4_0
                          plug_1_1_1
                          exos_1_0_0
                          cowboy_1_0_4
                        ];

            meta = {
              longDescription = ''Use your react components into your elixir
                                application, using webpack compilation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/reaxt";
            };
          }
      ) {};

    reaxt = reaxt_0_3_2;

    rebar3_abnfc_plugin_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "rebar3_abnfc_plugin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rebar3_abnfc_plugin";
              version = "0.1.0";
              sha256 =
                "7c9cf5608888c0fe149cfc4d25a5911e604a1e63f7c0c73c3cf8792a33be9a7b";
            };

            meta = {
              description = ''A rebar plugin for abnfc'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/surik/rebar3_abnfc_plugin";
            };
          }
      ) {};

    rebar3_abnfc_plugin = rebar3_abnfc_plugin_0_1_0;

    rebar3_appup_plugin_1_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "rebar3_appup_plugin";
            version = "1.0.0";
            src = fetchHex {
              pkg = "rebar3_appup_plugin";
              version = "1.0.0";
              sha256 =
                "8211e7cf4f251cdd3c324864e6e090d89a9edb58d019f4cdb7e1084cc6a4b9d7";
            };

            meta = {
              description = ''A rebar3 plugin for handling .appup files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lrascao/rebar3_appup_plugin";
            };
          }
      ) {};

    rebar3_appup_plugin = rebar3_appup_plugin_1_0_0;

    rebar3_asn1_compiler_1_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "rebar3_asn1_compiler";
            version = "1.0.0";
            src = fetchHex {
              pkg = "rebar3_asn1_compiler";
              version = "1.0.0";
              sha256 =
                "25ec1d5c97393195650ac8c7a06a267a886a1479950ee047c43b5228c07b30b9";
            };

            meta = {
              description = ''Compile ASN.1 modules with Rebar3'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pyykkis/rebar3_asn1_compiler";
            };
          }
      ) {};

    rebar3_asn1_compiler = rebar3_asn1_compiler_1_0_0;

    rebar3_auto_0_3_0 = callPackage
      (
        {  buildRebar3, fetchHex, enotify_0_1_0 }:
          buildRebar3 {
            name = "rebar3_auto";
            version = "0.3.0";
            src = fetchHex {
              pkg = "rebar3_auto";
              version = "0.3.0";
              sha256 =
                "9fcca62411b0b7680426bd911002c0769690aef3838829583ffa4547fd5038b5";
            };

            beamDeps  = [ enotify_0_1_0 ];

            meta = {
              description = ''Rebar3 plugin for auto compiling on changes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsloughter/rebar3_auto";
            };
          }
      ) {};

    rebar3_auto = rebar3_auto_0_3_0;

    rebar3_autotest_0_1_1 = callPackage
      (
        {  buildRebar3, fetchHex, enotify_0_1_0 }:
          buildRebar3 {
            name = "rebar3_autotest";
            version = "0.1.1";
            src = fetchHex {
              pkg = "rebar3_autotest";
              version = "0.1.1";
              sha256 =
                "7f5856336e772b14a578f0c01ce14b2a195c41d5b595c83662ffd130f7874eac";
            };

            beamDeps  = [ enotify_0_1_0 ];

            meta = {
              description = ''A rebar3 plugin to run tests automatically when
                            there are changes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/NobbZ/rebar3_autotest";
            };
          }
      ) {};

    rebar3_autotest = rebar3_autotest_0_1_1;

    rebar3_cuttlefish_0_5_0 = callPackage
      (
        {  buildRebar3, fetchHex, cuttlefish_2_0_7 }:
          buildRebar3 {
            name = "rebar3_cuttlefish";
            version = "0.5.0";
            src = fetchHex {
              pkg = "rebar3_cuttlefish";
              version = "0.5.0";
              sha256 =
                "dd2cdb1e6cbcf5cdb92adec0e359a3ec5f407c49a6182e7fdfcde1b45e790348";
            };

            beamDeps  = [ cuttlefish_2_0_7 ];

            meta = {
              description = ''A rebar plugin'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/tsloughter/rebar3_cuttlefish";
            };
          }
      ) {};

    rebar3_cuttlefish = rebar3_cuttlefish_0_5_0;

    rebar3_diameter_compiler_0_3_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "rebar3_diameter_compiler";
            version = "0.3.1";
            src = fetchHex {
              pkg = "rebar3_diameter_compiler";
              version = "0.3.1";
              sha256 =
                "c5965e3810ccf9ef9ba9185a81fe569ef6e9f3a9e546e99c5e900736b0c39274";
            };

            meta = {
              description = ''Compile diameter .dia files'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/carlosedp/rebar3_diameter_compiler";
            };
          }
      ) {};

    rebar3_diameter_compiler = rebar3_diameter_compiler_0_3_1;

    rebar3_elixirc_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "rebar3_elixirc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rebar3_elixirc";
              version = "0.1.0";
              sha256 =
                "1c6ae367737306beefa0891d60cabf0357b85fcf472a2808c3e2295882f6ead8";
            };

            meta = {
              description = ''A rebar plugin'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/tsloughter/rebar3_elixirc";
            };
          }
      ) {};

    rebar3_elixirc = rebar3_elixirc_0_1_0;

    rebar3_eqc_0_0_8 = callPackage
      (
        {  buildRebar3, fetchHex, cf_0_1_2 }:
          buildRebar3 {
            name = "rebar3_eqc";
            version = "0.0.8";
            src = fetchHex {
              pkg = "rebar3_eqc";
              version = "0.0.8";
              sha256 =
                "0a5cd09106a23ccad2b528e5c2f68f7884cba367b03e81c055f1f3fc742d1526";
            };

            beamDeps  = [ cf_0_1_2 ];

            meta = {
              description = ''Plugin to run EQC properties'';
              license = stdenv.lib.licenses.apsl20;
              homepage =
                "https://github.com/kellymclaughlin/rebar3-eqc-plugin";
            };
          }
      ) {};

    rebar3_eqc = rebar3_eqc_0_0_8;

    rebar3_exunit_0_1_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "rebar3_exunit";
            version = "0.1.1";
            src = fetchHex {
              pkg = "rebar3_exunit";
              version = "0.1.1";
              sha256 =
                "910d2f2038dcf2b32deb40a36082ad5435389106b2dbd6266e0ee3a20a688650";
            };

            meta = {
              description = ''Plugin to run exUnit tests'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/processone/rebar3_exunit_plugin";
            };
          }
      ) {};

    rebar3_exunit = rebar3_exunit_0_1_1;

    rebar3_gpb_plugin_1_2_0 = callPackage
      (
        {  buildRebar3, fetchHex, gpb_3_18_8 }:
          buildRebar3 {
            name = "rebar3_gpb_plugin";
            version = "1.2.0";
            src = fetchHex {
              pkg = "rebar3_gpb_plugin";
              version = "1.2.0";
              sha256 =
                "a5b305359d17399a2f4bfc26c6f4fd12ad846966642241ff85eb6e04bd1e97b6";
            };

            beamDeps  = [ gpb_3_18_8 ];

            meta = {
              description = ''A rebar3 gpb plugin for compiling .proto files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lrascao/rebar3_gpb_plugin";
            };
          }
      ) {};

    rebar3_gpb_plugin = rebar3_gpb_plugin_1_2_0;

    rebar3_hex_1_19_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "rebar3_hex";
            version = "1.19.0";
            src = fetchHex {
              pkg = "rebar3_hex";
              version = "1.19.0";
              sha256 =
                "b7c291d742e25eeae5dc5bd97e5b0a8987dab17da65054f757311ad90b16b73e";
            };

            meta = {
              description = ''Hex.pm plugin for rebar3'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsloughter/rebar3_hex";
            };
          }
      ) {};

    rebar3_hex = rebar3_hex_1_19_0;

    rebar3_idl_compiler_0_3_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "rebar3_idl_compiler";
            version = "0.3.0";
            src = fetchHex {
              pkg = "rebar3_idl_compiler";
              version = "0.3.0";
              sha256 =
                "31ba95205c40b990cb3c49abb397abc47b4d5f9c402db83f9daebbc44e69789d";
            };

            meta = {
              description = ''Rebar3 IDL Compiler'';

              homepage = "https://github.com/sebastiw/rebar3_idl_compiler";
            };
          }
      ) {};

    rebar3_idl_compiler = rebar3_idl_compiler_0_3_0;

    rebar3_live_0_1_3 = callPackage
      (
        {  buildRebar3, fetchHex, enotify_0_1_0 }:
          buildRebar3 {
            name = "rebar3_live";
            version = "0.1.3";
            src = fetchHex {
              pkg = "rebar3_live";
              version = "0.1.3";
              sha256 =
                "d9ee2ff022fc73ac94f206c13ff8aa7591a536704f49c4cbacabf37d181a4391";
            };

            beamDeps  = [ enotify_0_1_0 ];

            meta = {
              description = ''Rebar3 live plugin'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pvmart/rebar3_live";
            };
          }
      ) {};

    rebar3_live = rebar3_live_0_1_3;

    rebar3_neotoma_plugin_0_2_0 = callPackage
      (
        {  buildRebar3, fetchHex, neotoma_1_7_3 }:
          buildRebar3 {
            name = "rebar3_neotoma_plugin";
            version = "0.2.0";
            src = fetchHex {
              pkg = "rebar3_neotoma_plugin";
              version = "0.2.0";
              sha256 =
                "c0ebbdb08c017cac90c7d3310a9bd4a5088a46abd4e2fef9e9a9805a657396b8";
            };

            beamDeps  = [ neotoma_1_7_3 ];

            meta = {
              description = ''Neotoma rebar plugin'';
              license = stdenv.lib.licenses.apsl20;
              homepage =
                "https://github.com/zamotivator/rebar3_neotoma_plugin";
            };
          }
      ) {};

    rebar3_neotoma_plugin = rebar3_neotoma_plugin_0_2_0;

    rebar3_proper_0_5_0 = callPackage
      (
        {  buildRebar3, fetchHex, proper_1_1_1_beta }:
          buildRebar3 {
            name = "rebar3_proper";
            version = "0.5.0";
            src = fetchHex {
              pkg = "rebar3_proper";
              version = "0.5.0";
              sha256 =
                "c73549e279454f6a5887d564addafb779a4dd276460f17af5c26045ef8f44059";
            };

            beamDeps  = [ proper_1_1_1_beta ];

            meta = {
              description = ''Run PropEr test suites'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/ferd/rebar3_proper";
            };
          }
      ) {};

    rebar3_proper = rebar3_proper_0_5_0;

    rebar3_proper_plugin_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "rebar3_proper_plugin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rebar3_proper_plugin";
              version = "0.1.0";
              sha256 =
                "7071555afb623e73a2c572de6d4379f9c197b44e68608944eb2835617faed10d";
            };

            meta = {
              description = ''A rebar plugin'';

            };
          }
      ) {};

    rebar3_proper_plugin = rebar3_proper_plugin_0_1_0;

    rebar3_protobuffs_0_2_0 = callPackage
      (
        {  buildRebar3, fetchHex, protobuffs_0_8_2 }:
          buildRebar3 {
            name = "rebar3_protobuffs";
            version = "0.2.0";
            src = fetchHex {
              pkg = "rebar3_protobuffs";
              version = "0.2.0";
              sha256 =
                "b5422c5aee1dcea90fa44e4b769c01e8cefe8b1ab09e44b4d2008d465e80c49c";
            };

            beamDeps  = [ protobuffs_0_8_2 ];

            meta = {
              description = ''A rebar plugin'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/rebar3_protobuffs";
            };
          }
      ) {};

    rebar3_protobuffs = rebar3_protobuffs_0_2_0;

    rebar3_run_0_2_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "rebar3_run";
            version = "0.2.0";
            src = fetchHex {
              pkg = "rebar3_run";
              version = "0.2.0";
              sha256 =
                "321e0647893957d1bb05a88d940a8a3b9129097d63529e13f815c4857bf29497";
            };
            compilePorts = true;

            meta = {
              description = ''A rebar plugin'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsloughter/rebar3_run";
            };
          }
      ) {};

    rebar3_run = rebar3_run_0_2_0;

    rebar3_yang_plugin_0_2_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "rebar3_yang_plugin";
            version = "0.2.1";
            src = fetchHex {
              pkg = "rebar3_yang_plugin";
              version = "0.2.1";
              sha256 =
                "8a68890ba67baf25b539acfd20783732a90b57f75f7d868cb62d1f7f061449fa";
            };

            meta = {
              description = ''A rebar plugin for yang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/surik/rebar3_yang_plugin";
            };
          }
      ) {};

    rebar3_yang_plugin = rebar3_yang_plugin_0_2_1;

    rebar_alias_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "rebar_alias";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rebar_alias";
              version = "0.1.0";
              sha256 =
                "59fb42b39964af3a29ebe94c11247f618dd4d5e4e1a69cfaffabbed03ccff70f";
            };

            meta = {
              description = ''A rebar plugin'';

            };
          }
      ) {};

    rebar_alias = rebar_alias_0_1_0;

    rebar_erl_vsn_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "rebar_erl_vsn";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rebar_erl_vsn";
              version = "0.1.0";
              sha256 =
                "7cf1e2e85a80785a4e4e1529a2c837dbd2d540214cf791214e56f931e5e9865d";
            };

            meta = {
              description = ''defines for erlang versions'';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    rebar_erl_vsn = rebar_erl_vsn_0_1_0;

    rebar_protobuffs_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex, gpb_3_18_8 }:
          buildRebar3 {
            name = "rebar_protobuffs";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rebar_protobuffs";
              version = "0.1.0";
              sha256 =
                "1345b2135aed454855bfc74b760feb420924824c937157098b1f8668deb919b5";
            };

            beamDeps  = [ gpb_3_18_8 ];

            meta = {
              description = ''A rebar plugin'';

            };
          }
      ) {};

    rebar_protobuffs = rebar_protobuffs_0_1_0;

    rebind_0_1_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "rebind";
            version = "0.1.3";
            src = fetchHex {
              pkg = "rebind";
              version = "0.1.3";
              sha256 =
                "043322759e646ef255e91440d275573b70d9ac6bdf10988ec976ddcf1baf99c3";
            };

            meta = {
              description = ''rebind parse transform for erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/rebind";
            };
          }
      ) {};

    rebind = rebind_0_1_3;

    recaptcha_1_1_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "recaptcha";
            version = "1.1.1";
            src = fetchHex {
              pkg = "recaptcha";
              version = "1.1.1";
              sha256 =
                "ebfa37443d23d2c70366f3f84f00bd50d59da5583ffde2673bc5ea83667b5751";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''A simple reCaptcha package for Phoenix
                            applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JustMikey/recaptcha";
            };
          }
      ) {};

    recaptcha = recaptcha_1_1_1;

    recon_2_2_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "recon";
            version = "2.2.1";
            src = fetchHex {
              pkg = "recon";
              version = "2.2.1";
              sha256 =
                "6c548ad0f4916495a78977674a251847869f85b5125b7c2a44da3178955adfd1";
            };

            meta = {
              longDescription = ''Recon wants to be a set of tools usable in
                                production to diagnose Erlang problems or
                                inspect production environment safely.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/ferd/recon";
            };
          }
      ) {};

    recon = recon_2_2_1;

    recon_ex_0_9_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "recon_ex";
            version = "0.9.0";
            src = fetchHex {
              pkg = "recon_ex";
              version = "0.9.0";
              sha256 =
                "7a24dcb173e74c0e65357deb6e084cd71b1f24915b4801e12ec38bd4d587c2dd";
            };

            meta = {
              description = ''Elixir wrapper for Recon, diagnostic tools for
                            production use'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/tatsuya6502/recon_ex";
            };
          }
      ) {};

    recon_ex = recon_ex_0_9_0;

    record_translator_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "record_translator";
            version = "0.0.3";
            src = fetchHex {
              pkg = "record_translator";
              version = "0.0.3";
              sha256 =
                "d6a30b2b23194e58c282c86cc0d3f61a738e1840afcee4007fdbb10e7ad7bf76";
            };

            meta = {
              description = ''Erlang`s file of records to Elixir`s maps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/massn/record_translator";
            };
          }
      ) {};

    record_translator = record_translator_0_0_3;

    red_0_0_5 = callPackage
      (
        {  buildMix, fetchHex, exredis_0_2_3 }:
          buildMix {
            name = "red";
            version = "0.0.5";
            src = fetchHex {
              pkg = "red";
              version = "0.0.5";
              sha256 =
                "191b394672817e1ef955cc9b99bd26c61daab9bbbbc089825e7957e92c0eba60";
            };
            beamDeps  = [ exredis_0_2_3 ];

            meta = {
              longDescription = ''Red is an Elixir library that uses Redis to
                                persist relationships between objects, like a
                                graph.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rodrigues/red";
            };
          }
      ) {};

    red = red_0_0_5;

    red_black_tree_1_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "red_black_tree";
            version = "1.2.0";
            src = fetchHex {
              pkg = "red_black_tree";
              version = "1.2.0";
              sha256 =
                "1e8e7b85d075e249f9384ba0fcd2aacbff3697a5cb3cb5c9838c86f762b79725";
            };

            meta = {
              description = ''Red-Black trees: an ordered key-value store with
                            O(log(N)) performance'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SenecaSystems/red_black_tree";
            };
          }
      ) {};

    red_black_tree = red_black_tree_1_2_0;

    reddhl_0_0_1 = callPackage
      (
        {  buildRebar3, fetchHex, poison_1_4_0, httpoison_0_8_1 }:
          buildRebar3 {
            name = "reddhl";
            version = "0.0.1";
            src = fetchHex {
              pkg = "reddhl";
              version = "0.0.1";
              sha256 =
                "4b2a5b1e3119b5b44e57c10e395fc817d977bf7fd72464605efff08266336871";
            };

            beamDeps  = [ poison_1_4_0 httpoison_0_8_1 ];

            meta = {
              description = ''An headline and link puller for Reddit and its
                            various subreddits '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/MonkeyIsNull/reddhl";
            };
          }
      ) {};

    reddhl = reddhl_0_0_1;

    redis_poolex_0_0_5 = callPackage
      (
        {  buildMix, fetchHex, poolboy_1_5_1, exredis_0_2_3 }:
          buildMix {
            name = "redis_poolex";
            version = "0.0.5";
            src = fetchHex {
              pkg = "redis_poolex";
              version = "0.0.5";
              sha256 =
                "aec40aa6807c6629a20657af502073849263bc35385abbcbb13748aaf8c995b6";
            };
            beamDeps  = [ poolboy_1_5_1 exredis_0_2_3 ];

            meta = {
              description = ''Redis connection pool using poolboy and exredis
                            libraries'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/oivoodoo/redis_poolex";
            };
          }
      ) {};

    redis_poolex = redis_poolex_0_0_5;

    redix_0_3_4 = callPackage
      (
        {  buildMix, fetchHex, connection_1_0_2 }:
          buildMix {
            name = "redix";
            version = "0.3.4";
            src = fetchHex {
              pkg = "redix";
              version = "0.3.4";
              sha256 =
                "111acb6b4250f2c2aa1757bf9404176a5fc1e2a70cfd2413cbf26e217f61927e";
            };
            beamDeps  = [ connection_1_0_2 ];

            meta = {
              description = ''Superfast, pipelined, resilient Redis driver for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/redix";
            };
          }
      ) {};

    redix = redix_0_3_4;

    redo_2_0_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "redo";
            version = "2.0.1";
            src = fetchHex {
              pkg = "redo";
              version = "2.0.1";
              sha256 =
                "f7b2be8c825ec34413c54d8f302cc935ce4ecac8421ae3914c5dadd816dcb1e6";
            };

            meta = {
              description = ''Pipelined Redis Erlang Driver'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/heroku/redo";
            };
          }
      ) {};

    redo = redo_2_0_1;

    redtube_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "redtube";
            version = "1.0.0";
            src = fetchHex {
              pkg = "redtube";
              version = "1.0.0";
              sha256 =
                "f9c5b83c3f860c448328079f1250b54f06749d9c1adb593f7e11e45fe8131a0d";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''API Wrapper for Redtube'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kkirsche/Redtube_Elixir";
            };
          }
      ) {};

    redtube = redtube_1_0_0;

    ref_inspector_0_8_0 = callPackage
      (
        {  buildMix, fetchHex, poolboy_1_5_1 }:
          buildMix {
            name = "ref_inspector";
            version = "0.8.0";
            src = fetchHex {
              pkg = "ref_inspector";
              version = "0.8.0";
              sha256 =
                "3bef725ae702cfd9724fb1adabf1210740a15d6861feab01d13ccb9007f9a634";
            };
            beamDeps  = [ poolboy_1_5_1 ];

            meta = {
              description = ''Referer parser library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixytics/ref_inspector";
            };
          }
      ) {};

    ref_inspector = ref_inspector_0_8_0;

    relax_0_3_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_1_5_2,
          plug_1_1_1,
          ja_serializer_0_7_1,
          ecto_2_0_0_beta_0,
          cowboy_1_0_4
        }:
          buildMix {
            name = "relax";
            version = "0.3.0";
            src = fetchHex {
              pkg = "relax";
              version = "0.3.0";
              sha256 =
                "04382f1d8a6d14e3a9b2177a318aa02129665fa3e00fb52d0042e286ea9af392";
            };
            beamDeps  = [
                          poison_1_5_2
                          plug_1_1_1
                          ja_serializer_0_7_1
                          ecto_2_0_0_beta_0
                          cowboy_1_0_4
                        ];

            meta = {
              longDescription = ''A jsonapi.org serializer and optional server
                                implementation in Elixir. Relax can be used as a
                                standalone API with Relax.Router and
                                Relax.Resources, or integrated into Phoenix
                                using Relax.Serializer.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/AgilionApps/relax";
            };
          }
      ) {};

    relax = relax_0_3_0;

    relflow_1_0_4 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "relflow";
            version = "1.0.4";
            src = fetchHex {
              pkg = "relflow";
              version = "1.0.4";
              sha256 =
                "e6d9652ed7511aea18fa012d5abc19301acd8cbe81a44a159391086a5be12e1f";
            };

            meta = {
              description = ''Rebar3 release workflow plugin'';
              license = stdenv.lib.licenses.apsl20;
            };
          }
      ) {};

    relflow = relflow_1_0_4;

    relief_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "relief";
            version = "0.0.1";
            src = fetchHex {
              pkg = "relief";
              version = "0.0.1";
              sha256 =
                "81c51cdf1fbaa7654da74d4ac1831b0d79504affd7b1fbe9d6f16ce701288c50";
            };

            meta = {
              description = ''A collection of Elixir Stream oriented relief
                            mechanisms.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/voidlock/relief";
            };
          }
      ) {};

    relief = relief_0_0_1;

    relisa_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, exrm_0_18_8 }:
          buildMix {
            name = "relisa";
            version = "0.1.0";
            src = fetchHex {
              pkg = "relisa";
              version = "0.1.0";
              sha256 =
                "e771fa9da8363571765374a0cf3f1237da8c1be35ea4109165928ca42895954c";
            };
            beamDeps  = [ exrm_0_18_8 ];

            meta = {
              description = ''Fast, simple, and composable deployment library
                            for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SenecaSystems/relisa";
            };
          }
      ) {};

    relisa = relisa_0_1_0;

    relocker_0_0_6 = callPackage
      (
        {  buildMix, fetchHex, exredis_0_2_3 }:
          buildMix {
            name = "relocker";
            version = "0.0.6";
            src = fetchHex {
              pkg = "relocker";
              version = "0.0.6";
              sha256 =
                "8aaaa5f7d118b543764005fa7af47a77d9c74d606603c29005b0637ef1c192df";
            };
            beamDeps  = [ exredis_0_2_3 ];

            meta = {
              description = ''A library for holding a lock in Redis.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/grandCru/relocker";
            };
          }
      ) {};

    relocker = relocker_0_0_6;

    reltool_util_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "reltool_util";
            version = "1.5.1";
            src = fetchHex {
              pkg = "reltool_util";
              version = "1.5.1";
              sha256 =
                "746e16871afdcf85d8a115389193c8d660d0df1d26d6ac700590e0ad252646b1";
            };

            meta = {
              description = ''Erlang reltool utility functionality
                            application'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/okeuday/reltool_util";
            };
          }
      ) {};

    reltool_util = reltool_util_1_5_1;

    relx_3_17_0 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          providers_1_6_0,
          getopt_0_8_2,
          erlware_commons_0_18_0,
          cf_0_2_1,
          bbmustache_1_0_4
        }:
          buildRebar3 {
            name = "relx";
            version = "3.17.0";
            src = fetchHex {
              pkg = "relx";
              version = "3.17.0";
              sha256 =
                "c22f3d8400394787cb67191dea4de1acccf1563f6cd2f1934bf2a13a525c5ef6";
            };

            beamDeps  = [
                          providers_1_6_0
                          getopt_0_8_2
                          erlware_commons_0_18_0
                          cf_0_2_1
                          bbmustache_1_0_4
                        ];

            meta = {
              description = ''Release assembler for Erlang/OTP Releases'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlware/relx";
            };
          }
      ) {};

    relx = relx_3_17_0;

    relx_3_3_1 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          providers_1_4_1,
          getopt_0_8_2,
          erlware_commons_0_14_0,
          bbmustache_1_0_3
        }:
          buildRebar3 {
            name = "relx";
            version = "3.3.1";
            src = fetchHex {
              pkg = "relx";
              version = "3.3.1";
              sha256 =
                "782fdce1daccb5dca6b372cdffb979cda3431ac245db5fafe93247f4fdab049b";
            };

            beamDeps  = [
                          providers_1_4_1
                          getopt_0_8_2
                          erlware_commons_0_14_0
                          bbmustache_1_0_3
                        ];

            meta = {
              description = ''Release assembler for Erlang/OTP Releases'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlware/relx";
            };
          }
      ) {};

    relx_3_5_0 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          providers_1_4_1,
          getopt_0_8_2,
          erlware_commons_0_15_0,
          bbmustache_1_0_3
        }:
          buildRebar3 {
            name = "relx";
            version = "3.5.0";
            src = fetchHex {
              pkg = "relx";
              version = "3.5.0";
              sha256 =
                "a8cbf529702024f56d03d43349a5aafac55a6aa1b2ecf7bd3e8cc61e72a858a1";
            };

            beamDeps  = [
                          providers_1_4_1
                          getopt_0_8_2
                          erlware_commons_0_15_0
                          bbmustache_1_0_3
                        ];

            meta = {
              description = ''Release assembler for Erlang/OTP Releases'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlware/relx";
            };
          }
      ) {};

    remix_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "remix";
            version = "0.0.2";
            src = fetchHex {
              pkg = "remix";
              version = "0.0.2";
              sha256 =
                "5f5555646ed4fca83fab8620735150aa0bc408c5a17a70d28cfa7086bc6f497c";
            };

            meta = {
              description = ''Recompiles mix projects on any change to the lib
                            directory.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/AgilionApps/remix";
            };
          }
      ) {};

    remix = remix_0_0_2;

    remodel_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "remodel";
            version = "0.0.1";
            src = fetchHex {
              pkg = "remodel";
              version = "0.0.1";
              sha256 =
                "f88edf81e99f7474792e71f5ab61155d1a031484565badebb8a15b0fe15b5207";
            };

            meta = {
              longDescription = ''Remodel is an Elixir presenter package used
                                to transform data structures. This is especially
                                useful when a desired representation doesn`t
                                match the schema defined within the database.
                                '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/stavro/remodel";
            };
          }
      ) {};

    remodel = remodel_0_0_1;

    rendezvous_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "rendezvous";
            version = "0.0.1";
            src = fetchHex {
              pkg = "rendezvous";
              version = "0.0.1";
              sha256 =
                "92aa7157aa2d0c1dcfc1dfeddeaef023aca6f5f0790fd8040828c831f3f7f893";
            };

            meta = {
              longDescription = ''Implementation of the Rendezvous or Highest
                                Random Weight (HRW) hashing algorithm'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Puddah/Rendezvous";
            };
          }
      ) {};

    rendezvous = rendezvous_0_0_1;

    repoquery_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "repoquery";
            version = "0.0.2";
            src = fetchHex {
              pkg = "repoquery";
              version = "0.0.2";
              sha256 =
                "6b379793fae7cf8ff696feaeff9bf06d58ad66a9cbadfc8a769291c54814c922";
            };

            meta = {
              description = ''An Elixir interface for the `repoquery` cli
                            tool.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rentpath/repoquery";
            };
          }
      ) {};

    repoquery = repoquery_0_0_2;

    reporter_0_4_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_2_1_0,
          httpoison_0_8_1,
          floki_0_7_1,
          feeder_ex_0_0_2
        }:
          buildMix {
            name = "reporter";
            version = "0.4.1";
            src = fetchHex {
              pkg = "reporter";
              version = "0.4.1";
              sha256 =
                "414bc7874fd551d5559907b88617a9a58aacb556d8b6adf6270cbef34656ebac";
            };
            beamDeps  = [
                          poison_2_1_0
                          httpoison_0_8_1
                          floki_0_7_1
                          feeder_ex_0_0_2
                        ];

            meta = {
              description = ''Simple getting reviews library from AppStore and
                            GooglePlay'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/simple_app_reporter_ex";
            };
          }
      ) {};

    reporter = reporter_0_4_1;

    reprise_0_5_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "reprise";
            version = "0.5.0";
            src = fetchHex {
              pkg = "reprise";
              version = "0.5.0";
              sha256 =
                "9db9fe973d2ac318a079409a75a18a8c2b5b1554db05f3611e81f555103ed9ed";
            };

            meta = {
              longDescription = ''Reprise reloads your modules after they`ve
                                been recompiled. This is an intentionally
                                simplified reloader when compared to the other
                                ones, like exreloader or Mochiweb reloader. It
                                aims to do one thing well. Only the beam files
                                which were created under your mix project are
                                scanned for changes. Deps are also excluded from
                                checking and reloading. It doesn`t try to
                                compile changed sources -- this task is better
                                left to some shell tools like inotify.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/herenowcoder/reprise";
            };
          }
      ) {};

    reprise = reprise_0_5_0;

    resin_0_4_1 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "resin";
            version = "0.4.1";
            src = fetchHex {
              pkg = "resin";
              version = "0.4.1";
              sha256 =
                "c6bdfd13e91cbc289df91440e216b91aa590a7dafe59958b0197cedd8cfef792";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              description = ''Pour resin in your plug pipeline to add
                            (configurable) enterpriseyness!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Frost/resin";
            };
          }
      ) {};

    resin = resin_0_4_1;

    rest_1_5_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "rest";
            version = "1.5.0";
            src = fetchHex {
              pkg = "rest";
              version = "1.5.0";
              sha256 =
                "d99f75ef949eae41e28f707f9e1b6ea5fa07cba57c5365b5466ed357e8f78b07";
            };

            meta = {
              description = ''REST erlang interface generator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/rest";
            };
          }
      ) {};

    rest = rest_1_5_0;

    rest_client_0_0_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_1_5_2,
          mock_0_1_1,
          inflex_1_4_1,
          httpotion_2_1_0
        }:
          buildMix {
            name = "rest_client";
            version = "0.0.1";
            src = fetchHex {
              pkg = "rest_client";
              version = "0.0.1";
              sha256 =
                "b537f9bc91fbf09ecb6c5890c0e5a01f20de869bc804f730688f61d6acd96cf8";
            };
            beamDeps  = [
                          poison_1_5_2 mock_0_1_1 inflex_1_4_1 httpotion_2_1_0
                        ];

            meta = {
              longDescription = ''RestClient is a generic REST client library.
                                It generates structs and functions for use with
                                APIs.'';

              homepage = "https://github.com/phikes/elixir-restclient";
            };
          }
      ) {};

    rest_client = rest_client_0_0_1;

    rethinkdb_0_3_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_0_3, connection_1_0_2 }:
          buildMix {
            name = "rethinkdb";
            version = "0.3.2";
            src = fetchHex {
              pkg = "rethinkdb";
              version = "0.3.2";
              sha256 =
                "b97da3f1281575ac4e24d1cc0ce20a7f5a2e05bc7d212e4e58e0c9f2411a1c8a";
            };
            beamDeps  = [ poison_1_0_3 connection_1_0_2 ];

            meta = {
              description = ''RethinkDB driver for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hamiltop/rethinkdb-elixir";
            };
          }
      ) {};

    rethinkdb = rethinkdb_0_3_2;

    reup_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "reup";
            version = "0.1.0";
            src = fetchHex {
              pkg = "reup";
              version = "0.1.0";
              sha256 =
                "949a672190119f8b24160167e3685fdd5397474f98dc875ccfd31378ebd68506";
            };

            meta = {
              description = ''dev watcher that auto compiles and reloads
                            modules'';
              license = stdenv.lib.licenses.apsl20;
            };
          }
      ) {};

    reup = reup_0_1_0;

    reverse_proxy_0_1_0 = callPackage
      (
        {
          buildMix, fetchHex, plug_1_0_3, httpoison_0_7_5, cowboy_1_0_4
        }:
          buildMix {
            name = "reverse_proxy";
            version = "0.1.0";
            src = fetchHex {
              pkg = "reverse_proxy";
              version = "0.1.0";
              sha256 =
                "77ab07ca68e758d5ce07878ae4effab8522545e6d491f9ae96c87814f35cbab2";
            };
            beamDeps  = [ plug_1_0_3 httpoison_0_7_5 cowboy_1_0_4 ];

            meta = {
              longDescription = ''A Plug based, reverse proxy server. Upstream
                                servers can be listed per-domain in the
                                following forms: - List of remote nodes, e.g.
                                `["host:4000", "host:4001"]` - A `{plug,
                                options}` tuple, useful for umbrella
                                applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/elixir-reverse-proxy";
            };
          }
      ) {};

    reverse_proxy = reverse_proxy_0_1_0;

    revision_plate_ex_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "revision_plate_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "revision_plate_ex";
              version = "0.1.0";
              sha256 =
                "6c88a514ae5b36999fd52c01cc3ea746f8ba9c7900b47f4758a65c197b8aed71";
            };
            beamDeps  = [ plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              longDescription = ''Plug application and middleware that serves
                                endpoint returns application`s REVISION'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/revision_plate_ex";
            };
          }
      ) {};

    revision_plate_ex = revision_plate_ex_0_1_0;

    rfc3339_0_2_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "rfc3339";
            version = "0.2.0";
            src = fetchHex {
              pkg = "rfc3339";
              version = "0.2.0";
              sha256 =
                "992ebf382d6982f2fff48928394d4d50d413b7a4abe576ba518b92c82ac2eb99";
            };

            meta = {
              description = ''an rfc3339 parser and formatter'';
              license = with stdenv.lib.licenses; [ asl20 mit ];
              homepage = "https://github.com/talentdeficit/rfc3339";
            };
          }
      ) {};

    rfc3339 = rfc3339_0_2_0;

    riak_1_0_0 = callPackage
      (
        {
          buildMix, fetchHex, riakc_2_1_1, pooler_1_5_0, linguist_0_1_5
        }:
          buildMix {
            name = "riak";
            version = "1.0.0";
            src = fetchHex {
              pkg = "riak";
              version = "1.0.0";
              sha256 =
                "4171c6e40aba67f8464c807bd70c68e8bf63c9cecf3d28dde88ef1e8f5a21930";
            };
            beamDeps  = [ riakc_2_1_1 pooler_1_5_0 linguist_0_1_5 ];

            meta = {
              description = ''A Riak client written in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/drewkerrigan/riak-elixir-client";
            };
          }
      ) {};

    riak = riak_1_0_0;

    riak_dt_2_1_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "riak_dt";
            version = "2.1.1";
            src = fetchHex {
              pkg = "riak_dt";
              version = "2.1.1";
              sha256 =
                "b5ab9e1d579ec3129cbea4b1977261aa2c5ad634321f87ace83bb32b99f65396";
            };

            meta = {
              description = ''riak CTDT datatypes'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/basho/riak_dt";
            };
          }
      ) {};

    riak_dt = riak_dt_2_1_1;

    riak_ensemble_2_1_3 = callPackage
      (
        {  buildRebar3, fetchHex, lager_3_0_2, eleveldb_2_1_3 }:
          buildRebar3 {
            name = "riak_ensemble";
            version = "2.1.3";
            src = fetchHex {
              pkg = "riak_ensemble";
              version = "2.1.3";
              sha256 =
                "593c68745ce3117c2e0beaa57e36ad2971bd3540645f233df866a19468970ae2";
            };

            beamDeps  = [ lager_3_0_2 eleveldb_2_1_3 ];

            meta = {
              description = ''Multi-Paxos framework in Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/riak_ensemble";
            };
          }
      ) {};

    riak_ensemble = riak_ensemble_2_1_3;

    riak_pb_2_1_0 = callPackage
      (
        {  buildRebar3, fetchHex, protobuffs_0_8_2, hamcrest_0_1_1 }:
          buildRebar3 {
            name = "riak_pb";
            version = "2.1.0";
            src = fetchHex {
              pkg = "riak_pb";
              version = "2.1.0";
              sha256 =
                "76309b9b831d276bf9abf92362183030ed63910a2e153f1f8a389e97dec6c287";
            };

            beamDeps  = [ protobuffs_0_8_2 hamcrest_0_1_1 ];

            meta = {
              description = ''Riak Protocol Buffers Messages'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/riak_pb";
            };
          }
      ) {};

    riak_pb = riak_pb_2_1_0;

    riak_sysmon_2_1_2 = callPackage
      (
        {  buildRebar3, fetchHex, lager_3_0_2 }:
          buildRebar3 {
            name = "riak_sysmon";
            version = "2.1.2";
            src = fetchHex {
              pkg = "riak_sysmon";
              version = "2.1.2";
              sha256 =
                "a467f7a24fbdeac5b23baf0269758236458fabf8b498e9c551e61c5238e6f97c";
            };

            beamDeps  = [ lager_3_0_2 ];

            meta = {
              description = ''Rate-limiting system_monitor event handler'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/basho/riak_sysmon";
            };
          }
      ) {};

    riak_sysmon = riak_sysmon_2_1_2;

    riakc_2_1_1 = callPackage
      (
        {  buildRebar3, fetchHex, riak_pb_2_1_0 }:
          buildRebar3 {
            name = "riakc";
            version = "2.1.1";
            src = fetchHex {
              pkg = "riakc";
              version = "2.1.1";
              sha256 =
                "4f7141c03529d4f1c28c71eafcd797be0a538ba21d5d6923a17a9ca9e64e744e";
            };

            beamDeps  = [ riak_pb_2_1_0 ];

            meta = {
              description = ''Erlang clients for Riak.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/riak-erlang-client";
            };
          }
      ) {};

    riakc = riakc_2_1_1;

    riboflavin_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "riboflavin";
            version = "0.0.2";
            src = fetchHex {
              pkg = "riboflavin";
              version = "0.0.2";
              sha256 =
                "cc4ac4c80b6d591deaea136a3d055eba4ead6bbe2fc9b220a4432f160d0ddec6";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Backblaze B2 client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/silentdragonz/riboflavin";
            };
          }
      ) {};

    riboflavin = riboflavin_0_0_2;

    riemann_0_0_14 = callPackage
      (
        {  buildMix, fetchHex, honeydew_0_0_8, exprotobuf_0_13_0 }:
          buildMix {
            name = "riemann";
            version = "0.0.14";
            src = fetchHex {
              pkg = "riemann";
              version = "0.0.14";
              sha256 =
                "05656878f8aee98f1baa601ca762338014cf2440d1fb043f682669241314a2d5";
            };
            beamDeps  = [ honeydew_0_0_8 exprotobuf_0_13_0 ];

            meta = {
              description = ''A client for the Riemann event stream
                            processor'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/koudelka/elixir-riemann";
            };
          }
      ) {};

    riemann = riemann_0_0_14;

    robotex_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, exjsx_3_1_0 }:
          buildMix {
            name = "robotex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "robotex";
              version = "0.0.1";
              sha256 =
                "ae1c618b20e3847f4c372350bdda3b0dc577e1491310ef97fd5869c4f750533e";
            };
            beamDeps  = [ httpoison_0_8_1 exjsx_3_1_0 ];

            meta = {
              description = ''Robotex is a client for the Telegram Bot API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/EddyShure/robotex";
            };
          }
      ) {};

    robotex = robotex_0_0_1;

    rogger_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex, timex_0_13_5, amqp_0_1_1 }:
          buildRebar3 {
            name = "rogger";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rogger";
              version = "0.1.0";
              sha256 =
                "2e68650f9ee8f1047410538163e930567c049d91f883cbc96d9f52aea6052b61";
            };

            beamDeps  = [ timex_0_13_5 amqp_0_1_1 ];

            meta = {
              description = ''Elixir logger to publish log messages in
                            RabbitMQ. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/duartejc/rogger";
            };
          }
      ) {};

    rogger = rogger_0_1_0;

    rollbax_0_5_3 = callPackage
      (
        {  buildMix, fetchHex, poison_1_0_3, hackney_1_4_8 }:
          buildMix {
            name = "rollbax";
            version = "0.5.3";
            src = fetchHex {
              pkg = "rollbax";
              version = "0.5.3";
              sha256 =
                "0f24d041c932043915a14ab4e186bd3f1613bccee30ad251bb79a60533680336";
            };
            beamDeps  = [ poison_1_0_3 hackney_1_4_8 ];

            meta = {
              description = ''Exception tracking and logging from Elixir to
                            Rollbar'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/elixir-addicts/rollbax";
            };
          }
      ) {};

    rollbax = rollbax_0_5_3;

    rollex_0_4_0 = callPackage
      (
        {  buildMix, fetchHex, sfmt_0_12_2 }:
          buildMix {
            name = "rollex";
            version = "0.4.0";
            src = fetchHex {
              pkg = "rollex";
              version = "0.4.0";
              sha256 =
                "53410bbd7687ff751b51b9737965bff1ba9c3d0673af65752f4ae3be0de1b44c";
            };
            beamDeps  = [ sfmt_0_12_2 ];

            meta = {
              description = ''Elixir library using a Pratt Parser algorithm to
                            calculate dice rolls.'';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    rollex = rollex_0_4_0;

    roman_numerals_1_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "roman_numerals";
            version = "1.0.1";
            src = fetchHex {
              pkg = "roman_numerals";
              version = "1.0.1";
              sha256 =
                "5e9dcfcb645c1ca937ddc0170805028596fbf4936d0119131350d7de95b7c6a1";
            };

            meta = {
              description = ''Convert numbers to Roman numerals and back.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/roman-numerals";
            };
          }
      ) {};

    roman_numerals = roman_numerals_1_0_1;

    romanex_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "romanex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "romanex";
              version = "0.1.0";
              sha256 =
                "b1f769bbf638d14247c70be8b944cfa76a84a00ef690e9cba26032ae03e33a89";
            };

            meta = {
              description = ''Encode, Decode, and Validate Roman Numerals.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/itsgreggreg/romanex";
            };
          }
      ) {};

    romanex = romanex_0_1_0;

    romeo_0_4_0 = callPackage
      (
        {  buildMix, fetchHex, connection_1_0_2 }:
          buildMix {
            name = "romeo";
            version = "0.4.0";
            src = fetchHex {
              pkg = "romeo";
              version = "0.4.0";
              sha256 =
                "38f1fe4ddeab5865de68dff196cf18b86d7ba3b8bb49c2753f1d04b145f248d4";
            };
            beamDeps  = [ connection_1_0_2 ];

            meta = {
              description = ''An XMPP Client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/romeo";
            };
          }
      ) {};

    romeo = romeo_0_4_0;

    roombex_0_0_4 = callPackage
      (
        {  buildMix, fetchHex, serial_0_1_2 }:
          buildMix {
            name = "roombex";
            version = "0.0.4";
            src = fetchHex {
              pkg = "roombex";
              version = "0.0.4";
              sha256 =
                "93ff6124016e14e2ecdf90628b638f80eb97cc0b21f2c50288585d33fc5d3d54";
            };
            beamDeps  = [ serial_0_1_2 ];

            meta = {
              longDescription = ''Implements the Roomba binary protocol. Send
                                and receive binary data using elixir data
                                structures and simple functions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mmmries/roombex";
            };
          }
      ) {};

    roombex = roombex_0_0_4;

    rop_0_5_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "rop";
            version = "0.5.3";
            src = fetchHex {
              pkg = "rop";
              version = "0.5.3";
              sha256 =
                "3b8c37802c530eecc7714c175fe36486bb45157519cc7498ac487f6590f396e8";
            };

            meta = {
              description = ''Some convenient macros to enable
                            railsway-oriented programming in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruby2elixir/rop";
            };
          }
      ) {};

    rop = rop_0_5_3;

    rotor_0_2_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "rotor";
            version = "0.2.2";
            src = fetchHex {
              pkg = "rotor";
              version = "0.2.2";
              sha256 =
                "82de479c2cb6d26299916209d2945d1b39cf820f38279485ea5d5a8c494cb281";
            };

            meta = {
              longDescription = ''Rotor is a build system for Elixir projects.
                                Use it to compile things, run commands or do
                                anything when files change. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/HashNuke/rotor";
            };
          }
      ) {};

    rotor = rotor_0_2_2;

    rquote_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "rquote";
            version = "0.0.1";
            src = fetchHex {
              pkg = "rquote";
              version = "0.0.1";
              sha256 =
                "54e1cba92716a4176d89e20d841dbc3a1227ef2fd9f7ddc5711a900877912354";
            };

            meta = {
              description = ''Library and CLI for generating random price
                            quotes '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stocks29/rquote";
            };
          }
      ) {};

    rquote = rquote_0_0_1;

    rsa_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "rsa";
            version = "0.0.1";
            src = fetchHex {
              pkg = "rsa";
              version = "0.0.1";
              sha256 =
                "6351a45a5a58285c41d611ec32b37ee486d7dacd119d7ef90ada844c44e95596";
            };

            meta = {
              description = ''Erlang public_key cryptography wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/trapped/elixir-rsa";
            };
          }
      ) {};

    rsa = rsa_0_0_1;

    rss_0_2_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "rss";
            version = "0.2.1";
            src = fetchHex {
              pkg = "rss";
              version = "0.2.1";
              sha256 =
                "1af49c787fc789740a0fa7e0e197a7cb779a63c4eb703f013fea400126eac1f2";
            };

            meta = {
              description = ''A super simple RSS feed builder '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bennyhallett/elixir-rss";
            };
          }
      ) {};

    rss = rss_0_2_1;

    rubix_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "rubix";
            version = "0.0.2";
            src = fetchHex {
              pkg = "rubix";
              version = "0.0.2";
              sha256 =
                "b9083f7c8981fc162bfda5c8aa9855f79298905eb8e3b4a4089134614b2a8199";
            };

            meta = {
              description = ''A very simple (and barely-functioning) Ruby
                            runner for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/YellowApple/Rubix";
            };
          }
      ) {};

    rubix = rubix_0_0_2;

    rulex_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "rulex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "rulex";
              version = "0.2.0";
              sha256 =
                "41429f27164bb05f2fa4c6326b63a8773f61c89ef9ef0bd93937cbc473d03ab5";
            };

            meta = {
              longDescription = ''Rulex contains a very simple macro "defrule"
                                allowing you to write a rule system using Elixir
                                pattern matching. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/rulex";
            };
          }
      ) {};

    rulex = rulex_0_2_0;

    russian_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "russian";
            version = "0.1.0";
            src = fetchHex {
              pkg = "russian";
              version = "0.1.0";
              sha256 =
                "ebacf93bb9f653f749f787d65629ed2bd830dec295fb785f44738c120e9fde9a";
            };

            meta = {
              description = ''Transliterate a string with russian characters'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Kr00lIX/russian_elixir";
            };
          }
      ) {};

    russian = russian_0_1_0;

    safetybox_0_1_2 = callPackage
      (
        {  buildMix, fetchHex, earmark_0_2_1, cryptex_0_0_1 }:
          buildMix {
            name = "safetybox";
            version = "0.1.2";
            src = fetchHex {
              pkg = "safetybox";
              version = "0.1.2";
              sha256 =
                "7785f6f8f53082af331a3dd44d9a1dd759d7c7981f3b6924482c81370b8cc706";
            };
            beamDeps  = [ earmark_0_2_1 cryptex_0_0_1 ];

            meta = {
              description = ''A set of helper functions for security oriented
                            operations, like encrypt. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aforward/safetybox";
            };
          }
      ) {};

    safetybox = safetybox_0_1_2;

    saltie_0_3_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "saltie";
            version = "0.3.2";
            src = fetchHex {
              pkg = "saltie";
              version = "0.3.2";
              sha256 =
                "6d1eb4b3d0f3a494990a28af3a5e6f79221f230ed7b24063cdfa2ea34c8794f2";
            };

            meta = {
              description = ''**DEPRECATED**. See hex.pm/packages/hashids'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alco/saltie";
            };
          }
      ) {};

    saltie = saltie_0_3_2;

    sap_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, control_0_0_4 }:
          buildMix {
            name = "sap";
            version = "0.0.2";
            src = fetchHex {
              pkg = "sap";
              version = "0.0.2";
              sha256 =
                "63f2db3cbbb753eac51177783463fb364dd560745bf5e4e8ba10a237e557903c";
            };
            beamDeps  = [ plug_1_1_1 control_0_0_4 ];

            meta = {
              longDescription = ''Sap is a toolkit for Plug applications to
                                accept and respond to HTTP requests by using a
                                decision tree built with combinators.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/sap";
            };
          }
      ) {};

    sap = sap_0_0_2;

    sasl_ex_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "sasl_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "sasl_ex";
              version = "0.1.0";
              sha256 =
                "ce7f244817f6264738d5432d9b734921b9fdfe4ca2351a890ed678eb6fbaad3e";
            };

            meta = {
              longDescription = ''A lib for decoding bytes in the format of the
                                SASL protocol into an Elixir struct.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elbow-jason/sasl_ex";
            };
          }
      ) {};

    sasl_ex = sasl_ex_0_1_0;

    sass_elixir_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "sass_elixir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "sass_elixir";
              version = "0.0.1";
              sha256 =
                "565dc1c40057a9a7ae3a3c27151a8dd87a3d672d346fcc5b4829152d22c4a511";
            };

            meta = {
              description = ''A SASS plugin for elixir projects'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zamith/sass_elixir";
            };
          }
      ) {};

    sass_elixir = sass_elixir_0_0_1;

    savory_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "savory";
            version = "0.0.2";
            src = fetchHex {
              pkg = "savory";
              version = "0.0.2";
              sha256 =
                "a45ef32a6f45092e1328bc1eb47bda3c8f992afe863aaa73c455f31b0c8591b9";
            };

            meta = {
              longDescription = ''An Elixir implementation of Freza`s salt_nif
                                which interfaces with libsodium, a wrapper for
                                the cryptographic primitive libary NaCl. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/electricFeel/savory";
            };
          }
      ) {};

    savory = savory_0_0_2;

    sbroker_0_7_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "sbroker";
            version = "0.7.0";
            src = fetchHex {
              pkg = "sbroker";
              version = "0.7.0";
              sha256 =
                "5bc0bfd79896fd5b92072a71fa4a1e120f4110f2cf9562a0b9dd2fcfe9e5cfd2";
            };

            meta = {
              description = ''Process broker for dispatching with backpressure
                            and load shedding'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/sbroker";
            };
          }
      ) {};

    sbroker = sbroker_0_7_0;

    scaffold_0_0_5 = callPackage
      (
        {  buildMix, fetchHex, gitex_0_1_0, configparser_ex_0_2_0 }:
          buildMix {
            name = "scaffold";
            version = "0.0.5";
            src = fetchHex {
              pkg = "scaffold";
              version = "0.0.5";
              sha256 =
                "fad499b712a576bc9d0f4842494baf9ec8d4c388f99c14f74654b1dbd158945c";
            };
            beamDeps  = [ gitex_0_1_0 configparser_ex_0_2_0 ];

            meta = {
              description = ''A mix task for creating new projects based on
                            templates fetched from a Git-repo.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gausby/scaffold";
            };
          }
      ) {};

    scaffold = scaffold_0_0_5;

    schedule_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "schedule";
            version = "0.1.0";
            src = fetchHex {
              pkg = "schedule";
              version = "0.1.0";
              sha256 =
                "0b9b9440fe5e6d4a0cad34a170d3ec3251e06c42610f1c4106d93949b845db73";
            };

            meta = {
              description = ''Basic operations with intervals for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/dvele55/schedule";
            };
          }
      ) {};

    schedule = schedule_0_1_0;

    schizo_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "schizo";
            version = "0.0.1";
            src = fetchHex {
              pkg = "schizo";
              version = "0.0.1";
              sha256 =
                "278d738fe6d3d1455dd24e0450a95f4191b8ce63b7059a1b74e7bad86c47746d";
            };

            meta = {
              description = ''Transform every other word in a sentence with
                            some transformers.'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/teerawat1992/Schizo";
            };
          }
      ) {};

    schizo = schizo_0_0_1;

    scrape_1_0_4 = callPackage
      (
        {
          buildMix,
          fetchHex,
          timex_1_0_0_rc4,
          parallel_0_0_3,
          httpoison_0_8_1,
          floki_0_7_1,
          codepagex_0_1_2
        }:
          buildMix {
            name = "scrape";
            version = "1.0.4";
            src = fetchHex {
              pkg = "scrape";
              version = "1.0.4";
              sha256 =
                "ff26574b5ab5a6cf1f9aaa1369c2b9880bce2cf53b261a65160fdf9b4e11a361";
            };
            beamDeps  = [
                          timex_1_0_0_rc4
                          parallel_0_0_3
                          httpoison_0_8_1
                          floki_0_7_1
                          codepagex_0_1_2
                        ];

            meta = {
              description = ''Scrape any website, article or RSS/Atom feed with
                            ease!'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Anonyfox/elixir-scrape";
            };
          }
      ) {};

    scrape = scrape_1_0_4;

    scrivener_1_1_2 = callPackage
      (
        {  buildMix, fetchHex, postgrex_0_11_1, ecto_2_0_0_beta_0 }:
          buildMix {
            name = "scrivener";
            version = "1.1.2";
            src = fetchHex {
              pkg = "scrivener";
              version = "1.1.2";
              sha256 =
                "9be46bdce0d8179ece431226eb9eddbe13bc158d647a3daee64a49bc26ca9dcf";
            };
            beamDeps  = [ postgrex_0_11_1 ecto_2_0_0_beta_0 ];

            meta = {
              description = ''Paginate your Ecto queries'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/drewolson/scrivener";
            };
          }
      ) {};

    scrivener = scrivener_1_1_2;

    scrivener_html_1_0_8 = callPackage
      (
        {
          buildMix,
          fetchHex,
          scrivener_1_1_2,
          phoenix_html_2_5_0,
          phoenix_1_1_4
        }:
          buildMix {
            name = "scrivener_html";
            version = "1.0.8";
            src = fetchHex {
              pkg = "scrivener_html";
              version = "1.0.8";
              sha256 =
                "1bea661f9940acae0ef28949c35e61dd1d314d0ac93c333ed85c7a37593a6406";
            };
            beamDeps  = [ scrivener_1_1_2 phoenix_html_2_5_0 phoenix_1_1_4 ];

            meta = {
              description = ''HTML helpers for Scrivener'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mgwidmann/scrivener_html";
            };
          }
      ) {};

    scrivener_html = scrivener_html_1_0_8;

    secure_headers_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, pipe_0_0_2 }:
          buildMix {
            name = "secure_headers";
            version = "0.0.1";
            src = fetchHex {
              pkg = "secure_headers";
              version = "0.0.1";
              sha256 =
                "df5ffa08c91a270da9a167edac6181c87a8467e7c98d65651bd6b1c928e75cb1";
            };
            beamDeps  = [ plug_1_1_1 pipe_0_0_2 ];

            meta = {
              description = ''HTTP Security Headers for Phoenix or Plug'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/anotherhale/secure_headers";
            };
          }
      ) {};

    secure_headers = secure_headers_0_0_1;

    secure_password_0_3_1 = callPackage
      (
        {  buildMix, fetchHex, ecto_2_0_0_beta_0, comeonin_2_1_1 }:
          buildMix {
            name = "secure_password";
            version = "0.3.1";
            src = fetchHex {
              pkg = "secure_password";
              version = "0.3.1";
              sha256 =
                "04d91c55486177940d480e802f28f8ee4b5ac6590ed1e0a3ab16603d39c35673";
            };
            beamDeps  = [ ecto_2_0_0_beta_0 comeonin_2_1_1 ];

            meta = {
              description = ''A port of Rails has_secure_password for Ecto
                            models'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tuvistavie/ecto-secure-password";
            };
          }
      ) {};

    secure_password = secure_password_0_3_1;

    secure_random_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "secure_random";
            version = "0.1.1";
            src = fetchHex {
              pkg = "secure_random";
              version = "0.1.1";
              sha256 =
                "55fa172d9f606bbf43a775f5b34b0866c8bbf242acf7e1ff1eafec2c07fdcc53";
            };

            meta = {
              description = ''A convienance library based on Ruy`s
                            SecureRandom'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/patricksrobertson/secure_random.ex";
            };
          }
      ) {};

    secure_random_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "secure_random";
            version = "0.2.0";
            src = fetchHex {
              pkg = "secure_random";
              version = "0.2.0";
              sha256 =
                "d17b17f5b25e38359838ae61165d18724084796fcbdf3c18f09ee5876892c5a0";
            };

            meta = {
              description = ''A convienance library based on Ruy`s
                            SecureRandom'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/patricksrobertson/secure_random.ex";
            };
          }
      ) {};

    secure_random = secure_random_0_2_0;

    segment_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_3_1, httpotion_2_1_0 }:
          buildMix {
            name = "segment";
            version = "0.1.0";
            src = fetchHex {
              pkg = "segment";
              version = "0.1.0";
              sha256 =
                "1747bf7a3f8d524d28890ce4499ef30a635f91c826d62e2b95711061faf02423";
            };
            beamDeps  = [ poison_1_3_1 httpotion_2_1_0 ];

            meta = {
              description = ''analytics_elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stueccles/analytics-elixir";
            };
          }
      ) {};

    segment = segment_0_1_0;

    select_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, mochiweb_2_12_2 }:
          buildMix {
            name = "select";
            version = "0.0.1";
            src = fetchHex {
              pkg = "select";
              version = "0.0.1";
              sha256 =
                "9f579c2f342b51f6e42d414110a889c8b6a4430e49697b724ccdbbf8265853e9";
            };
            beamDeps  = [ mochiweb_2_12_2 ];

            meta = {
              longDescription = ''An Elixir library to extract useful data from
                                HTML documents, suitable for web scraping.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/utkarshkukreti/select.ex";
            };
          }
      ) {};

    select = select_0_0_1;

    semver_0_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "semver";
            version = "0.1.2";
            src = fetchHex {
              pkg = "semver";
              version = "0.1.2";
              sha256 =
                "6e8150b94b1d5cbe3c31986a46cdc57c9af6f71f3747900280b2da7c0466a993";
            };

            meta = {
              description = ''Utilities for working with semver.org-compliant
                            version strings'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lee-dohm/semver";
            };
          }
      ) {};

    semver = semver_0_1_2;

    sentient_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2 }:
          buildMix {
            name = "sentient";
            version = "0.0.2";
            src = fetchHex {
              pkg = "sentient";
              version = "0.0.2";
              sha256 =
                "fb752b01c2eb4a729cbe8b8301acca5bcb75a242f12819b6a56f3be3c877c3ec";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''Simple sentiment analysis based on the AFINN-111
                            wordlist'';

            };
          }
      ) {};

    sentient = sentient_0_0_2;

    sentinel_0_0_4 = callPackage
      (
        {
          buildMix,
          fetchHex,
          ueberauth_0_2_0,
          secure_random_0_2_0,
          postgrex_0_11_1,
          phoenix_1_1_4,
          jose_1_6_1,
          guardian_db_0_4_0,
          guardian_0_9_1,
          ex_doc_0_11_4,
          ecto_2_0_0_beta_0,
          earmark_0_2_1,
          cowboy_1_0_4,
          comeonin_2_1_1
        }:
          buildMix {
            name = "sentinel";
            version = "0.0.4";
            src = fetchHex {
              pkg = "sentinel";
              version = "0.0.4";
              sha256 =
                "a97e13dd2c629eea7f5b6f2b818869e6f206a320eb3bfcfc9b315aa08cbeeac4";
            };
            beamDeps  = [
                          ueberauth_0_2_0
                          secure_random_0_2_0
                          postgrex_0_11_1
                          phoenix_1_1_4
                          jose_1_6_1
                          guardian_db_0_4_0
                          guardian_0_9_1
                          ex_doc_0_11_4
                          ecto_2_0_0_beta_0
                          earmark_0_2_1
                          cowboy_1_0_4
                          comeonin_2_1_1
                        ];

            meta = {
              longDescription = ''Adds helpful extras to Guardian like default
                                mailer support, as well as out of the box
                                controllers and routes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/britton-jb/sentinel";
            };
          }
      ) {};

    sentinel = sentinel_0_0_4;

    sentry_0_3_2 = callPackage
      (
        {  buildMix, fetchHex, ecto_2_0_0_beta_0, comeonin_1_6_0 }:
          buildMix {
            name = "sentry";
            version = "0.3.2";
            src = fetchHex {
              pkg = "sentry";
              version = "0.3.2";
              sha256 =
                "fd4aa8c6b5d51b85e452a01292fbd437dfbfc5d37515c13f4a9a94441dc89609";
            };
            beamDeps  = [ ecto_2_0_0_beta_0 comeonin_1_6_0 ];

            meta = {
              description = ''Simplified authentication and authorization
                            package for Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/imranismail/sentry";
            };
          }
      ) {};

    sentry = sentry_0_3_2;

    serial_0_1_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "serial";
            version = "0.1.2";
            src = fetchHex {
              pkg = "serial";
              version = "0.1.2";
              sha256 =
                "c0aed287f565b7ce1e1091a6a3dd08fd99bf0884c81b53ecf978c502ef652231";
            };

            meta = {
              description = ''Serial communication through Elixir ports'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/bitgamma/elixir_serial";
            };
          }
      ) {};

    serial = serial_0_1_2;

    service_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, cloudi_core_1_5_1 }:
          buildRebar3 {
            name = "service";
            version = "1.5.1";
            src = fetchHex {
              pkg = "service";
              version = "1.5.1";
              sha256 =
                "283d29bee5e2170a08c1eccb87f89368e9ce831cc52fb0715ed811f43847d2f8";
            };

            beamDeps  = [ cloudi_core_1_5_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Service Behavior'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          }
      ) {};

    service = service_1_5_1;

    setup_1_7_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "setup";
            version = "1.7.0";
            src = fetchHex {
              pkg = "setup";
              version = "1.7.0";
              sha256 =
                "50d9cd7862d15812d2fd96a688bd70d6b7df88bbbf42cab9f010bb0fd5c91baa";
            };

            meta = {
              description = ''Generic setup application for Erlang-based
                            systems'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/uwiger/setup";
            };
          }
      ) {};

    setup = setup_1_7_0;

    sfmt_0_12_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "sfmt";
            version = "0.12.2";
            src = fetchHex {
              pkg = "sfmt";
              version = "0.12.2";
              sha256 =
                "8c541998bedb7d6bfe699ba6ee319f563190ead5a01f30c02ff504c20f4e8e2a";
            };
            compilePorts = true;

            meta = {
              description = ''SIMD-oriented Fast Mersenne Twister (SFMT) for
                            Erlang.'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/jj1bdx/sfmt-erlang/";
            };
          }
      ) {};

    sfmt_0_13_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "sfmt";
            version = "0.13.0";
            src = fetchHex {
              pkg = "sfmt";
              version = "0.13.0";
              sha256 =
                "aaacd4824f2b3e439d360bcce6079863da1e7f564014602e9e7815f8740b6358";
            };
            compilePorts = true;

            meta = {
              description = ''SIMD-oriented Fast Mersenne Twister (SFMT) for
                            Erlang.'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/jj1bdx/sfmt-erlang/";
            };
          }
      ) {};

    sfmt = sfmt_0_13_0;

    sfsobject_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "sfsobject";
            version = "0.0.3";
            src = fetchHex {
              pkg = "sfsobject";
              version = "0.0.3";
              sha256 =
                "fa30bf41d426d7dc899bd038ca44daf32c93e55452cfd0dc141eb6ded6d85f3c";
            };

            meta = {
              description = ''Encode/decode SFSObjects'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/splattael/sfsobject";
            };
          }
      ) {};

    sfsobject = sfsobject_0_0_3;

    sh_1_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "sh";
            version = "1.1.2";
            src = fetchHex {
              pkg = "sh";
              version = "1.1.2";
              sha256 =
                "78ec787a58d546ae915073978e9ad21a7b3e6187fb5b9c93922e6435542ae4c5";
            };

            meta = {
              description = ''Run programs as functions in Elixir'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/devinus/sh";
            };
          }
      ) {};

    sh = sh_1_1_2;

    shameless_plug_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "shameless_plug";
            version = "1.0.0";
            src = fetchHex {
              pkg = "shameless_plug";
              version = "1.0.0";
              sha256 =
                "65c8af34d1853e85c8412d6ca15fd39354668c09c124cbc8e35cffea59d3a617";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              description = ''A novelty Plug to remove the word "shame" from
                            the page body.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/henrik/shameless_plug";
            };
          }
      ) {};

    shameless_plug = shameless_plug_1_0_0;

    shape_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "shape";
            version = "0.0.2";
            src = fetchHex {
              pkg = "shape";
              version = "0.0.2";
              sha256 =
                "c2e990b68f3423110109bf7e6bbebe8c10307bb28778ebcf9f7d6e0b8dc854f2";
            };

            meta = {
              description = ''A data validation library for Elixir based on
                            Prismatoc Scheme'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/prio/shape";
            };
          }
      ) {};

    shape = shape_0_0_2;

    short_maps_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "short_maps";
            version = "0.1.1";
            src = fetchHex {
              pkg = "short_maps";
              version = "0.1.1";
              sha256 =
                "852170b9be988f51b7b8a920097238ab0847433c417a4bc3bea6cef3b013b2b8";
            };

            meta = {
              description = ''Implementation of a ~m sigil for ES6-like maps in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/short_maps";
            };
          }
      ) {};

    short_maps = short_maps_0_1_1;

    shotgun_0_2_2 = callPackage
      (
        {  buildRebar3, fetchHex, gun_1_0_0_pre_1 }:
          buildRebar3 {
            name = "shotgun";
            version = "0.2.2";
            src = fetchHex {
              pkg = "shotgun";
              version = "0.2.2";
              sha256 =
                "d2993953cff0c82eb47744206ae171a141deeff84539fe2f58068e3909ae066c";
            };

            beamDeps  = [ gun_1_0_0_pre_1 ];

            meta = {
              description = ''better than just a gun'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/shotgun";
            };
          }
      ) {};

    shotgun_0_2_3 = callPackage
      (
        {  buildRebar3, fetchHex, gun_1_0_0_pre_1, cowlib_1_0_2 }:
          buildRebar3 {
            name = "shotgun";
            version = "0.2.3";
            src = fetchHex {
              pkg = "shotgun";
              version = "0.2.3";
              sha256 =
                "7b40dcf0faebf698fea541db5f6338f555d0c9c828493e9953d1748d9e5280b5";
            };

            beamDeps  = [ gun_1_0_0_pre_1 cowlib_1_0_2 ];

            meta = {
              description = ''better than just a gun'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/shotgun";
            };
          }
      ) {};

    shotgun = shotgun_0_2_3;

    shouldi_0_3_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "shouldi";
            version = "0.3.0";
            src = fetchHex {
              pkg = "shouldi";
              version = "0.3.0";
              sha256 =
                "1cc3706e7a7ce4e37f9893b3b49f1dc586f861ffd194f8170f118eaa324017d7";
            };

            meta = {
              description = ''Elixir testing libraries with support for nested
                            contexts'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/batate/shouldi";
            };
          }
      ) {};

    shouldi = shouldi_0_3_0;

    shove_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poolboy_1_5_1, poison_1_5_2 }:
          buildMix {
            name = "shove";
            version = "0.0.1";
            src = fetchHex {
              pkg = "shove";
              version = "0.0.1";
              sha256 =
                "48c7db56f6df92c8cd50ff5cfc73ce12d843e257991af6c3d4762f8af50bd87f";
            };
            beamDeps  = [ poolboy_1_5_1 poison_1_5_2 ];

            meta = {
              description = ''Push notifications for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bratsche/shove";
            };
          }
      ) {};

    shove = shove_0_0_1;

    shrivel_0_0_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "shrivel";
            version = "0.0.3";
            src = fetchHex {
              pkg = "shrivel";
              version = "0.0.3";
              sha256 =
                "c2a4874eed97044fe2bfa5e871f188a191b4042e72a6156cfd50c7c0d8296dbf";
            };

            meta = {
              description = ''URL shortener'';

              homepage = "https://github.com/Qeaql/shrivel";
            };
          }
      ) {};

    shrivel = shrivel_0_0_3;

    sidejob_2_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "sidejob";
            version = "2.0.0";
            src = fetchHex {
              pkg = "sidejob";
              version = "2.0.0";
              sha256 =
                "19fea24060a1d0d37e78480fbd79d6b95e07f445aad725f7124a23194641c743";
            };

            meta = {
              longDescription = ''sidejob is an Erlang library that implements
                                a parallel, capacity-limited request pool. In
                                sidejob, these pools are called resources. A
                                resource is managed by multiple gen_server like
                                processes which can be sent calls and casts
                                using sidejob:call or sidejob:cast respectively.
                                This library was originally written to support
                                process bounding in Riak using the
                                sidejob_supervisor behavior. In Riak, this is
                                used to limit the number of concurrent get/put
                                FSMs that can be active, failing client requests
                                with {error, overload} if the limit is ever hit.
                                The purpose being to provide a fail-safe
                                mechanism during extreme overload scenarios. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/sidejob";
            };
          }
      ) {};

    sidejob = sidejob_2_0_0;

    sidetask_1_1_0 = callPackage
      (
        {  buildMix, fetchHex, sidejob_2_0_0 }:
          buildMix {
            name = "sidetask";
            version = "1.1.0";
            src = fetchHex {
              pkg = "sidetask";
              version = "1.1.0";
              sha256 =
                "acf9f1620c003a13942cf607e360cfbfe57a3b5dcef1471653f4168891446d54";
            };
            beamDeps  = [ sidejob_2_0_0 ];

            meta = {
              longDescription = ''SideTask is an alternative to Elixir`s
                                Task.Supervisor that uses Basho`s sidejob
                                library for better parallelism and to support
                                capacity limiting of Tasks. SideTask provides an
                                API similar to Task.Supervisor, with the
                                addition that all calls that start a new task
                                require a sidejob resource as argument and can
                                return `{:error, :overload}`. Convenience
                                functions for adding and deleting sidejob
                                resources are provided.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/MSch/sidetask";
            };
          }
      ) {};

    sidetask = sidetask_1_1_0;

    signaturex_0_0_8 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "signaturex";
            version = "0.0.8";
            src = fetchHex {
              pkg = "signaturex";
              version = "0.0.8";
              sha256 =
                "5897373a265e41245a251d828e4782457f129d5c49179a29079ff86139beeb0e";
            };

            meta = {
              description = ''Simple key/secret based authentication for
                            APIs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/signaturex";
            };
          }
      ) {};

    signaturex_1_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "signaturex";
            version = "1.0.1";
            src = fetchHex {
              pkg = "signaturex";
              version = "1.0.1";
              sha256 =
                "a8cb1b527026288dcb8d72a351e784c00cbd6e08964109595f08d85f41f022cc";
            };

            meta = {
              description = ''Simple key/secret based authentication for
                            APIs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/signaturex";
            };
          }
      ) {};

    signaturex = signaturex_1_0_1;

    simetric_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "simetric";
            version = "0.1.0";
            src = fetchHex {
              pkg = "simetric";
              version = "0.1.0";
              sha256 =
                "5a69a4b65670a0af0dba7e775b56e6995f2e599771ea360e87e28fd5b7eab3a9";
            };

            meta = {
              longDescription = ''The library provides facilities to perform
                                approximate string matching and measurement of
                                string similarity/distance.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/simetric";
            };
          }
      ) {};

    simetric = simetric_0_1_0;

    simple_agent_0_0_7 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "simple_agent";
            version = "0.0.7";
            src = fetchHex {
              pkg = "simple_agent";
              version = "0.0.7";
              sha256 =
                "23532eed173ab8e1a980095c5a1352e41d9f2a149005ed21b9d4f67859603ffe";
            };

            meta = {
              description = ''A simplification/abstraction layer for the Agent
                            module.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/TheFirstAvenger/elixir-simple_agent.git";
            };
          }
      ) {};

    simple_agent = simple_agent_0_0_7;

    simple_bar_0_0_7 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "simple_bar";
            version = "0.0.7";
            src = fetchHex {
              pkg = "simple_bar";
              version = "0.0.7";
              sha256 =
                "68fca76dee6fb1073e613e3498121b6a50739a2786f35d826309c55f55735ae1";
            };

            meta = {
              description = ''The simplest cli progress bar'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffreybaird/simple_bar";
            };
          }
      ) {};

    simple_bar = simple_bar_0_0_7;

    simple_format_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, phoenix_html_2_5_0 }:
          buildMix {
            name = "simple_format";
            version = "0.1.0";
            src = fetchHex {
              pkg = "simple_format";
              version = "0.1.0";
              sha256 =
                "747cc74f743f89bcced219282f8639743f679b65183defecc7721f46e31dfcd0";
            };
            beamDeps  = [ phoenix_html_2_5_0 ];

            meta = {
              description = ''Rail`s simple_format helper for Phoenix.HTML'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/michalmuskala/simple_format";
            };
          }
      ) {};

    simple_format = simple_format_0_1_0;

    simple_secrets_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, pkcs7_1_0_2, msgpax_0_8_2 }:
          buildMix {
            name = "simple_secrets";
            version = "1.0.0";
            src = fetchHex {
              pkg = "simple_secrets";
              version = "1.0.0";
              sha256 =
                "797c98d49250fb343ed9a98411db641a3e5ae3344433f0a46d22dfec98bce11f";
            };
            beamDeps  = [ pkcs7_1_0_2 msgpax_0_8_2 ];

            meta = {
              description = ''A simple, opinionated library for encrypting
                            small packets of data securely.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/simple_secrets_ex";
            };
          }
      ) {};

    simple_secrets = simple_secrets_1_0_0;

    simplex_0_4_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          timex_1_0_1,
          sweet_xml_0_6_1,
          poison_1_5_2,
          ibrowse_4_2_2,
          httpotion_2_2_0
        }:
          buildMix {
            name = "simplex";
            version = "0.4.0";
            src = fetchHex {
              pkg = "simplex";
              version = "0.4.0";
              sha256 =
                "43dfdc62aa2c4919464615b5acc4f03b028b3b9875fa72c128563e7d794ba2a2";
            };
            beamDeps  = [
                          timex_1_0_1
                          sweet_xml_0_6_1
                          poison_1_5_2
                          ibrowse_4_2_2
                          httpotion_2_2_0
                        ];

            meta = {
              description = ''An Elixir library for interacting with the Amazon
                            SimpleDB API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamkittelson/simplex";
            };
          }
      ) {};

    simplex = simplex_0_4_0;

    siphash_3_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "siphash";
            version = "3.0.0";
            src = fetchHex {
              pkg = "siphash";
              version = "3.0.0";
              sha256 =
                "91b8efc8f3e26713c1bb91a91c9b6a8f6a5f949986622b1d548e8fee1cde7347";
            };
            compilePorts = true;

            meta = {
              description = ''Elixir implementation of the SipHash hash
                            family'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/siphash-elixir";
            };
          }
      ) {};

    siphash = siphash_3_0_0;

    sips_downloader_0_2_2 = callPackage
      (
        {
          buildMix,
          fetchHex,
          httpoison_0_8_1,
          html_entities_0_3_0,
          floki_0_7_1
        }:
          buildMix {
            name = "sips_downloader";
            version = "0.2.2";
            src = fetchHex {
              pkg = "sips_downloader";
              version = "0.2.2";
              sha256 =
                "358d10e61f2d8b03e644194d09f1ca6c9c339bb9c80371eba21576571a857f94";
            };
            beamDeps  = [ httpoison_0_8_1 html_entities_0_3_0 floki_0_7_1 ];

            meta = {
              description = ''Automatically download new ElixirSips episodes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DavsX/SipsDownloader";
            };
          }
      ) {};

    sips_downloader = sips_downloader_0_2_2;

    skills_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "skills";
            version = "0.0.1";
            src = fetchHex {
              pkg = "skills";
              version = "0.0.1";
              sha256 =
                "3845188cae5b6f43a8a9488a57831be8259ca83131ac0a1adfd24fbe846eb30f";
            };

            meta = {
              description = ''A skill-based ranking algorithms library for
                            Elixir. Includes Elo and TrueSkill.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/folz/skills.ex";
            };
          }
      ) {};

    skills = skills_0_0_1;

    skroutz_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_2_1_0, httpoison_0_8_1 }:
          buildMix {
            name = "skroutz";
            version = "0.0.1";
            src = fetchHex {
              pkg = "skroutz";
              version = "0.0.1";
              sha256 =
                "08d6703c21e2371e68cae0c559d7a1ff119f767662e2f76a0f3a53551742721b";
            };
            beamDeps  = [ poison_2_1_0 httpoison_0_8_1 ];

            meta = {
              description = ''Elixir library for accessing the Skroutz API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/skroutz/skroutz.ex";
            };
          }
      ) {};

    skroutz = skroutz_0_0_1;

    slack_0_3_0 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_7_5, exjsx_3_1_0 }:
          buildMix {
            name = "slack";
            version = "0.3.0";
            src = fetchHex {
              pkg = "slack";
              version = "0.3.0";
              sha256 =
                "43983932db6460a915822e12a0d499df5380804184bae3c170f9f918670f5454";
            };
            beamDeps  = [ httpoison_0_7_5 exjsx_3_1_0 ];

            meta = {
              description = ''A Slack Real Time Messaging API client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/Elixir-Slack";
            };
          }
      ) {};

    slack_0_4_2 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, exjsx_3_1_0 }:
          buildMix {
            name = "slack";
            version = "0.4.2";
            src = fetchHex {
              pkg = "slack";
              version = "0.4.2";
              sha256 =
                "a32ced7527706b6adaae428eb03836260bdcf560be6ef92662ea6ec1541e687f";
            };
            beamDeps  = [ httpoison_0_8_1 exjsx_3_1_0 ];

            meta = {
              description = ''A Slack Real Time Messaging API client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/Elixir-Slack";
            };
          }
      ) {};

    slack = slack_0_4_2;

    slack_webhook_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_7_5 }:
          buildMix {
            name = "slack_webhook";
            version = "0.0.2";
            src = fetchHex {
              pkg = "slack_webhook";
              version = "0.0.2";
              sha256 =
                "7099c22a5b07fd47914a5336469e3696ebe5d5402798ba1e06eec7287d5551ad";
            };
            beamDeps  = [ httpoison_0_7_5 ];

            meta = {
              description = ''Sends simple messages to Slack channel using
                            webhook API.'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/remiq/slack_webhook";
            };
          }
      ) {};

    slack_webhook = slack_webhook_0_0_2;

    slacker_0_0_2 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, inflex_1_0_0, httpoison_0_8_1
        }:
          buildMix {
            name = "slacker";
            version = "0.0.2";
            src = fetchHex {
              pkg = "slacker";
              version = "0.0.2";
              sha256 =
                "4d3a110772e7b273a6d771bf4bc869fd13cb3bb9e99bca8f038e58d384f0ef1b";
            };
            beamDeps  = [ poison_1_5_2 inflex_1_0_0 httpoison_0_8_1 ];

            meta = {
              description = ''A bot library for the Slack chat service.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/koudelka/slacker";
            };
          }
      ) {};

    slacker = slacker_0_0_2;

    slackex_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, exjsx_3_2_0 }:
          buildMix {
            name = "slackex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "slackex";
              version = "0.0.1";
              sha256 =
                "bdd1d523cd576ff054ed3eee4efe22eee87ded127054332ca5a3bc1d6a997f33";
            };
            beamDeps  = [ httpoison_0_8_1 exjsx_3_2_0 ];

            meta = {
              longDescription = ''A Slack wrapper for Elixir Requires an active
                                account with Slack (http://slack.com).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/davidstump/slackex";
            };
          }
      ) {};

    slackex = slackex_0_0_1;

    slim_fast_0_10_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "slim_fast";
            version = "0.10.0";
            src = fetchHex {
              pkg = "slim_fast";
              version = "0.10.0";
              sha256 =
                "aae7eb1573c1ee98f5fa11098d758b80b35f4d67e6e5f81135ae4d66cb571c44";
            };

            meta = {
              description = ''An Elixir library for rendering slim
                            templates.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/doomspork/slim_fast";
            };
          }
      ) {};

    slim_fast = slim_fast_0_10_0;

    slime_0_12_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "slime";
            version = "0.12.1";
            src = fetchHex {
              pkg = "slime";
              version = "0.12.1";
              sha256 =
                "0a2f92f2f7523118efadcb20fe54611ddfb65428c6a21b69182fc247e361dc1e";
            };

            meta = {
              description = ''An Elixir library for rendering Slim-like
                            templates.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slime-lang/slime";
            };
          }
      ) {};

    slime = slime_0_12_1;

    slp_0_0_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "slp";
            version = "0.0.2";
            src = fetchHex {
              pkg = "slp";
              version = "0.0.2";
              sha256 =
                "27e5f7330c7ce631f16e3ec5781b31cbb2247d2bcdeab1e979a66dcc4397bd77";
            };

            meta = {
              longDescription = ''An Elixir application for using the Service
                                Location Protocol. SLP is a commonly used
                                service discovery protocol.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stuart/elixir_slp";
            };
          }
      ) {};

    slp = slp_0_0_2;

    slugger_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "slugger";
            version = "0.1.0";
            src = fetchHex {
              pkg = "slugger";
              version = "0.1.0";
              sha256 =
                "c74ef1f09acd6952591d89ab6747b337aaec9624e57623ca3a7b9e2cf536a8a3";
            };

            meta = {
              longDescription = ''The library Slugger can generate slugs from
                                given strings that can be used in URLs or file
                                names.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/h4cc/slugger";
            };
          }
      ) {};

    slugger = slugger_0_1_0;

    smex_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, murmur_1_0_0, amqp_0_1_4 }:
          buildMix {
            name = "smex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "smex";
              version = "0.0.1";
              sha256 =
                "3a84a2b3b3f09965bb0c2d57d04ba435b33c47319ee308feb4a182ddd9e69867";
            };
            beamDeps  = [ murmur_1_0_0 amqp_0_1_4 ];

            meta = {
              description = ''An Elixir library for simplifying the sending of
                            protocol buffers over rabbitmq.'';

            };
          }
      ) {};

    smex = smex_0_0_1;

    smurf_0_1_3 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "smurf";
            version = "0.1.3";
            src = fetchHex {
              pkg = "smurf";
              version = "0.1.3";
              sha256 =
                "5ed8e18ec8eea0647e7e938ce15cc76e59497d0a259cea15124520a48f0d6be6";
            };

            meta = {
              description = ''SMF interfacing library for erlang'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/smurf";
            };
          }
      ) {};

    smurf = smurf_0_1_3;

    snappy_1_1_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "snappy";
            version = "1.1.1";
            src = fetchHex {
              pkg = "snappy";
              version = "1.1.1";
              sha256 =
                "7faed3ec6bcac363c2a6f09b4f000a12c8166b42b3bf70228d532f8afcfbcb6a";
            };
            compilePorts = true;

            meta = {
              description = ''snappy compressor/decompressor Erlang NIF
                            wrapper'';

              homepage = "https://github.com/barrel-db/snappy";
            };
          }
      ) {};

    snappy = snappy_1_1_1;

    socket_0_2_8 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "socket";
            version = "0.2.8";
            src = fetchHex {
              pkg = "socket";
              version = "0.2.8";
              sha256 =
                "dc711caa318c31eea35e0cfec62e9a376fda6c1365356de59d9a78a4ebb635c9";
            };

            meta = {
              description = ''Socket handling library for Elixir'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/elixir-socket";
            };
          }
      ) {};

    socket_0_3_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "socket";
            version = "0.3.1";
            src = fetchHex {
              pkg = "socket";
              version = "0.3.1";
              sha256 =
                "f016b4e0c2643926cce846b6a744b0cd7c8352106052dcb7c396bf1b7f55d21c";
            };

            meta = {
              description = ''Socket handling library for Elixir'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/elixir-socket";
            };
          }
      ) {};

    socket = socket_0_3_1;

    sorted_set_1_1_0 = callPackage
      (
        {  buildMix, fetchHex, red_black_tree_1_2_0 }:
          buildMix {
            name = "sorted_set";
            version = "1.1.0";
            src = fetchHex {
              pkg = "sorted_set";
              version = "1.1.0";
              sha256 =
                "2c2c119554e02d8c813fd9511a8417b20f8efd3c27fa4ab722ba733140fb9a46";
            };
            beamDeps  = [ red_black_tree_1_2_0 ];

            meta = {
              description = ''SortedSet implementation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SenecaSystems/sorted_set";
            };
          }
      ) {};

    sorted_set = sorted_set_1_1_0;

    spaceapi_0_1_2 = callPackage
      (
        {  buildMix, fetchHex, poison_2_1_0 }:
          buildMix {
            name = "spaceapi";
            version = "0.1.2";
            src = fetchHex {
              pkg = "spaceapi";
              version = "0.1.2";
              sha256 =
                "2d9f7da251e3d6dfd33248173622166afb6ecb28dc6286191ab178d85117584d";
            };
            beamDeps  = [ poison_2_1_0 ];

            meta = {
              description = ''A small Elixir package for parsing the Space
                            API'';
              license = with stdenv.lib.licenses; [ mit gpl3 ];
              homepage = "https://github.com/geistesk/spaceapi";
            };
          }
      ) {};

    spaceapi = spaceapi_0_1_2;

    spaced_repetitions_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, timex_0_16_2 }:
          buildMix {
            name = "spaced_repetitions";
            version = "0.0.1";
            src = fetchHex {
              pkg = "spaced_repetitions";
              version = "0.0.1";
              sha256 =
                "67e846a7fe32d7ab5b10373dd9f80eccccacc05ad2b9f3e6ca3de09da8b8abc5";
            };
            beamDeps  = [ timex_0_16_2 ];

            meta = {
              description = ''Spaced repetitions library with basic sm2
                            implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mrluc/exreps";
            };
          }
      ) {};

    spaced_repetitions = spaced_repetitions_0_0_1;

    sparkpost_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpotion_2_1_0 }:
          buildMix {
            name = "sparkpost";
            version = "0.1.0";
            src = fetchHex {
              pkg = "sparkpost";
              version = "0.1.0";
              sha256 =
                "704fa320132235db00c4b40b6990e63ec3c2581d681d86c0765ef930c88a2694";
            };
            beamDeps  = [ poison_1_5_2 httpotion_2_1_0 ];

            meta = {
              description = ''The official Elixir package for the SparkPost
                            API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/SparkPost/elixir-sparkpost";
            };
          }
      ) {};

    sparkpost = sparkpost_0_1_0;

    spawndir_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, exrm_0_15_1 }:
          buildMix {
            name = "spawndir";
            version = "0.1.1";
            src = fetchHex {
              pkg = "spawndir";
              version = "0.1.1";
              sha256 =
                "c407c9eb1f6f8ebb622df28b2f19a34447add6555f87208446a458b60ea9750c";
            };
            beamDeps  = [ exrm_0_15_1 ];

            meta = {
              longDescription = ''# SpawnDir Spawns commands from the file
                                system. This exists to provide a simple
                                mechanism for spawning and managing processes:
                                simply add an executable, or a symbolic link to
                                one, to a monitored directory. The config allows
                                arguments to be specified by file or directory.
                                While not as flexible as upstart, monit, et al.,
                                SpawnDir`s use of the filesystem provides a
                                simpler UNIX-ish interface. ## Usage To use the
                                escript executable: ./spawndir DIR [ARGS ...]
                                where `DIR` is the directory to be monitored,
                                and each command will be started with the
                                supplied `ARGS` To run using mix: mix run
                                --no-halt You can configure what is watched via
                                the `:spawndir` application environment
                                variables: :default_opts :: [opt] :watch :: [cmd
                                | {cmd, [opt]}] where opt :: string() cmd ::
                                string() ## Future Additions - Check for
                                executable flag - Package installation - Monitor
                                filesystem for commands being added/removed
                                Copyright (c) Thomas Moulia, 2014 '';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/jtmoulia/spawndir";
            };
          }
      ) {};

    spawndir = spawndir_0_1_1;

    spell_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_4_0, msgpax_0_8_2 }:
          buildMix {
            name = "spell";
            version = "0.1.0";
            src = fetchHex {
              pkg = "spell";
              version = "0.1.0";
              sha256 =
                "c768ada54d3cbda57d63344b0b9c91520362700dde4b939a825358f01f1dbfa9";
            };
            beamDeps  = [ poison_1_4_0 msgpax_0_8_2 ];

            meta = {
              longDescription = ''Spell is an extensible Elixir WAMP client.
                                Spell supports the client subscriber, publisher,
                                callee, and caller roles.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/MyMedsAndMe/spell";
            };
          }
      ) {};

    spell = spell_0_1_0;

    spf_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "spf";
            version = "0.0.1";
            src = fetchHex {
              pkg = "spf";
              version = "0.0.1";
              sha256 =
                "64126066eaac871e08a1ece2721e0fccb36220b28a4c6b03f08f0d4d459909a3";
            };

            meta = {
              description = ''SPF implementation in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hex-sh/spf";
            };
          }
      ) {};

    spf = spf_0_0_1;

    spherical_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "spherical";
            version = "0.0.1";
            src = fetchHex {
              pkg = "spherical";
              version = "0.0.1";
              sha256 =
                "eaa7f1a4d265a0a6d0b8e23b530882dda0e68e35780a5af50ac6a2d9d2ba2fac";
            };

            meta = {
              description = ''An spherical geometry library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arpunk/spherical";
            };
          }
      ) {};

    spherical = spherical_0_0_1;

    spirit_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, plug_0_14_0, cowboy_1_0_4 }:
          buildMix {
            name = "spirit";
            version = "0.0.1";
            src = fetchHex {
              pkg = "spirit";
              version = "0.0.1";
              sha256 =
                "ffaa22ccfd4999eacaee60464eb494bb9da597a8dad0dcad575fb506e06ee3b6";
            };
            beamDeps  = [ poison_1_5_2 plug_0_14_0 cowboy_1_0_4 ];

            meta = {
              description = ''Elixir microframework for web development.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/emancu/spirit";
            };
          }
      ) {};

    spirit = spirit_0_0_1;

    spotify_ex_0_0_4 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, plug_1_1_1, httpoison_0_8_1
        }:
          buildMix {
            name = "spotify_ex";
            version = "0.0.4";
            src = fetchHex {
              pkg = "spotify_ex";
              version = "0.0.4";
              sha256 =
                "f2e8647410096d34d9baecf8d9622896214320641ed72c11c711f9a463e4a961";
            };
            beamDeps  = [ poison_1_5_2 plug_1_1_1 httpoison_0_8_1 ];

            meta = {
              description = ''An Elixir wrapper for Spotify API O-Auth.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://www.github.com/jsncmgs1/spotify_ex";
            };
          }
      ) {};

    spotify_ex = spotify_ex_0_0_4;

    spreedly_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "spreedly";
            version = "0.1.1";
            src = fetchHex {
              pkg = "spreedly";
              version = "0.1.1";
              sha256 =
                "a8aa76698a4fe95cb4c5cb77be2cfc4e085685570aacb25382fffdca4c7e1a6f";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''A wrapper for the Spreedly API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/duff/spreedly-elixir";
            };
          }
      ) {};

    spreedly = spreedly_0_1_1;

    sql_dust_0_1_5 = callPackage
      (
        {  buildMix, fetchHex, inflex_1_5_0, ecto_2_0_0_beta_0 }:
          buildMix {
            name = "sql_dust";
            version = "0.1.5";
            src = fetchHex {
              pkg = "sql_dust";
              version = "0.1.5";
              sha256 =
                "8b8ec15b23c964e74e020cc7bd9ff9456d302ceb173465ebd0cc04c10bc3775d";
            };
            beamDeps  = [ inflex_1_5_0 ecto_2_0_0_beta_0 ];

            meta = {
              longDescription = ''Easy. Simple. Powerful. Generate (complex)
                                SQL queries using magical Elixir SQL dust.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bettyblocks/sql_dust";
            };
          }
      ) {};

    sql_dust = sql_dust_0_1_5;

    sqlite3_1_1_5 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "sqlite3";
            version = "1.1.5";
            src = fetchHex {
              pkg = "sqlite3";
              version = "1.1.5";
              sha256 =
                "fc2beb8b09deec6cf68bd6203ecf28bf827d2073915bc7131c9cd56d5ff27260";
            };
            compilePorts = true;

            meta = {
              description = ''SQLite3 Interface'';
              license = stdenv.lib.licenses.epl10;
              homepage = "https://github.com/processone/erlang-sqlite3";
            };
          }
      ) {};

    sqlite3 = sqlite3_1_1_5;

    sqlite_ecto_1_1_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          sqlitex_0_8_2,
          poison_1_5_2,
          ecto_2_0_0_beta_0
        }:
          buildMix {
            name = "sqlite_ecto";
            version = "1.1.0";
            src = fetchHex {
              pkg = "sqlite_ecto";
              version = "1.1.0";
              sha256 =
                "88951b424e909d8047f0d03c13418c321df9e94560ac30241d8b1f7e48f49201";
            };
            beamDeps  = [ sqlitex_0_8_2 poison_1_5_2 ecto_2_0_0_beta_0 ];

            meta = {
              description = ''SQLite3 adapter for Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jazzyb/sqlite_ecto";
            };
          }
      ) {};

    sqlite_ecto = sqlite_ecto_1_1_0;

    sqlitex_0_8_2 = callPackage
      (
        {
          buildMix, fetchHex, pipe_0_0_2, esqlite_0_2_2, decimal_1_1_1
        }:
          buildMix {
            name = "sqlitex";
            version = "0.8.2";
            src = fetchHex {
              pkg = "sqlitex";
              version = "0.8.2";
              sha256 =
                "8485c24f945ce9c04ad894aff14cb965dcae3e93e08fbdca51a18ea85e9719df";
            };
            beamDeps  = [ pipe_0_0_2 esqlite_0_2_2 decimal_1_1_1 ];

            meta = {
              description = ''A thin Elixir wrapper around esqlite'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mmmries/sqlitex";
            };
          }
      ) {};

    sqlitex = sqlitex_0_8_2;

    ssdb_0_3_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ssdb";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ssdb";
              version = "0.3.0";
              sha256 =
                "a6b71533949a38ef193ccded89d620d2b6808b1b55a2e0f16dae7e1abad9874f";
            };

            meta = {
              description = ''SSDB client for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lidashuang/ssdb-elixir";
            };
          }
      ) {};

    ssdb = ssdb_0_3_0;

    ssdb_elixir_0_2_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "ssdb_elixir";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ssdb_elixir";
              version = "0.2.2";
              sha256 =
                "3aa4d2b90b4a4c0f73b1fec3e67b90dfee081bce4653f942a05857082b65bc99";
            };

            meta = {
              description = ''SSDB client for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lidashuang/ssdb_elixir";
            };
          }
      ) {};

    ssdb_elixir = ssdb_elixir_0_2_2;

    sshex_1_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "sshex";
            version = "1.1.0";
            src = fetchHex {
              pkg = "sshex";
              version = "1.1.0";
              sha256 =
                "4e4415547e9dde608d08bf7fff094b6705614a584089356ffbdb6f97821f49ff";
            };

            meta = {
              description = ''Simple SSH helpers for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rubencaro/sshex";
            };
          }
      ) {};

    sshex_2_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "sshex";
            version = "2.1.0";
            src = fetchHex {
              pkg = "sshex";
              version = "2.1.0";
              sha256 =
                "303bd8fd007bf2d10ddfae83b74acafc747f24908c2590b098ba2e85c570c58b";
            };

            meta = {
              description = ''Simple SSH helpers for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rubencaro/sshex";
            };
          }
      ) {};

    sshex = sshex_2_1_0;

    ssl_verify_hostname_1_0_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "ssl_verify_hostname";
            version = "1.0.1";
            src = fetchHex {
              pkg = "ssl_verify_hostname";
              version = "1.0.1";
              sha256 =
                "630baab6b1dd68f516b779353b368e4c605f1a022f3e544833b1667fdd321493";
            };

            meta = {
              description = ''Hostname verification library for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/deadtrickster/ssl_verify_hostname.erl";
            };
          }
      ) {};

    ssl_verify_hostname_1_0_5 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "ssl_verify_hostname";
            version = "1.0.5";
            src = fetchHex {
              pkg = "ssl_verify_hostname";
              version = "1.0.5";
              sha256 =
                "f2cb11e6144e10ab39d1e14bf9fb2437b690979c70bf5428e9dc4bfaf1dfeabf";
            };

            meta = {
              description = ''Hostname verification library for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/deadtrickster/ssl_verify_hostname.erl";
            };
          }
      ) {};

    ssl_verify_hostname_1_0_6 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "ssl_verify_hostname";
            version = "1.0.6";
            src = fetchHex {
              pkg = "ssl_verify_hostname";
              version = "1.0.6";
              sha256 =
                "72b2fc8a8e23d77eed4441137fefa491bbf4a6dc52e9c0045f3f8e92e66243b5";
            };

            meta = {
              description = ''Hostname verification library for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/deadtrickster/ssl_verify_hostname.erl";
            };
          }
      ) {};

    ssl_verify_hostname = ssl_verify_hostname_1_0_6;

    stackd_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "stackd";
            version = "0.0.1";
            src = fetchHex {
              pkg = "stackd";
              version = "0.0.1";
              sha256 =
                "41749dc834f92af4954988b5e9155d45fcbf63224ecfcabce6f1fc80f3aff8f9";
            };

            meta = {
              description = ''Stackd'';

            };
          }
      ) {};

    stackd = stackd_0_0_1;

    stash_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "stash";
            version = "1.0.0";
            src = fetchHex {
              pkg = "stash";
              version = "1.0.0";
              sha256 =
                "ac68a470ed2a292b59c1dbf286a97e8b25ec72adaeeb3734c183dc54b659f7d6";
            };

            meta = {
              description = ''Simple ETS backed key/value store for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/stash";
            };
          }
      ) {};

    stash = stash_1_0_0;

    statistics_0_4_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "statistics";
            version = "0.4.0";
            src = fetchHex {
              pkg = "statistics";
              version = "0.4.0";
              sha256 =
                "550390b85fcb32dcf2e3498b06076352aa332b0a5002830b0438bb3fdb8da37a";
            };

            meta = {
              description = ''Functions for descriptive statistics and common
                            distributions'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/msharp/elixir-statistics";
            };
          }
      ) {};

    statistics = statistics_0_4_0;

    statix_0_7_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "statix";
            version = "0.7.0";
            src = fetchHex {
              pkg = "statix";
              version = "0.7.0";
              sha256 =
                "0439c5698eaef7c2de213d9bff5681eeccc1dec789931e9ae73b9d2b2968234b";
            };

            meta = {
              description = ''An Elixir client for StatsD compatible
                            servers.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/statix";
            };
          }
      ) {};

    statix = statix_0_7_0;

    std_json_io_0_1_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          porcelain_2_0_1,
          poolboy_1_5_1,
          poison_1_5_2,
          fs_0_9_2
        }:
          buildMix {
            name = "std_json_io";
            version = "0.1.0";
            src = fetchHex {
              pkg = "std_json_io";
              version = "0.1.0";
              sha256 =
                "14f1c18c31a0b0b3ffb1e654247925335059eec9c800d81dd6379166e7403d1e";
            };
            beamDeps  = [ porcelain_2_0_1 poolboy_1_5_1 poison_1_5_2 fs_0_9_2
                      ];

            meta = {
              description = ''Application for managing and communicating with
                            IO servers via JSON'';

            };
          }
      ) {};

    std_json_io = std_json_io_0_1_0;

    steamex_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, sweet_xml_0_4_0, httpoison_0_7_5 }:
          buildMix {
            name = "steamex";
            version = "0.0.3";
            src = fetchHex {
              pkg = "steamex";
              version = "0.0.3";
              sha256 =
                "4e9a5da88acb54897593dadc3e8a4cbdae86a31e7662888105463d20c0430dd8";
            };
            beamDeps  = [ sweet_xml_0_4_0 httpoison_0_7_5 ];

            meta = {
              description = ''Steam API and Auth (with Phoenix/Plug
                            integration) for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antipax/steamex";
            };
          }
      ) {};

    steamex = steamex_0_0_3;

    stemex_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "stemex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "stemex";
              version = "0.1.1";
              sha256 =
                "219b8e81fedba5a9bb978b8f7eaf230e77f2702d58e409adcca998fde1788521";
            };

            meta = {
              longDescription = ''Stemex is a NIF wrapper above snowball
                                containing stemmers for : danish, dutch,
                                english, finnish, french, german, hungarian,
                                italian, kraaij_pohlmann, lovins, norwegian,
                                portuguese, romanian, russian, spanish, swedish,
                                turkish.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/stemex";
            };
          }
      ) {};

    stemex = stemex_0_1_1;

    stmd_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, ex_doc_0_11_4, earmark_0_2_1 }:
          buildMix {
            name = "stmd";
            version = "0.0.2";
            src = fetchHex {
              pkg = "stmd";
              version = "0.0.2";
              sha256 =
                "3b45578da652e881b1974bbe836d9b8e0e8db8d6ef0042aee69340d5eaf2d9b3";
            };
            beamDeps  = [ ex_doc_0_11_4 earmark_0_2_1 ];

            meta = {
              description = ''[DEPRECATED] New package: cmark'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/cmark.ex";
            };
          }
      ) {};

    stmd = stmd_0_0_2;

    stockastic_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, exjsx_3_2_0 }:
          buildMix {
            name = "stockastic";
            version = "0.0.2";
            src = fetchHex {
              pkg = "stockastic";
              version = "0.0.2";
              sha256 =
                "f180915a21d4aa4a64f660696b77c5788334d4bae2639a58814565af0d75ca56";
            };
            beamDeps  = [ httpoison_0_8_1 exjsx_3_2_0 ];

            meta = {
              description = ''Simple Elixir wrapper for the Stockfighter API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shanewilton/stockastic";
            };
          }
      ) {};

    stockastic = stockastic_0_0_2;

    stockfighter_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "stockfighter";
            version = "0.0.1";
            src = fetchHex {
              pkg = "stockfighter";
              version = "0.0.1";
              sha256 =
                "d72726cf055068e2b62ef9091ec17ab9292b60bc7f4a7306c17cad6d022a3bd7";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''a simple wrapper of stockfighter http api'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lerencao/stockfighter";
            };
          }
      ) {};

    stockfighter = stockfighter_0_0_1;

    stopwatch_0_0_7 = callPackage
      (
        {  buildMix, fetchHex, timex_1_0_1 }:
          buildMix {
            name = "stopwatch";
            version = "0.0.7";
            src = fetchHex {
              pkg = "stopwatch";
              version = "0.0.7";
              sha256 =
                "de20ad70ca3b0f70d0a2000858e80c0afd4163101e18d0428ee62a58e7c8360a";
            };
            beamDeps  = [ timex_1_0_1 ];

            meta = {
              description = ''The stopwatch provides an easy api to measure
                            elapsed time and profile code.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/matteosister/stopwatch";
            };
          }
      ) {};

    stopwatch = stopwatch_0_0_7;

    stream_runner_1_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "stream_runner";
            version = "1.1.0";
            src = fetchHex {
              pkg = "stream_runner";
              version = "1.1.0";
              sha256 =
                "3c2da3658440ba57224cd484de4b0d8b128e5463413ac05285cdfa4b37e30798";
            };

            meta = {
              description = ''Run a Stream as a process'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/stream_runner";
            };
          }
      ) {};

    stream_runner = stream_runner_1_1_0;

    stream_weaver_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "stream_weaver";
            version = "0.0.2";
            src = fetchHex {
              pkg = "stream_weaver";
              version = "0.0.2";
              sha256 =
                "6664a585d4afaac63e69f367e79bcc6af886dbebd1f8b66a099f6164973dc168";
            };

            meta = {
              description = ''Library for working with streams'';

            };
          }
      ) {};

    stream_weaver = stream_weaver_0_0_2;

    strftimerl_0_1_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "strftimerl";
            version = "0.1.1";
            src = fetchHex {
              pkg = "strftimerl";
              version = "0.1.1";
              sha256 =
                "c09c7cd6a421bcbc1020c1440a2e73e312b852adbb3034d11f3dffa27d7953b1";
            };

            meta = {
              description = ''strftime formatting in erlang'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/gmr/strftimerl";
            };
          }
      ) {};

    strftimerl = strftimerl_0_1_1;

    strict_comparison_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "strict_comparison";
            version = "0.0.1";
            src = fetchHex {
              pkg = "strict_comparison";
              version = "0.0.1";
              sha256 =
                "c033d7c5befc4971171a20c8fce96ae04fc0ebf0bae790b7ee0e7498f9d7997e";
            };

            meta = {
              description = ''Provides strict number comparison in both regular
                            code and guards.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antipax/strict_comparison";
            };
          }
      ) {};

    strict_comparison = strict_comparison_0_0_1;

    stringprep_1_0_2 = callPackage
      (
        {  buildRebar3, fetchHex, p1_utils_1_0_3 }:
          buildRebar3 {
            name = "stringprep";
            version = "1.0.2";
            src = fetchHex {
              pkg = "stringprep";
              version = "1.0.2";
              sha256 =
                "6990e6d9d9bc241a77ceb54d4afd7332319710dbebdae8f4f0c627186194c520";
            };
            compilePorts = true;
            beamDeps  = [ p1_utils_1_0_3 ];

            meta = {
              description = ''Fast Stringprep Erlang / Elixir implementation'';
              license = with stdenv.lib.licenses; [ asl20 free ];
              homepage = "https://github.com/processone/stringprep";
            };
          }
      ) {};

    stringprep = stringprep_1_0_2;

    stripe_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, jazz_0_2_1, httpotion_1_0_0 }:
          buildMix {
            name = "stripe";
            version = "0.0.1";
            src = fetchHex {
              pkg = "stripe";
              version = "0.0.1";
              sha256 =
                "99f9920ce562109abb70a1998a4f6b5bcd07f5063237cf28dd81387163df3f02";
            };
            beamDeps  = [ jazz_0_2_1 httpotion_1_0_0 ];

            meta = {
              longDescription = ''Wrapper around Stripe`s API. Full
                                documentation can be found at
                                https://stripe.com/docs/api '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SenecaSystems/stripe";
            };
          }
      ) {};

    stripe = stripe_0_0_1;

    stripex_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, gateway_0_0_6 }:
          buildMix {
            name = "stripex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "stripex";
              version = "0.1.0";
              sha256 =
                "49959c78e677d3e30edd808cce7a013a7120f337705d0e2fd646c000d9b30853";
            };
            beamDeps  = [ gateway_0_0_6 ];

            meta = {
              longDescription = ''A much more ruby-stripe-like wrapper around
                                Stripe`s API (built with Poison). Full
                                documentation can be found at
                                https://stripe.com/docs/api'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/foxnewsnetwork/stripex";
            };
          }
      ) {};

    stripex = stripex_0_1_0;

    stripity_stripe_1_2_0 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_1_5_2,
          httpoison_0_8_1,
          hackney_1_4_8,
          earmark_0_2_1
        }:
          buildMix {
            name = "stripity_stripe";
            version = "1.2.0";
            src = fetchHex {
              pkg = "stripity_stripe";
              version = "1.2.0";
              sha256 =
                "25cb8c92ce83354a8d160514f183167a6c67ec3f1221e925cff3750da0fe4cd6";
            };
            beamDeps  = [
                          poison_1_5_2
                          httpoison_0_8_1
                          hackney_1_4_8
                          earmark_0_2_1
                        ];

            meta = {
              description = ''A Stripe Library for Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/robconery/stripity-stripe";
            };
          }
      ) {};

    stripity_stripe = stripity_stripe_1_2_0;

    struct_fields_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "struct_fields";
            version = "0.2.0";
            src = fetchHex {
              pkg = "struct_fields";
              version = "0.2.0";
              sha256 =
                "245be58f06535a05247b6539e2640eb649c25eb896010452f2ee43b5e2604b72";
            };

            meta = {
              description = ''Tiny module to easily get a list of fields for
                            structs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nTraum/struct_fields";
            };
          }
      ) {};

    struct_fields = struct_fields_0_2_0;

    structurez_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "structurez";
            version = "0.0.1";
            src = fetchHex {
              pkg = "structurez";
              version = "0.0.1";
              sha256 =
                "acacce1dfcd92854e75f891468c264689aa8223c21c88064f5c6883e11f3ae12";
            };

            meta = {
              description = ''Additional Data Structures for use in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hamiltop/structurez";
            };
          }
      ) {};

    structurez = structurez_0_0_1;

    stun_1_0_1 = callPackage
      (
        {  buildRebar3, fetchHex, p1_utils_1_0_3, fast_tls_1_0_1 }:
          buildRebar3 {
            name = "stun";
            version = "1.0.1";
            src = fetchHex {
              pkg = "stun";
              version = "1.0.1";
              sha256 =
                "77c9713436dd51e334698ce1de3e17e3601552c40ced76e2bd321eb5eaa33374";
            };

            beamDeps  = [ p1_utils_1_0_3 fast_tls_1_0_1 ];

            meta = {
              description = ''STUN and TURN library for Erlang / Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/stun";
            };
          }
      ) {};

    stun = stun_1_0_1;

    sugar_0_4_10 = callPackage
      (
        {
          buildMix,
          fetchHex,
          templates_0_0_5,
          postgrex_0_11_1,
          poison_1_5_2,
          plugs_0_1_0,
          plug_1_1_1,
          http_router_0_0_8,
          ecto_2_0_0_beta_0,
          cowboy_1_0_4
        }:
          buildMix {
            name = "sugar";
            version = "0.4.10";
            src = fetchHex {
              pkg = "sugar";
              version = "0.4.10";
              sha256 =
                "6a0fe8e12032aa4c8932801c000bb361ddec4ea6cb64e756e56e26306ea08a99";
            };
            beamDeps  = [
                          templates_0_0_5
                          postgrex_0_11_1
                          poison_1_5_2
                          plugs_0_1_0
                          plug_1_1_1
                          http_router_0_0_8
                          ecto_2_0_0_beta_0
                          cowboy_1_0_4
                        ];

            meta = {
              description = ''Modular web framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sugar-framework/sugar";
            };
          }
      ) {};

    sugar = sugar_0_4_10;

    supermemo_1_0_0 = callPackage
      (
        {  buildMix, fetchHex, timex_0_13_5 }:
          buildMix {
            name = "supermemo";
            version = "1.0.0";
            src = fetchHex {
              pkg = "supermemo";
              version = "1.0.0";
              sha256 =
                "d8afa9ed4f8d18d835eb60b68c36ef4ee8489d0abed5051fde20dc433ea8a076";
            };
            beamDeps  = [ timex_0_13_5 ];

            meta = {
              longDescription = ''An Elixir implementation of the Supermemo 2
                                Algorithm as described here:
                                http://www.supermemo.com/english/ol/sm2.htm. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edubkendo/supermemo";
            };
          }
      ) {};

    supermemo = supermemo_1_0_0;

    supervisord_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, xmlrpc_0_9_1, httpoison_0_7_5 }:
          buildMix {
            name = "supervisord";
            version = "0.1.0";
            src = fetchHex {
              pkg = "supervisord";
              version = "0.1.0";
              sha256 =
                "628bd1f94bff68048e270fec788250ca4adf888a9b9e20e6963958dec43f8ee0";
            };
            beamDeps  = [ xmlrpc_0_9_1 httpoison_0_7_5 ];

            meta = {
              description = ''Supervisord library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/pocketberserker/elixir-supervisord";
            };
          }
      ) {};

    supervisord = supervisord_0_1_0;

    supool_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "supool";
            version = "1.5.1";
            src = fetchHex {
              pkg = "supool";
              version = "1.5.1";
              sha256 =
                "c191d63ff19ae177bf4cfba02303ae4552d8b48ec4133e24053e037513dfae09";
            };

            meta = {
              description = ''Erlang Process Pool as a Supervisor'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/okeuday/supool";
            };
          }
      ) {};

    supool = supool_1_5_1;

    swaggerdoc_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, phoenix_1_0_4, ecto_1_0_7 }:
          buildMix {
            name = "swaggerdoc";
            version = "0.0.1";
            src = fetchHex {
              pkg = "swaggerdoc";
              version = "0.0.1";
              sha256 =
                "8131fc20821e2dc4f9dd3322dc2e0b8ff1cd25c36338c3eb7d725440edd01405";
            };
            beamDeps  = [ poison_1_5_2 phoenix_1_0_4 ecto_1_0_7 ];

            meta = {
              longDescription = ''The SwaggerDoc module provides a convenience
                                task for generating Swagger API documentation
                                for Phoenix and Ecto-based projects.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/OpenAperture/swaggerdoc.git";
            };
          }
      ) {};

    swaggerdoc = swaggerdoc_0_0_1;

    sweet_xml_0_4_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "sweet_xml";
            version = "0.4.0";
            src = fetchHex {
              pkg = "sweet_xml";
              version = "0.4.0";
              sha256 =
                "94b7134a34f95437ad444d9bc3d5d7e69eabec8196e1a36fe181e97123ec5eb4";
            };

            meta = {
              description = ''An sweet wrapper of :xmerl to help query xml
                            docs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/sweet_xml";
            };
          }
      ) {};

    sweet_xml_0_5_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "sweet_xml";
            version = "0.5.1";
            src = fetchHex {
              pkg = "sweet_xml";
              version = "0.5.1";
              sha256 =
                "3266dedc5e2e6c6b1c5b8a088504a58980632727803de22a5a276da847ea6947";
            };

            meta = {
              description = ''An sweet wrapper of :xmerl to help query xml
                            docs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/sweet_xml";
            };
          }
      ) {};

    sweet_xml_0_6_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "sweet_xml";
            version = "0.6.1";
            src = fetchHex {
              pkg = "sweet_xml";
              version = "0.6.1";
              sha256 =
                "30059e5367a4728ca4b246682adc72618a0a8c997eca6f52a107b2fe3ab4f313";
            };

            meta = {
              description = ''An sweet wrapper of :xmerl to help query xml
                            docs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/sweet_xml";
            };
          }
      ) {};

    sweet_xml = sweet_xml_0_6_1;

    switchboard_0_3_2 = callPackage
      (
        {
          buildRebar3,
          fetchHex,
          lager_3_0_2,
          jsx_2_8_0,
          gproc_0_5_0,
          cowboy_1_0_4
        }:
          buildRebar3 {
            name = "switchboard";
            version = "0.3.2";
            src = fetchHex {
              pkg = "switchboard";
              version = "0.3.2";
              sha256 =
                "0b1debb284cd63e5220dc56462dafebd1418579bb40a5b8e51dfdf1f50bfbeb3";
            };

            beamDeps  = [ lager_3_0_2 jsx_2_8_0 gproc_0_5_0 cowboy_1_0_4 ];

            meta = {
              description = ''Conduct monitoring and operations across email
                            accounts'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/thusfresh/switchboard";
            };
          }
      ) {};

    switchboard = switchboard_0_3_2;

    syn_osc_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, osc_0_1_1 }:
          buildMix {
            name = "syn_osc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "syn_osc";
              version = "0.1.0";
              sha256 =
                "7cdb75d8e9a64f3e2baf77bce83d06e0da4361d34a82c3ddda68a6efb3d21df9";
            };
            beamDeps  = [ osc_0_1_1 ];

            meta = {
              description = ''SynOSC encoder/decoder for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/syn_osc_ex";
            };
          }
      ) {};

    syn_osc = syn_osc_0_1_0;

    synthex_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "synthex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "synthex";
              version = "0.1.0";
              sha256 =
                "111932916800698a032b9cf7e883146613acc788d165066210e1e09b00e476bc";
            };

            meta = {
              description = ''A signal synthesis library'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/bitgamma/synthex";
            };
          }
      ) {};

    synthex = synthex_0_1_0;

    syslog_1_0_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "syslog";
            version = "1.0.2";
            src = fetchHex {
              pkg = "syslog";
              version = "1.0.2";
              sha256 =
                "ca158a84afe482f77cb4668383a6108f1e9190fcdf3035858f426b91b2021bf6";
            };
            compilePorts = true;

            meta = {
              description = ''Erlang port driver for interacting with syslog
                            via syslog'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/Vagabond/erlang-syslog";
            };
          }
      ) {};

    syslog = syslog_1_0_2;

    table_0_0_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "table";
            version = "0.0.4";
            src = fetchHex {
              pkg = "table";
              version = "0.0.4";
              sha256 =
                "9962976cb40b4cd517a03c572ced492185e9642bb224e29942f9b7671e31c55a";
            };

            meta = {
              description = ''ascii tables for cli'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zweifisch/table";
            };
          }
      ) {};

    table = table_0_0_4;

    table_rex_0_4_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "table_rex";
            version = "0.4.0";
            src = fetchHex {
              pkg = "table_rex";
              version = "0.4.0";
              sha256 =
                "71776a56629b850c647d298577f153faa41d3a98cff41446dd799c6bf30fcf19";
            };

            meta = {
              description = ''Generate configurable text-based tables for
                            display (ASCII & more)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/djm/table_rex";
            };
          }
      ) {};

    table_rex_0_8_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "table_rex";
            version = "0.8.0";
            src = fetchHex {
              pkg = "table_rex";
              version = "0.8.0";
              sha256 =
                "8d026afe99ac07f1261eae09334edbf8ec7ce55b812c3a60440ed88db83aad82";
            };

            meta = {
              description = ''Generate configurable text-based tables for
                            display (ASCII & more)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/djm/table_rex";
            };
          }
      ) {};

    table_rex = table_rex_0_8_0;

    tabula_2_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "tabula";
            version = "2.0.1";
            src = fetchHex {
              pkg = "tabula";
              version = "2.0.1";
              sha256 =
                "ed66a6d83890eaece976daf1083aa4e0ed9d877e185a1a9ccf1f2c87ee61b49e";
            };

            meta = {
              description = ''Pretty printer for maps/structs collections'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aerosol/Tabula";
            };
          }
      ) {};

    tabula = tabula_2_0_1;

    tagplay_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_7_5, exjsx_3_1_0 }:
          buildMix {
            name = "tagplay";
            version = "0.1.0";
            src = fetchHex {
              pkg = "tagplay";
              version = "0.1.0";
              sha256 =
                "620561f030ad83fc9e9bafec7efb03ded24d9ed81ac32a9ef1bc56c0ab87d61f";
            };
            beamDeps  = [ httpoison_0_7_5 exjsx_3_1_0 ];

            meta = {
              description = ''Tagplay.co API client. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Tagplay/elixir-tagplay";
            };
          }
      ) {};

    tagplay = tagplay_0_1_0;

    tail_1_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "tail";
            version = "1.0.1";
            src = fetchHex {
              pkg = "tail";
              version = "1.0.1";
              sha256 =
                "8cec5c708be02aab6094f9c6fdf5b6b0e68c0c3d4f2f9ae341e743d119e9c07f";
            };

            meta = {
              longDescription = ''A simple file tail functionality. Calls a
                                callback function whenever new lines are
                                detected on a file.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/TheFirstAvenger/elixir-tail.git";
            };
          }
      ) {};

    tail = tail_1_0_1;

    tane_0_3_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "tane";
            version = "0.3.1";
            src = fetchHex {
              pkg = "tane";
              version = "0.3.1";
              sha256 =
                "8154bcc365b7f21d7ab6ff6d122f6dc110dda05bbfcd7f331a7f514512913e0a";
            };

            meta = {
              description = ''Library for Seeding Databases'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/tane";
            };
          }
      ) {};

    tane = tane_0_3_1;

    tanegashima_0_0_3 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_2_1_0,
          httpoison_0_8_1,
          ex_doc_0_11_4,
          earmark_0_2_1,
          dialyze_0_2_0
        }:
          buildMix {
            name = "tanegashima";
            version = "0.0.3";
            src = fetchHex {
              pkg = "tanegashima";
              version = "0.0.3";
              sha256 =
                "a087f30aa519aae47c1d9d03dfcccef0305e72052d3951b2aa327ca3017ca989";
            };
            beamDeps  = [
                          poison_2_1_0
                          httpoison_0_8_1
                          ex_doc_0_11_4
                          earmark_0_2_1
                          dialyze_0_2_0
                        ];

            meta = {
              description = ''Elixir wrapper for Pushbullet-API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/massn/Tanegashima";
            };
          }
      ) {};

    tanegashima = tanegashima_0_0_3;

    tanuki_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "tanuki";
            version = "0.2.0";
            src = fetchHex {
              pkg = "tanuki";
              version = "0.2.0";
              sha256 =
                "f499d6bcb80fc29f2d0b68d16d8309cb25589583b1f4d0eb23cbc4fe5afbab8c";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''GitLab API wrapper in Elixir, named after GitLabs
                            mascot'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ZJvandeWeg/Tanuki";
            };
          }
      ) {};

    tanuki = tanuki_0_2_0;

    tap_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "tap";
            version = "0.1.0";
            src = fetchHex {
              pkg = "tap";
              version = "0.1.0";
              sha256 =
                "6016e69aafb18d75cb82ec30c2e09660eccf5cbd439b6a6d81a68b0825f13172";
            };

            meta = {
              description = ''Elixir tracing'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/eproxus/tap";
            };
          }
      ) {};

    tap = tap_0_1_0;

    tau_0_0_6 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "tau";
            version = "0.0.6";
            src = fetchHex {
              pkg = "tau";
              version = "0.0.6";
              sha256 =
                "6469f53ae39221f045b6dbd8199eaa95ed5f6c1252b063bc6edd1f21ae2ad0e7";
            };

            meta = {
              description = ''The mathematical constant tau'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/FranklinChen/tau";
            };
          }
      ) {};

    tau = tau_0_0_6;

    tds_0_5_4 = callPackage
      (
        {  buildMix, fetchHex, decimal_1_1_1 }:
          buildMix {
            name = "tds";
            version = "0.5.4";
            src = fetchHex {
              pkg = "tds";
              version = "0.5.4";
              sha256 =
                "110eb8d8a58d0d5fe629bfe75dacb56fa14bde441d2baffbfa2bb0c65ee66cba";
            };
            beamDeps  = [ decimal_1_1_1 ];

            meta = {
              description = ''MSSQL / TDS Driver for Ecto.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/livehelpnow/tds";
            };
          }
      ) {};

    tds = tds_0_5_4;

    tds_ecto_1_0_2 = callPackage
      (
        {
          buildMix, fetchHex, tds_0_5_4, poison_1_5_2, ecto_2_0_0_beta_0
        }:
          buildMix {
            name = "tds_ecto";
            version = "1.0.2";
            src = fetchHex {
              pkg = "tds_ecto";
              version = "1.0.2";
              sha256 =
                "c592061c97b923fd3f2a7b212eefdd7a35ddb0dac94886b8995ed03b2b9dfd53";
            };
            beamDeps  = [ tds_0_5_4 poison_1_5_2 ecto_2_0_0_beta_0 ];

            meta = {
              description = ''MSSQL / TDS Adapter for Ecto.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/livehelpnow/tds_ecto";
            };
          }
      ) {};

    tds_ecto = tds_ecto_1_0_2;

    tea_crypto_1_0_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "tea_crypto";
            version = "1.0.0";
            src = fetchHex {
              pkg = "tea_crypto";
              version = "1.0.0";
              sha256 =
                "0e7e60d0afe79f0624faa8a358a3a00c912cfa548f3632383927abca4db29cc6";
            };

            meta = {
              description = ''A TEA implementation in Erlang. '';

              homepage = "https://github.com/keichan34/tea_crypto";
            };
          }
      ) {};

    tea_crypto = tea_crypto_1_0_0;

    teamcity_exunit_formatter_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "teamcity_exunit_formatter";
            version = "0.2.0";
            src = fetchHex {
              pkg = "teamcity_exunit_formatter";
              version = "0.2.0";
              sha256 =
                "894a7791c21537bef8438bfe8706b2612e7248f1e316af0ba8c0a0d95c19f0dc";
            };

            meta = {
              longDescription = ''A formatter for Elixirs ExUnit that formats
                                as TeamCity Service Messages. Will let you track
                                test results in TeamCitys UI'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lixhq/teamcity-exunit-formatter";
            };
          }
      ) {};

    teamcity_exunit_formatter = teamcity_exunit_formatter_0_2_0;

    telebot_0_1_2 = callPackage
      (
        {  buildRebar3, fetchHex, poison_1_5_2, httpoison_0_7_5 }:
          buildRebar3 {
            name = "telebot";
            version = "0.1.2";
            src = fetchHex {
              pkg = "telebot";
              version = "0.1.2";
              sha256 =
                "cb1f3058dcf182357f1620f58ac289d685b277fb31082c1644bd5f3892ccaf78";
            };

            beamDeps  = [ poison_1_5_2 httpoison_0_7_5 ];

            meta = {
              description = ''A Telegram bot plugin system for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ottolin/telebot";
            };
          }
      ) {};

    telebot = telebot_0_1_2;

    telephonist_0_1_2 = callPackage
      (
        {  buildMix, fetchHex, immortal_0_2_0, ex_twiml_2_1_0 }:
          buildMix {
            name = "telephonist";
            version = "0.1.2";
            src = fetchHex {
              pkg = "telephonist";
              version = "0.1.2";
              sha256 =
                "c89922cfc4137dace4fd6458a6ff32f624dd9775b2e90efffbd864cdaa537a3e";
            };
            beamDeps  = [ immortal_0_2_0 ex_twiml_2_1_0 ];

            meta = {
               license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/telephonist";
            };
          }
      ) {};

    telephonist = telephonist_0_1_2;

    temp_0_3_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "temp";
            version = "0.3.0";
            src = fetchHex {
              pkg = "temp";
              version = "0.3.0";
              sha256 =
                "e1d2584bb62453e6bbb6247821909ae2d6a0fa7f59da9e4dc5581c0565d9c38b";
            };

            meta = {
              description = ''An Elixir module to easily create and use
                            temporary files and directories.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tuvistavie/elixir-temp";
            };
          }
      ) {};

    temp = temp_0_3_0;

    templates_0_0_5 = callPackage
      (
        {  buildMix, fetchHex, calliope_0_3_0 }:
          buildMix {
            name = "templates";
            version = "0.0.5";
            src = fetchHex {
              pkg = "templates";
              version = "0.0.5";
              sha256 =
                "b06a865acfb39fe17cb589ac64696127351015c9ff5d27bae0e223e770b27269";
            };
            beamDeps  = [ calliope_0_3_0 ];

            meta = {
              description = ''A helper library for adding templating to web
                            applications '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sugar-framework/templates";
            };
          }
      ) {};

    templates = templates_0_0_5;

    temporary_env_1_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "temporary_env";
            version = "1.0.1";
            src = fetchHex {
              pkg = "temporary_env";
              version = "1.0.1";
              sha256 =
                "64bd9bade983bbdbb0c59c35343faa4c86d5533a8fe596891be84d52a41bdfe0";
            };

            meta = {
              description = ''A tool for managing application env state within
                            tests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/temporary-env";
            };
          }
      ) {};

    temporary_env = temporary_env_1_0_1;

    tentabucket_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, exjsx_3_2_0 }:
          buildMix {
            name = "tentabucket";
            version = "0.0.1";
            src = fetchHex {
              pkg = "tentabucket";
              version = "0.0.1";
              sha256 =
                "5784dad17f973efcc3c4ea7672927095864d58af1f830614e4c8f06c63d4822d";
            };
            beamDeps  = [ httpoison_0_8_1 exjsx_3_2_0 ];

            meta = {
              description = ''Simple Bitbucket API client library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/duksis/tentabucket";
            };
          }
      ) {};

    tentabucket = tentabucket_0_0_1;

    tentacat_0_3_1 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, exjsx_3_2_0 }:
          buildMix {
            name = "tentacat";
            version = "0.3.1";
            src = fetchHex {
              pkg = "tentacat";
              version = "0.3.1";
              sha256 =
                "fea53526c4d1847bddfc6033cdb9ea7cdbd516e18d6bed25bfcff88b5d2d6551";
            };
            beamDeps  = [ httpoison_0_8_1 exjsx_3_2_0 ];

            meta = {
              description = ''Simple Elixir wrapper for the GitHub API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/tentacat";
            };
          }
      ) {};

    tentacat = tentacat_0_3_1;

    term_table_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "term_table";
            version = "0.0.2";
            src = fetchHex {
              pkg = "term_table";
              version = "0.0.2";
              sha256 =
                "e0a39ef8fa4343ded18bf53b381c12ae557ca2982e24351788db457b38bd7924";
            };

            meta = {
              description = ''Pretty terminal table for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ske77/term_table";
            };
          }
      ) {};

    term_table = term_table_0_0_2;

    termcap_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "termcap";
            version = "0.1.0";
            src = fetchHex {
              pkg = "termcap";
              version = "0.1.0";
              sha256 =
                "8c5167d68759bd1cd020eeaf5fd94153430fd19fa5a5fdeeb0b3129f0aba2a21";
            };

            meta = {
              description = ''Pure erlang termcap library'';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    termcap = termcap_0_1_0;

    tesla_0_2_1 = callPackage
      (
        {  buildMix, fetchHex, exjsx_3_1_0 }:
          buildMix {
            name = "tesla";
            version = "0.2.1";
            src = fetchHex {
              pkg = "tesla";
              version = "0.2.1";
              sha256 =
                "02193ace70596445a5924e33a7e89ee15378dde07197b59bb5fba9217d8afc10";
            };
            beamDeps  = [ exjsx_3_1_0 ];

            meta = {
              description = ''HTTP client library, with support for middleware
                            and multiple adapters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/monterail/tesla";
            };
          }
      ) {};

    tesla = tesla_0_2_1;

    test_times_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "test_times";
            version = "1.0.0";
            src = fetchHex {
              pkg = "test_times";
              version = "1.0.0";
              sha256 =
                "be468ea6002d247f743bd005c4ed71b5f86ae0e9b112ab52fea8c4f5db71cced";
            };

            meta = {
              description = ''Report individual test times in ascending
                            order'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pinfieldharm/test_times";
            };
          }
      ) {};

    test_times = test_times_1_0_0;

    tfidf_0_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "tfidf";
            version = "0.1.2";
            src = fetchHex {
              pkg = "tfidf";
              version = "0.1.2";
              sha256 =
                "9dc3b778a31998671a3a3e91d5abcf1c7e9794e39d97d4eba4ce4150d80e2b36";
            };

            meta = {
              description = ''Elixir implementation of tf-idf (Term
                            frequency-inverse document frequency)'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/OCannings/tf-idf";
            };
          }
      ) {};

    tfidf = tfidf_0_1_2;

    the_fuzz_0_2_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "the_fuzz";
            version = "0.2.2";
            src = fetchHex {
              pkg = "the_fuzz";
              version = "0.2.2";
              sha256 =
                "fe851aee08b2e09b6e5cc5acb08c48691f7ac27f52d8400ad55bb045e1f350c5";
            };

            meta = {
              longDescription = ''String metrics and phonetic algorithms for
                                Elixir (e.g. Dice/Sorensen, Hamming, Jaccard,
                                Jaro, Jaro-Winkler, Levenshtein, Metaphone,
                                N-Gram, NYSIIS, Overlap, Ratcliff/Obershelp,
                                Refined NYSIIS, Refined Soundex, Soundex,
                                Tversky, Tanimoto, Weighted Levenshtein). Based
                                Heavily on StringMetrics for Scala written by
                                Rocky Madden.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/smashedtoatoms/the_fuzz";
            };
          }
      ) {};

    the_fuzz = the_fuzz_0_2_2;

    theriac_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, fitex_0_0_1 }:
          buildMix {
            name = "theriac";
            version = "0.0.1";
            src = fetchHex {
              pkg = "theriac";
              version = "0.0.1";
              sha256 =
                "c67162d0bb02629cf3502adba2680c59c058ecbc3dda821384ee00e903d6484f";
            };
            beamDeps  = [ fitex_0_0_1 ];

            meta = {
              description = ''Implementation of clojure style transducers in
                            elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/timdeputter/theriac";
            };
          }
      ) {};

    theriac = theriac_0_0_1;

    thrift_1_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "thrift";
            version = "1.2.0";
            src = fetchHex {
              pkg = "thrift";
              version = "1.2.0";
              sha256 =
                "c16a8192125b8067ff4e8d0391ae8d59e3428176ebda381b01db782dab8177e7";
            };

            meta = {
              longDescription = ''A collection of utilities for working with
                                Thrift in Elixir. Provides a copy of the Erlang
                                Thrift runtime.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pinterest/elixir-thrift";
            };
          }
      ) {};

    thrift = thrift_1_2_0;

    time_distance_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, timex_1_0_1 }:
          buildMix {
            name = "time_distance";
            version = "0.0.1";
            src = fetchHex {
              pkg = "time_distance";
              version = "0.0.1";
              sha256 =
                "41ebe658882f2defd2cd472960e5a31b18d7ea2a4520c06907f7f2093d030e58";
            };
            beamDeps  = [ timex_1_0_1 ];

            meta = {
              longDescription = ''Show the difference between two specified
                                times, or between a specified time and now in
                                words (eg. 1 week ago)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aussiegeek/time_distance";
            };
          }
      ) {};

    time_distance = time_distance_0_0_1;

    time_seer_0_0_5 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "time_seer";
            version = "0.0.5";
            src = fetchHex {
              pkg = "time_seer";
              version = "0.0.5";
              sha256 =
                "70a70fe4d6032d9a0cc41bfede0ed88e1cad1430de29d7dbb0b942f2d4b8768f";
            };

            meta = {
              longDescription = ''TimeSeer is an Elixir library for parsing
                                dates and times and returning Erlang style date
                                and time tuples. Eg. "15:12:07" "2:42pm"
                                "24/12/2014" will become {15,12,7}, {14,42,0},
                                and {2014,12,24} respectively.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/time_seer";
            };
          }
      ) {};

    time_seer = time_seer_0_0_5;

    timex_0_12_9 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "timex";
            version = "0.12.9";
            src = fetchHex {
              pkg = "timex";
              version = "0.12.9";
              sha256 =
                "6d5be2480b6aa55b452acaffd1fc91e576ffb1e0bc0f04358c8869a47af9ec60";
            };

            meta = {
              longDescription = ''A comprehensive date/time library for Elixir
                                Fully timezone-aware, using the Olson Timezone
                                database - Supports local-timezone lookups -
                                Supports POSIX-style timezones - Supports
                                lookups of any Olson tzdata timezones - Supports
                                arbitrary shifts across time and through
                                timezones, including ambiguous time periods,
                                non-existent time periods, and leaps. Provides
                                both Date and DateTime types, for use depending
                                on your needs, with an AmbiguousDateTime type
                                for handling those DateTime values which fall on
                                an ambigouos timezone period. Extendable via
                                Convertable and Comparable protocols, so you can
                                use Timex with your own types! Locale-aware,
                                currently only supports "ru" and "en", but more
                                will be added over time. Provides a broad array
                                of date/time helper functions -
                                shifting/adding/subtracting - diffing -
                                comparing/before?/after?/between? - conversions
                                - get day of week, week of year, ISO dates, and
                                names for each - get the beginning or ending of
                                a given week - get the beginning or ending of a
                                year, quarter, week, or month - get days in a
                                given month - normalization Provides a broad
                                array of time-specific helpers - convert to and
                                from units: weeks, days, hours, seconds, ms, and
                                microseconds - measure execution time -
                                diff/compare - to/from 12/24 hour clock times -
                                add/subtract Safe date/time string formatting
                                and parsing - Informative parser errors -
                                Supports strftime, as well as an easier to read
                                formatter, i.e. `{ISO:Basic}`, `{YYYY}` -
                                Supports many formats out of the box: ISO8601
                                basic and extended, RFC822, RFC1123, RFC3339,
                                ANSIC, UNIX - Relative time formatter (i.e. "2
                                years from now") Extendable - Protocols for core
                                modules like the parser tokenizer - Easy to wrap
                                to add extra functionality Can be used with
                                Phoenix and Ecto when used with timex_ecto
                                package'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/timex";
            };
          }
      ) {};

    timex_0_13_5 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "timex";
            version = "0.13.5";
            src = fetchHex {
              pkg = "timex";
              version = "0.13.5";
              sha256 =
                "2d553f9e4b5ed7f7f9743012b6be8fd5bdf5d727e93951cd5be220dcbf161f75";
            };

            meta = {
              longDescription = ''A comprehensive date/time library for Elixir
                                Fully timezone-aware, using the Olson Timezone
                                database - Supports local-timezone lookups -
                                Supports POSIX-style timezones - Supports
                                lookups of any Olson tzdata timezones - Supports
                                arbitrary shifts across time and through
                                timezones, including ambiguous time periods,
                                non-existent time periods, and leaps. Provides
                                both Date and DateTime types, for use depending
                                on your needs, with an AmbiguousDateTime type
                                for handling those DateTime values which fall on
                                an ambigouos timezone period. Extendable via
                                Convertable and Comparable protocols, so you can
                                use Timex with your own types! Locale-aware,
                                currently only supports "ru" and "en", but more
                                will be added over time. Provides a broad array
                                of date/time helper functions -
                                shifting/adding/subtracting - diffing -
                                comparing/before?/after?/between? - conversions
                                - get day of week, week of year, ISO dates, and
                                names for each - get the beginning or ending of
                                a given week - get the beginning or ending of a
                                year, quarter, week, or month - get days in a
                                given month - normalization Provides a broad
                                array of time-specific helpers - convert to and
                                from units: weeks, days, hours, seconds, ms, and
                                microseconds - measure execution time -
                                diff/compare - to/from 12/24 hour clock times -
                                add/subtract Safe date/time string formatting
                                and parsing - Informative parser errors -
                                Supports strftime, as well as an easier to read
                                formatter, i.e. `{ISO:Basic}`, `{YYYY}` -
                                Supports many formats out of the box: ISO8601
                                basic and extended, RFC822, RFC1123, RFC3339,
                                ANSIC, UNIX - Relative time formatter (i.e. "2
                                years from now") Extendable - Protocols for core
                                modules like the parser tokenizer - Easy to wrap
                                to add extra functionality Can be used with
                                Phoenix and Ecto when used with timex_ecto
                                package'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/timex";
            };
          }
      ) {};

    timex_0_16_2 = callPackage
      (
        {  buildMix, fetchHex, tzdata_0_1_8 }:
          buildMix {
            name = "timex";
            version = "0.16.2";
            src = fetchHex {
              pkg = "timex";
              version = "0.16.2";
              sha256 =
                "951b740468c5de3495ce750d33c9df313100de75060242fd2dfe308f40706793";
            };
            beamDeps  = [ tzdata_0_1_8 ];

            meta = {
              longDescription = ''A comprehensive date/time library for Elixir
                                Fully timezone-aware, using the Olson Timezone
                                database - Supports local-timezone lookups -
                                Supports POSIX-style timezones - Supports
                                lookups of any Olson tzdata timezones - Supports
                                arbitrary shifts across time and through
                                timezones, including ambiguous time periods,
                                non-existent time periods, and leaps. Provides
                                both Date and DateTime types, for use depending
                                on your needs, with an AmbiguousDateTime type
                                for handling those DateTime values which fall on
                                an ambigouos timezone period. Extendable via
                                Convertable and Comparable protocols, so you can
                                use Timex with your own types! Locale-aware,
                                currently only supports "ru" and "en", but more
                                will be added over time. Provides a broad array
                                of date/time helper functions -
                                shifting/adding/subtracting - diffing -
                                comparing/before?/after?/between? - conversions
                                - get day of week, week of year, ISO dates, and
                                names for each - get the beginning or ending of
                                a given week - get the beginning or ending of a
                                year, quarter, week, or month - get days in a
                                given month - normalization Provides a broad
                                array of time-specific helpers - convert to and
                                from units: weeks, days, hours, seconds, ms, and
                                microseconds - measure execution time -
                                diff/compare - to/from 12/24 hour clock times -
                                add/subtract Safe date/time string formatting
                                and parsing - Informative parser errors -
                                Supports strftime, as well as an easier to read
                                formatter, i.e. `{ISO:Basic}`, `{YYYY}` -
                                Supports many formats out of the box: ISO8601
                                basic and extended, RFC822, RFC1123, RFC3339,
                                ANSIC, UNIX - Relative time formatter (i.e. "2
                                years from now") Extendable - Protocols for core
                                modules like the parser tokenizer - Easy to wrap
                                to add extra functionality Can be used with
                                Phoenix and Ecto when used with timex_ecto
                                package'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/timex";
            };
          }
      ) {};

    timex_0_19_5 = callPackage
      (
        {  buildMix, fetchHex, tzdata_0_5_6, combine_0_7_0 }:
          buildMix {
            name = "timex";
            version = "0.19.5";
            src = fetchHex {
              pkg = "timex";
              version = "0.19.5";
              sha256 =
                "be1985ab99a6aebc3672b1d82b27e409c9a7af4658f3cc5900fa8754e159b02c";
            };
            beamDeps  = [ tzdata_0_5_6 combine_0_7_0 ];

            meta = {
              longDescription = ''A comprehensive date/time library for Elixir
                                Fully timezone-aware, using the Olson Timezone
                                database - Supports local-timezone lookups -
                                Supports POSIX-style timezones - Supports
                                lookups of any Olson tzdata timezones - Supports
                                arbitrary shifts across time and through
                                timezones, including ambiguous time periods,
                                non-existent time periods, and leaps. Provides
                                both Date and DateTime types, for use depending
                                on your needs, with an AmbiguousDateTime type
                                for handling those DateTime values which fall on
                                an ambigouos timezone period. Extendable via
                                Convertable and Comparable protocols, so you can
                                use Timex with your own types! Locale-aware,
                                currently only supports "ru" and "en", but more
                                will be added over time. Provides a broad array
                                of date/time helper functions -
                                shifting/adding/subtracting - diffing -
                                comparing/before?/after?/between? - conversions
                                - get day of week, week of year, ISO dates, and
                                names for each - get the beginning or ending of
                                a given week - get the beginning or ending of a
                                year, quarter, week, or month - get days in a
                                given month - normalization Provides a broad
                                array of time-specific helpers - convert to and
                                from units: weeks, days, hours, seconds, ms, and
                                microseconds - measure execution time -
                                diff/compare - to/from 12/24 hour clock times -
                                add/subtract Safe date/time string formatting
                                and parsing - Informative parser errors -
                                Supports strftime, as well as an easier to read
                                formatter, i.e. `{ISO:Basic}`, `{YYYY}` -
                                Supports many formats out of the box: ISO8601
                                basic and extended, RFC822, RFC1123, RFC3339,
                                ANSIC, UNIX - Relative time formatter (i.e. "2
                                years from now") Extendable - Protocols for core
                                modules like the parser tokenizer - Easy to wrap
                                to add extra functionality Can be used with
                                Phoenix and Ecto when used with timex_ecto
                                package'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/timex";
            };
          }
      ) {};

    timex_1_0_0_rc4 = callPackage
      (
        {  buildMix, fetchHex, tzdata_0_1_8, combine_0_7_0 }:
          buildMix {
            name = "timex";
            version = "1.0.0-rc4";
            src = fetchHex {
              pkg = "timex";
              version = "1.0.0-rc4";
              sha256 =
                "3da1356901fe205455404c83d2ea7804b63ed47e3a2cdb428545e568e05d6885";
            };
            beamDeps  = [ tzdata_0_1_8 combine_0_7_0 ];

            meta = {
              longDescription = ''A comprehensive date/time library for Elixir
                                Fully timezone-aware, using the Olson Timezone
                                database - Supports local-timezone lookups -
                                Supports POSIX-style timezones - Supports
                                lookups of any Olson tzdata timezones - Supports
                                arbitrary shifts across time and through
                                timezones, including ambiguous time periods,
                                non-existent time periods, and leaps. Provides
                                both Date and DateTime types, for use depending
                                on your needs, with an AmbiguousDateTime type
                                for handling those DateTime values which fall on
                                an ambigouos timezone period. Extendable via
                                Convertable and Comparable protocols, so you can
                                use Timex with your own types! Locale-aware,
                                currently only supports "ru" and "en", but more
                                will be added over time. Provides a broad array
                                of date/time helper functions -
                                shifting/adding/subtracting - diffing -
                                comparing/before?/after?/between? - conversions
                                - get day of week, week of year, ISO dates, and
                                names for each - get the beginning or ending of
                                a given week - get the beginning or ending of a
                                year, quarter, week, or month - get days in a
                                given month - normalization Provides a broad
                                array of time-specific helpers - convert to and
                                from units: weeks, days, hours, seconds, ms, and
                                microseconds - measure execution time -
                                diff/compare - to/from 12/24 hour clock times -
                                add/subtract Safe date/time string formatting
                                and parsing - Informative parser errors -
                                Supports strftime, as well as an easier to read
                                formatter, i.e. `{ISO:Basic}`, `{YYYY}` -
                                Supports many formats out of the box: ISO8601
                                basic and extended, RFC822, RFC1123, RFC3339,
                                ANSIC, UNIX - Relative time formatter (i.e. "2
                                years from now") Extendable - Protocols for core
                                modules like the parser tokenizer - Easy to wrap
                                to add extra functionality Can be used with
                                Phoenix and Ecto when used with timex_ecto
                                package'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/timex";
            };
          }
      ) {};

    timex_1_0_1 = callPackage
      (
        {  buildMix, fetchHex, tzdata_0_1_8, combine_0_7_0 }:
          buildMix {
            name = "timex";
            version = "1.0.1";
            src = fetchHex {
              pkg = "timex";
              version = "1.0.1";
              sha256 =
                "6124f84b38f9ee526df91abca6d14bf503cc014b1f3c86d0d3412192e2b12d07";
            };
            beamDeps  = [ tzdata_0_1_8 combine_0_7_0 ];

            meta = {
              longDescription = ''A comprehensive date/time library for Elixir
                                Fully timezone-aware, using the Olson Timezone
                                database - Supports local-timezone lookups -
                                Supports POSIX-style timezones - Supports
                                lookups of any Olson tzdata timezones - Supports
                                arbitrary shifts across time and through
                                timezones, including ambiguous time periods,
                                non-existent time periods, and leaps. Provides
                                both Date and DateTime types, for use depending
                                on your needs, with an AmbiguousDateTime type
                                for handling those DateTime values which fall on
                                an ambigouos timezone period. Extendable via
                                Convertable and Comparable protocols, so you can
                                use Timex with your own types! Locale-aware,
                                currently only supports "ru" and "en", but more
                                will be added over time. Provides a broad array
                                of date/time helper functions -
                                shifting/adding/subtracting - diffing -
                                comparing/before?/after?/between? - conversions
                                - get day of week, week of year, ISO dates, and
                                names for each - get the beginning or ending of
                                a given week - get the beginning or ending of a
                                year, quarter, week, or month - get days in a
                                given month - normalization Provides a broad
                                array of time-specific helpers - convert to and
                                from units: weeks, days, hours, seconds, ms, and
                                microseconds - measure execution time -
                                diff/compare - to/from 12/24 hour clock times -
                                add/subtract Safe date/time string formatting
                                and parsing - Informative parser errors -
                                Supports strftime, as well as an easier to read
                                formatter, i.e. `{ISO:Basic}`, `{YYYY}` -
                                Supports many formats out of the box: ISO8601
                                basic and extended, RFC822, RFC1123, RFC3339,
                                ANSIC, UNIX - Relative time formatter (i.e. "2
                                years from now") Extendable - Protocols for core
                                modules like the parser tokenizer - Easy to wrap
                                to add extra functionality Can be used with
                                Phoenix and Ecto when used with timex_ecto
                                package'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/timex";
            };
          }
      ) {};

    timex = timex_1_0_1;

    timex_ecto_0_5_0 = callPackage
      (
        {  buildMix, fetchHex, timex_0_19_5, ecto_2_0_0_beta_0 }:
          buildMix {
            name = "timex_ecto";
            version = "0.5.0";
            src = fetchHex {
              pkg = "timex_ecto";
              version = "0.5.0";
              sha256 =
                "6fe5ffbcfd3abeda54a1ce01206e982d7470c095520694c3cc2637d558e723b0";
            };
            beamDeps  = [ timex_0_19_5 ecto_2_0_0_beta_0 ];

            meta = {
              description = ''A plugin for Ecto and Timex which allows use of
                            Timex types with Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/timex_ecto";
            };
          }
      ) {};

    timex_ecto_0_9_0 = callPackage
      (
        {  buildMix, fetchHex, timex_1_0_1, ecto_2_0_0_beta_0 }:
          buildMix {
            name = "timex_ecto";
            version = "0.9.0";
            src = fetchHex {
              pkg = "timex_ecto";
              version = "0.9.0";
              sha256 =
                "454cbd67b18fa75485369b266c0142a2a5d78bb3d4078cd10dc2ec99f1088232";
            };
            beamDeps  = [ timex_1_0_1 ecto_2_0_0_beta_0 ];

            meta = {
              description = ''A plugin for Ecto and Timex which allows use of
                            Timex types with Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/timex_ecto";
            };
          }
      ) {};

    timex_ecto = timex_ecto_0_9_0;

    timex_interval_0_6_0 = callPackage
      (
        {  buildMix, fetchHex, timex_1_0_0_rc4 }:
          buildMix {
            name = "timex_interval";
            version = "0.6.0";
            src = fetchHex {
              pkg = "timex_interval";
              version = "0.6.0";
              sha256 =
                "c2d932e892cb15dacabafdc456040208c285c6d00087f688282d6693a6bbb04e";
            };
            beamDeps  = [ timex_1_0_0_rc4 ];

            meta = {
              description = ''A date/time interval library for Elixir projects,
                            based on Timex.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/atabary/timex-interval";
            };
          }
      ) {};

    timex_interval = timex_interval_0_6_0;

    tinymt_0_3_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "tinymt";
            version = "0.3.1";
            src = fetchHex {
              pkg = "tinymt";
              version = "0.3.1";
              sha256 =
                "9de8fcedf254661bc4aa550aac317e28be35d4a5d91adf3fa3689dfad6cc1e5a";
            };

            meta = {
              description = ''Tiny Mersenne Twister (TinyMT) for Erlang'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/jj1bdx/tinymt-erlang/";
            };
          }
      ) {};

    tinymt = tinymt_0_3_1;

    tirexs_0_8_0_beta1 = callPackage
      (
        {  buildMix, fetchHex, exjsx_3_2_0 }:
          buildMix {
            name = "tirexs";
            version = "0.8.0-beta1";
            src = fetchHex {
              pkg = "tirexs";
              version = "0.8.0-beta1";
              sha256 =
                "3d7187e73f9ac85204b45ecd81a49b607415d2aecfe628d23dfd45baeb9486ee";
            };
            beamDeps  = [ exjsx_3_2_0 ];

            meta = {
              description = ''An Elixir flavored DSL for building JSON based
                            queries to Elasticsearch engine'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Zatvobor/tirexs";
            };
          }
      ) {};

    tirexs = tirexs_0_8_0_beta1;

    tmdb_0_0_6 = callPackage
      (
        {
          buildRebar3, fetchHex, poison_1_4_0, httpoison_0_8_1, exjsx_3_1_0
        }:
          buildRebar3 {
            name = "tmdb";
            version = "0.0.6";
            src = fetchHex {
              pkg = "tmdb";
              version = "0.0.6";
              sha256 =
                "4cbad6ffa556a0eeecb22c3960d47451e918313e5651808439f039403dd38d3a";
            };

            beamDeps  = [ poison_1_4_0 httpoison_0_8_1 exjsx_3_1_0 ];

            meta = {    };
          }
      ) {};

    tmdb = tmdb_0_0_6;

    todo_1_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "todo";
            version = "1.0.1";
            src = fetchHex {
              pkg = "todo";
              version = "1.0.1";
              sha256 =
                "40b40fe538ff54d090d2992b107361de7b1a18ef3ad41b69ec2bb5b327e951ba";
            };

            meta = {
              description = ''A small TODO comments utility.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niahoo/elixir-todo";
            };
          }
      ) {};

    todo = todo_1_0_1;

    tomlex_0_0_4 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "tomlex";
            version = "0.0.4";
            src = fetchHex {
              pkg = "tomlex";
              version = "0.0.4";
              sha256 =
                "4aa86ca5ede2147156697267a72bafb425fea2ad9c3a5c0bf6fe7f1e57e9ffa9";
            };

            meta = {
              description = ''A TOML parser for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zamith/tomlex";
            };
          }
      ) {};

    tomlex = tomlex_0_0_4;

    toniq_1_0_4 = callPackage
      (
        {  buildMix, fetchHex, uuid_1_1_3, exredis_0_2_3 }:
          buildMix {
            name = "toniq";
            version = "1.0.4";
            src = fetchHex {
              pkg = "toniq";
              version = "1.0.4";
              sha256 =
                "77c88b11b00180a7eacd0a7b722c89d4abf22fae818d50aa955d401f91c07c93";
            };
            beamDeps  = [ uuid_1_1_3 exredis_0_2_3 ];

            meta = {
              longDescription = ''Simple and reliable background job processing
                                library for Elixir. Has persistence, retries,
                                concurrency limiting, error handling and is
                                heroku friendly.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joakimk/toniq";
            };
          }
      ) {};

    toniq = toniq_1_0_4;

    towel_0_2_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "towel";
            version = "0.2.1";
            src = fetchHex {
              pkg = "towel";
              version = "0.2.1";
              sha256 =
                "e7b7c5e7e6d8df9e781e130d1defccc9a27f888f7b95c132d8ccd1d6957d3b7a";
            };

            meta = {
              description = ''A delightfully simple monad library that`s
                            written for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/knrz/towel";
            };
          }
      ) {};

    towel = towel_0_2_1;

    tqdm_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "tqdm";
            version = "0.0.1";
            src = fetchHex {
              pkg = "tqdm";
              version = "0.0.1";
              sha256 =
                "70636f54515581abefb88020a5393b87a64186b7fa4a59a50e52854f999319bc";
            };

            meta = {
              longDescription = ''Add a progress bar to your enumerables
                                (Lists, Maps, Streams, Ranges, etc.) in a
                                second.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antipax/tqdm_elixir";
            };
          }
      ) {};

    tqdm = tqdm_0_0_1;

    tracker_request_0_0_4 = callPackage
      (
        {  buildMix, fetchHex, bencoder_0_0_7 }:
          buildMix {
            name = "tracker_request";
            version = "0.0.4";
            src = fetchHex {
              pkg = "tracker_request";
              version = "0.0.4";
              sha256 =
                "5a4b20ed43589e9a7bd66ae1a72e5df983489b2d07ae990b32758e3353281584";
            };
            beamDeps  = [ bencoder_0_0_7 ];

            meta = {
              description = ''Deal with bittorrent tracker requests and
                            responses'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alehander42/tracker_request";
            };
          }
      ) {};

    tracker_request = tracker_request_0_0_4;

    trackline_0_0_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          timex_1_0_1,
          exml_0_1_0,
          exmerl_0_1_1,
          erlsom_1_2_1,
          apex_0_3_7
        }:
          buildMix {
            name = "trackline";
            version = "0.0.1";
            src = fetchHex {
              pkg = "trackline";
              version = "0.0.1";
              sha256 =
                "42ee5d56b2ec0c55715e7f03a9aacd6d7ce8543519e9ec696335348eb1a24f7c";
            };
            beamDeps  = [
                          timex_1_0_1
                          exml_0_1_0
                          exmerl_0_1_1
                          erlsom_1_2_1
                          apex_0_3_7
                        ];

            meta = {
              description = ''A GPX parser for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrewhao/trackline";
            };
          }
      ) {};

    trackline = trackline_0_0_1;

    tradie_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "tradie";
            version = "0.0.1";
            src = fetchHex {
              pkg = "tradie";
              version = "0.0.1";
              sha256 =
                "d317c61c9bd9ab46184df8036057855e676d8598905c6708b9a9e26af3b7fd04";
            };

            meta = {
              longDescription = ''Execute multiple tasks in parallel, allowing
                                retry for each task, and a global timeout. Based
                                loosely on
                                http://theerlangelist.com/article/beyond_taskasync.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/madlep/tradie";
            };
          }
      ) {};

    tradie = tradie_0_0_1;

    trailing_format_plug_0_0_4 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, cowboy_1_0_4 }:
          buildMix {
            name = "trailing_format_plug";
            version = "0.0.4";
            src = fetchHex {
              pkg = "trailing_format_plug";
              version = "0.0.4";
              sha256 =
                "16e2485b7069c8e025460d183d4711d9c5bbf46ae532dde859cc6623d12bfc71";
            };
            beamDeps  = [ plug_1_1_1 cowboy_1_0_4 ];

            meta = {
              longDescription = ''An elixir plug to support legacy APIs that
                                use a rails-like trailing format:
                                http://api.dev/resources.format'';
              license = stdenv.lib.licenses.asl20;
              homepage = "http://github.com/mschae/trailing_format_plug";
            };
          }
      ) {};

    trailing_format_plug = trailing_format_plug_0_0_4;

    traitify_elixir_0_1_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_1_1_1,
          httpoison_0_7_5,
          hackney_1_0_6,
          exvcr_0_3_9,
          ex_conf_0_1_3
        }:
          buildMix {
            name = "traitify_elixir";
            version = "0.1.1";
            src = fetchHex {
              pkg = "traitify_elixir";
              version = "0.1.1";
              sha256 =
                "ff8568415b70f2fe6548add244cb06c9a9d8c03f0e3d9568730b926f6a9cdd95";
            };
            beamDeps  = [
                          poison_1_1_1
                          httpoison_0_7_5
                          hackney_1_0_6
                          exvcr_0_3_9
                          ex_conf_0_1_3
                        ];

            meta = {
              description = ''An Elixir client library for the Traitify API '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/traitify/traitify_elixir";
            };
          }
      ) {};

    traitify_elixir = traitify_elixir_0_1_1;

    transducer_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "transducer";
            version = "0.1.0";
            src = fetchHex {
              pkg = "transducer";
              version = "0.1.0";
              sha256 =
                "89533238e42bace715485c5113bb5c39beecb333c00f4624ae85d5c0f6e96db4";
            };

            meta = {
              longDescription = ''Composable algorithmic transformations.
                                Transducers let you combine reduction operations
                                like `map`, `filter`, `take_while`, `take`, and
                                so on into a single reducing function. As with
                                Stream, but in contrast to Enum, all operations
                                are performed for each item before the next item
                                in the enumerable is processed. One difference
                                with the Stream module is that the transducers`
                                reducing functions don`t have to produce an
                                enumerable, while Stream module transformations
                                always do.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/garyposter/elixir-transducer";
            };
          }
      ) {};

    transducer = transducer_0_1_0;

    travis_ex_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "travis_ex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "travis_ex";
              version = "0.0.2";
              sha256 =
                "80589ec01596dfc1e02cef61ce0adc3c9b73977b56a528e214c37af079efa10a";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Travis-ci API client library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/duksis/travis_ex";
            };
          }
      ) {};

    travis_ex = travis_ex_0_0_2;

    trie_1_5_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "trie";
            version = "1.5.0";
            src = fetchHex {
              pkg = "trie";
              version = "1.5.0";
              sha256 =
                "613981536e33f58d92e44bd31801376f71deee0e57c63372fe8ab5fbbc37f7dc";
            };

            meta = {
              description = ''Erlang Trie Implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/okeuday/trie";
            };
          }
      ) {};

    trie_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "trie";
            version = "1.5.1";
            src = fetchHex {
              pkg = "trie";
              version = "1.5.1";
              sha256 =
                "4b845dccfca8962b90584e98d270e2ff43e2e181bb046c4aae0e0f457679f98d";
            };

            meta = {
              description = ''Erlang Trie Implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/okeuday/trie";
            };
          }
      ) {};

    trie = trie_1_5_1;

    trot_0_5_3 = callPackage
      (
        {
          buildMix,
          fetchHex,
          poison_1_5_2,
          plug_heartbeat_0_2_0,
          plug_0_14_0,
          cowboy_1_0_4,
          calliope_0_3_0
        }:
          buildMix {
            name = "trot";
            version = "0.5.3";
            src = fetchHex {
              pkg = "trot";
              version = "0.5.3";
              sha256 =
                "982a4ff3a0fffe1e9cc752313fd4c45487fdd484dde7265728da4579c29354e1";
            };
            beamDeps  = [
                          poison_1_5_2
                          plug_heartbeat_0_2_0
                          plug_0_14_0
                          cowboy_1_0_4
                          calliope_0_3_0
                        ];

            meta = {
              description = ''A web micro-framework based on Plug and
                            Cowboy.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/hexedpackets/trot";
            };
          }
      ) {};

    trot = trot_0_5_3;

    tsuru_1_0_2 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "tsuru";
            version = "1.0.2";
            src = fetchHex {
              pkg = "tsuru";
              version = "1.0.2";
              sha256 =
                "b586ad8d47799a086e4225494f5e3cf4e306ca255a173a4b48fe51d542cefb6b";
            };

            meta = {
              description = ''A collection of useful tools for Erlang
                            applications'';
              license = stdenv.lib.licenses.mit;
            };
          }
      ) {};

    tsuru = tsuru_1_0_2;

    tuco_tuco_0_8_1 = callPackage
      (
        {  buildMix, fetchHex, webdriver_0_8_1 }:
          buildMix {
            name = "tuco_tuco";
            version = "0.8.1";
            src = fetchHex {
              pkg = "tuco_tuco";
              version = "0.8.1";
              sha256 =
                "9c61ae99070047928940100e4bc4808583eae656cfaae03e7d6b7a3b3cc23c74";
            };
            beamDeps  = [ webdriver_0_8_1 ];

            meta = {
              description = ''Testing tool for web applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stuart/tuco-tuco";
            };
          }
      ) {};

    tuco_tuco = tuco_tuco_0_8_1;

    twittex_0_0_4 = callPackage
      (
        {  buildMix, fetchHex, oauther_1_0_2, oauth2_0_5_0 }:
          buildMix {
            name = "twittex";
            version = "0.0.4";
            src = fetchHex {
              pkg = "twittex";
              version = "0.0.4";
              sha256 =
                "2cfe144fe70ed0d0fcfbc18f232a54a844d1ef79db74cd385c8640e40ea30aa7";
            };
            beamDeps  = [ oauther_1_0_2 oauth2_0_5_0 ];

            meta = {
              description = ''Twitter client library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/almightycouch/twittex";
            };
          }
      ) {};

    twittex = twittex_0_0_4;

    type_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "type";
            version = "0.0.2";
            src = fetchHex {
              pkg = "type";
              version = "0.0.2";
              sha256 =
                "1553ec18df7781cc1144477e075ac3c907aa7900db308d9d43cf7cfbeeb7a8ac";
            };

            meta = {
              description = ''A module for checking the type of an argument'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffreybaird/type";
            };
          }
      ) {};

    type = type_0_0_2;

    typeformx_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "typeformx";
            version = "0.0.1";
            src = fetchHex {
              pkg = "typeformx";
              version = "0.0.1";
              sha256 =
                "8f6f1613f53f8c5012eb6d05276f5d305bdb9d4b0e94926680b536d0e1d94a62";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''An Elixir client library for the Typeform API
                            (typeform.io)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/netflakes/TypeformX";
            };
          }
      ) {};

    typeformx = typeformx_0_0_1;

    tzdata_0_1_8 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "tzdata";
            version = "0.1.8";
            src = fetchHex {
              pkg = "tzdata";
              version = "0.1.8";
              sha256 =
                "68af93cc1e0e0e6be76a583faaf15d57972a1afbf1e39f9d70524da87dfae825";
            };

            meta = {
              description = ''Tzdata is a parser and library for the tz
                            database.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/tzdata";
            };
          }
      ) {};

    tzdata_0_5_6 = callPackage
      (
        {  buildMix, fetchHex, hackney_1_4_8 }:
          buildMix {
            name = "tzdata";
            version = "0.5.6";
            src = fetchHex {
              pkg = "tzdata";
              version = "0.5.6";
              sha256 =
                "e2be18ea3e7c7dc83520b0eed369bbeea0c478299590524009a9dbaf0a9bfb04";
            };
            beamDeps  = [ hackney_1_4_8 ];

            meta = {
              description = ''Tzdata is a parser and library for the tz
                            database.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/tzdata";
            };
          }
      ) {};

    tzdata = tzdata_0_5_6;

    ua_inspector_0_10_0 = callPackage
      (
        {  buildMix, fetchHex, poolboy_1_5_1 }:
          buildMix {
            name = "ua_inspector";
            version = "0.10.0";
            src = fetchHex {
              pkg = "ua_inspector";
              version = "0.10.0";
              sha256 =
                "10f53183f10fcdbafb912e32798decec31fa0477fb4ddaa48048467936231d9a";
            };
            beamDeps  = [ poolboy_1_5_1 ];

            meta = {
              description = ''User agent parser library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixytics/ua_inspector";
            };
          }
      ) {};

    ua_inspector = ua_inspector_0_10_0;

    uber_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "uber";
            version = "0.1.0";
            src = fetchHex {
              pkg = "uber";
              version = "0.1.0";
              sha256 =
                "bf3dde22ad6207577ea1093649394d968ef94725fdc56d5ea6afd22d12886d9a";
            };

            meta = {
              description = ''Utilities for working with the UBER hypermedia
                            format'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gamache/uber.ex";
            };
          }
      ) {};

    uber = uber_0_1_0;

    ucol_nif_1_1_5 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "ucol_nif";
            version = "1.1.5";
            src = fetchHex {
              pkg = "ucol_nif";
              version = "1.1.5";
              sha256 =
                "a6fad2b92dfe84a2654a085163de39cae88762d14c414cdeaeb66ac41d5c156e";
            };
            compilePorts = true;

            meta = {
              description = ''ICU based collation module'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/refuge/ucol_nif";
            };
          }
      ) {};

    ucol_nif = ucol_nif_1_1_5;

    udpflux_0_0_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "udpflux";
            version = "0.0.2";
            src = fetchHex {
              pkg = "udpflux";
              version = "0.0.2";
              sha256 =
                "0a6d0003b818364bad9ed8bc55b8789b8fc129d055799cd517a551445fe0649e";
            };

            meta = {
              description = ''An opinionated UDP-only InfluxDB client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/timbuchwaldt/udpflux";
            };
          }
      ) {};

    udpflux = udpflux_0_0_2;

    ueberauth_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "ueberauth";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ueberauth";
              version = "0.2.0";
              sha256 =
                "d6ee9cfe96be0e2b4005cb482b8e29c20ae0d6f7332ea9f686397c4ab20bf4de";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              description = ''An Elixir Authentication System for Plug-based
                            Web Applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/ueberauth";
            };
          }
      ) {};

    ueberauth = ueberauth_0_2_0;

    ueberauth_facebook_0_3_2 = callPackage
      (
        {  buildMix, fetchHex, ueberauth_0_2_0, oauth2_0_5_0 }:
          buildMix {
            name = "ueberauth_facebook";
            version = "0.3.2";
            src = fetchHex {
              pkg = "ueberauth_facebook";
              version = "0.3.2";
              sha256 =
                "d766a41a0b26bccfc1371b776bfcfb760f09639ac3de9aa8885023af9e5641c5";
            };
            beamDeps  = [ ueberauth_0_2_0 oauth2_0_5_0 ];

            meta = {
              description = ''An Uberauth strategy for Facebook
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/ueberauth_facebook";
            };
          }
      ) {};

    ueberauth_facebook = ueberauth_facebook_0_3_2;

    ueberauth_fitbit_0_2_1 = callPackage
      (
        {  buildMix, fetchHex, ueberauth_0_2_0, oauth2_0_5_0 }:
          buildMix {
            name = "ueberauth_fitbit";
            version = "0.2.1";
            src = fetchHex {
              pkg = "ueberauth_fitbit";
              version = "0.2.1";
              sha256 =
                "669e2bba8f498651dc4c31fbb978179b9d344264ace2ff8f53e007cc6d243956";
            };
            beamDeps  = [ ueberauth_0_2_0 oauth2_0_5_0 ];

            meta = {
              description = ''An Ueberauth strategy for Fitbit OAuth2
                            authentication'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vinniefranco/ueberauth_fitbit";
            };
          }
      ) {};

    ueberauth_fitbit = ueberauth_fitbit_0_2_1;

    ueberauth_github_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, ueberauth_0_2_0, oauth2_0_5_0 }:
          buildMix {
            name = "ueberauth_github";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ueberauth_github";
              version = "0.2.0";
              sha256 =
                "b12b3dae8c097d5cd57a3e1cd97286b796ee36794b031f92a76e848f572cb4ab";
            };
            beamDeps  = [ ueberauth_0_2_0 oauth2_0_5_0 ];

            meta = {
              description = ''An Ueberauth strategy for using Github to
                            authenticate your users.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/ueberauth_github";
            };
          }
      ) {};

    ueberauth_github = ueberauth_github_0_2_0;

    ueberauth_google_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, ueberauth_0_2_0, oauth2_0_5_0 }:
          buildMix {
            name = "ueberauth_google";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ueberauth_google";
              version = "0.2.0";
              sha256 =
                "b57f13534f37b7062df5a696976453af1faabc00d608ccdce29f9289164fce44";
            };
            beamDeps  = [ ueberauth_0_2_0 oauth2_0_5_0 ];

            meta = {
              description = ''An Uberauth strategy for Google
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/ueberauth_google";
            };
          }
      ) {};

    ueberauth_google = ueberauth_google_0_2_0;

    ueberauth_identity_0_2_2 = callPackage
      (
        {
          buildMix, fetchHex, ueberauth_0_2_0, poison_1_5_2, plug_1_1_1
        }:
          buildMix {
            name = "ueberauth_identity";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ueberauth_identity";
              version = "0.2.2";
              sha256 =
                "6c3d7e5917a5030f737152cc86af4c7066a66a30aea049562c687e5af51bee82";
            };
            beamDeps  = [ ueberauth_0_2_0 poison_1_5_2 plug_1_1_1 ];

            meta = {
              description = ''An Ueberauth strategy for basic
                            username/password'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/ueberauth_identity";
            };
          }
      ) {};

    ueberauth_identity = ueberauth_identity_0_2_2;

    ueberauth_slack_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, ueberauth_0_2_0, oauth2_0_5_0 }:
          buildMix {
            name = "ueberauth_slack";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ueberauth_slack";
              version = "0.2.0";
              sha256 =
                "1b109ed50d34b3a18d5db04234475baa3ae08893b46a7b5a1726fec4adb6753b";
            };
            beamDeps  = [ ueberauth_0_2_0 oauth2_0_5_0 ];

            meta = {
              description = ''An Ueberauth strategy for using Slack to
                            authenticate your users'';

            };
          }
      ) {};

    ueberauth_slack = ueberauth_slack_0_2_0;

    ueberauth_twitter_0_2_2 = callPackage
      (
        {  buildMix, fetchHex, ueberauth_0_2_0, httpoison_0_8_1 }:
          buildMix {
            name = "ueberauth_twitter";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ueberauth_twitter";
              version = "0.2.2";
              sha256 =
                "911a227b8290e8d65cee8d45015477d4ea51dbcf637c8a41ff88b34fcc5ab65a";
            };
            beamDeps  = [ ueberauth_0_2_0 httpoison_0_8_1 ];

            meta = {
              description = ''An Uberauth strategy for Twitter
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/ueberauth_twitter";
            };
          }
      ) {};

    ueberauth_twitter = ueberauth_twitter_0_2_2;

    ui_0_1_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "ui";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ui";
              version = "0.1.1";
              sha256 =
                "492da59ca39055c0dfc794a2ebd564adb9ed635402c7b46659981f32aa9d94c1";
            };

            meta = {
              description = ''An OTP application'';

            };
          }
      ) {};

    ui = ui_0_1_1;

    uk_postcode_0_3_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "uk_postcode";
            version = "0.3.0";
            src = fetchHex {
              pkg = "uk_postcode";
              version = "0.3.0";
              sha256 =
                "a03250f6896bef8851f243856d36952e7776a8d2fa654aa4d3336d841cbb59f8";
            };

            meta = {
              longDescription = ''UK postcode parsing and validation library.
                                Validate full postcodes or parts of a postcode,
                                and can extract parts of a full postcode. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KushalP/uk_postcode";
            };
          }
      ) {};

    uk_postcode = uk_postcode_0_3_0;

    ulitos_0_3_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "ulitos";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ulitos";
              version = "0.3.0";
              sha256 =
                "385f5fdc4cb2ea9f2ae3abcdec3f8dcbb120095f9d50acfd4ee58ecef18429d3";
            };

            meta = {
              description = ''Erlang common utils'';

              homepage = "https://github.com/palkan/ulitos";
            };
          }
      ) {};

    ulitos = ulitos_0_3_0;

    unit_fun_0_5_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "unit_fun";
            version = "0.5.1";
            src = fetchHex {
              pkg = "unit_fun";
              version = "0.5.1";
              sha256 =
                "adc90b1e6363234d2507b6f1af08186831fb556ee8c8cb62d13fb03b8c3cc93c";
            };

            meta = {
              description = ''Library for adding units/dimensions to numeric
                            types.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meadsteve/unit_fun";
            };
          }
      ) {};

    unit_fun = unit_fun_0_5_1;

    units_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "units";
            version = "1.0.0";
            src = fetchHex {
              pkg = "units";
              version = "1.0.0";
              sha256 =
                "edac76cb036b993ef35781701fc561b4a6c95e4d7c89dba0d6f96ae3077b8ffe";
            };

            meta = {
              description = ''Common unit conversions for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/solatis/units";
            };
          }
      ) {};

    units = units_1_0_0;

    unsplash_0_3_0 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, oauth2_0_5_0, httpoison_0_8_1
        }:
          buildMix {
            name = "unsplash";
            version = "0.3.0";
            src = fetchHex {
              pkg = "unsplash";
              version = "0.3.0";
              sha256 =
                "609ded0d452729df1d6272ca7997a6bd6fb65821606f17d078c73a1b2ecbc37a";
            };
            beamDeps  = [ poison_1_5_2 oauth2_0_5_0 httpoison_0_8_1 ];

            meta = {
              description = ''Unsplash API in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/waynehoover/unsplash-elixir";
            };
          }
      ) {};

    unsplash = unsplash_0_3_0;

    upyun_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "upyun";
            version = "0.0.1";
            src = fetchHex {
              pkg = "upyun";
              version = "0.0.1";
              sha256 =
                "a5276f371b667efb1da6e48828279963b23d6eb4b5a5225e6f3e19c77c4e4851";
            };

            meta = {
              description = ''UPYun sdk for Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Hor/upyun-elixir";
            };
          }
      ) {};

    upyun = upyun_0_0_1;

    uri_0_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "uri";
            version = "0.1.0";
            src = fetchHex {
              pkg = "uri";
              version = "0.1.0";
              sha256 =
                "3833c3b5745fc0822df86c3a3591219048026fea8a535223b440d26029218996";
            };

            meta = {
              description = ''URI Parsing/Encoding Library'';

            };
          }
      ) {};

    uri = uri_0_1_0;

    uri_template_1_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "uri_template";
            version = "1.2.0";
            src = fetchHex {
              pkg = "uri_template";
              version = "1.2.0";
              sha256 =
                "c1c97235b8571703926e77449cb272f8ae3a0710b6c91099ec6f66f44425a8c0";
            };

            meta = {
              description = ''RFC 6570 complient URI template processor'';
              license = stdenv.lib.licenses.free;
            };
          }
      ) {};

    uri_template = uri_template_1_2_0;

    urilib_0_1_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "urilib";
            version = "0.1.1";
            src = fetchHex {
              pkg = "urilib";
              version = "0.1.1";
              sha256 =
                "6000180e6977263e5996921f243e0c152aad29c87d202f8a650acb412c5aa758";
            };

            meta = {
              description = ''A RFC-3986 URI Library for parsing and building
                            URIs'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/gmr/urilib";
            };
          }
      ) {};

    urilib = urilib_0_1_1;

    url_unroller_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1 }:
          buildMix {
            name = "url_unroller";
            version = "0.0.2";
            src = fetchHex {
              pkg = "url_unroller";
              version = "0.0.2";
              sha256 =
                "9e12c97ff7b45e457734293cabfdd1e60dbfe3d4f80ec7706814a84b61cf11ec";
            };
            beamDeps  = [ httpoison_0_8_1 ];

            meta = {
              description = ''A simple url unroller/unshortener'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/semanticart/url_unroller";
            };
          }
      ) {};

    url_unroller = url_unroller_0_0_2;

    urna_0_1_4 = callPackage
      (
        {  buildMix, fetchHex, cauldron_0_1_5, jazz_0_2_1 }:
          buildMix {
            name = "urna";
            version = "0.1.4";
            src = fetchHex {
              pkg = "urna";
              version = "0.1.4";
              sha256 =
                "46f531370376bd4730cf7c17eede9b9b92ce46c5a57e9ce1e129fcc17a2b2848";
            };
            beamDeps  = [ cauldron_0_1_5 jazz_0_2_1 ];

            meta = {
              description = ''REST in peace'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/urna";
            };
          }
      ) {};

    urna = urna_0_1_4;

    uuid_0_1_5 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "uuid";
            version = "0.1.5";
            src = fetchHex {
              pkg = "uuid";
              version = "0.1.5";
              sha256 =
                "5cfb91972f5cacb0bcb2f00414d5747dd575d84b864c96f668ab3b729cc08422";
            };

            meta = {
              description = ''UUID generator and utilities for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zyro/elixir-uuid";
            };
          }
      ) {};

    uuid_1_1_3 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "uuid";
            version = "1.1.3";
            src = fetchHex {
              pkg = "uuid";
              version = "1.1.3";
              sha256 =
                "dab67ed70fc162595e63b84c38904fb2ea1779909b46a5f61753ba7ddbe9877b";
            };

            meta = {
              description = ''UUID generator and utilities for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zyro/elixir-uuid";
            };
          }
      ) {};

    uuid = uuid_1_1_3;

    uuid_erl_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex, quickrand_1_5_1 }:
          buildRebar3 {
            name = "uuid_erl";
            version = "1.5.1";
            src = fetchHex {
              pkg = "uuid_erl";
              version = "1.5.1";
              sha256 =
                "fd2a8d90693631455073d4ae2b34fdb9d58da30c0ee0e63149fbf320c71b74fa";
            };

            beamDeps  = [ quickrand_1_5_1 ];

            meta = {
              description = ''Erlang UUID Implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/okeuday/uuid";
            };
          }
      ) {};

    uuid_erl = uuid_erl_1_5_1;

    vagrant_0_0_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "vagrant";
            version = "0.0.1";
            src = fetchHex {
              pkg = "vagrant";
              version = "0.0.1";
              sha256 =
                "805a78a9ee586546d0716ddc9afc3417630c48faab4606cf54c863b10a05ce52";
            };

            meta = {
              description = ''Vagrant CLI Wrapper'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mobileoverlord/vagrant";
            };
          }
      ) {};

    vagrant = vagrant_0_0_1;

    valid_field_0_3_0 = callPackage
      (
        {  buildMix, fetchHex, ecto_2_0_0_beta_0 }:
          buildMix {
            name = "valid_field";
            version = "0.3.0";
            src = fetchHex {
              pkg = "valid_field";
              version = "0.3.0";
              sha256 =
                "258591717d45835be4f3b299a2c332dc33702876c272f2fff455956c4a5409dc";
            };
            beamDeps  = [ ecto_2_0_0_beta_0 ];

            meta = {
              description = ''ValidField aids unit testing a changeset for
                            valid (and invalid) fields'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dockyard/valid_field";
            };
          }
      ) {};

    valid_field = valid_field_0_3_0;

    varpool_1_5_1 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "varpool";
            version = "1.5.1";
            src = fetchHex {
              pkg = "varpool";
              version = "1.5.1";
              sha256 =
                "ff6059bdcd0efad606e8c54ee623cfeaef59778c18e343dd772e84d99d188e26";
            };

            meta = {
              description = ''Erlang Process Pools as a Local Variable'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/okeuday/varpool";
            };
          }
      ) {};

    varpool = varpool_1_5_1;

    verify_origin_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "verify_origin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "verify_origin";
              version = "0.1.0";
              sha256 =
                "90834033676cb0ca632f208f489f6eb92ae94323fe7243efba577e1deb031167";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              description = ''A library for using Origin header checking to
                            prevent CSRF'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danmcclain/verify_origin";
            };
          }
      ) {};

    verify_origin = verify_origin_0_1_0;

    verk_0_9_6 = callPackage
      (
        {
          buildMix,
          fetchHex,
          timex_1_0_1,
          redix_0_3_4,
          poolboy_1_5_1,
          poison_1_5_2
        }:
          buildMix {
            name = "verk";
            version = "0.9.6";
            src = fetchHex {
              pkg = "verk";
              version = "0.9.6";
              sha256 =
                "a8b021d474d199c946fc6b7b38053218d8157faa60e9068c18db86ea5a978869";
            };
            beamDeps  = [ timex_1_0_1 redix_0_3_4 poolboy_1_5_1 poison_1_5_2
                      ];

            meta = {
              description = ''Verk is a job processing system backed by
                            Redis.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/verk";
            };
          }
      ) {};

    verk = verk_0_9_6;

    verk_web_0_9_1 = callPackage
      (
        {
          buildMix,
          fetchHex,
          verk_0_9_6,
          phoenix_html_2_5_0,
          phoenix_1_1_4,
          gettext_0_10_0,
          cowboy_1_0_4
        }:
          buildMix {
            name = "verk_web";
            version = "0.9.1";
            src = fetchHex {
              pkg = "verk_web";
              version = "0.9.1";
              sha256 =
                "71eb5c4ab6f73676b21c24b1ba86a3c11a1979339d83ab52a77a3be70da6e61b";
            };
            beamDeps  = [
                          verk_0_9_6
                          phoenix_html_2_5_0
                          phoenix_1_1_4
                          gettext_0_10_0
                          cowboy_1_0_4
                        ];

            meta = {
              description = ''A Verk dashboard'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/verk_web";
            };
          }
      ) {};

    verk_web = verk_web_0_9_1;

    vex_0_5_5 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "vex";
            version = "0.5.5";
            src = fetchHex {
              pkg = "vex";
              version = "0.5.5";
              sha256 =
                "fade5440a742304214d1cb53d5ce6bd39dafb6e2ae87e5ce36041a7aa4c365f9";
            };

            meta = {
              description = ''An extensible data validation library for
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CargoSense/vex";
            };
          }
      ) {};

    vex = vex_0_5_5;

    viktor_0_0_5 = callPackage
      (
        {  buildMix, fetchHex, poison_2_1_0, httpoison_0_8_1 }:
          buildMix {
            name = "viktor";
            version = "0.0.5";
            src = fetchHex {
              pkg = "viktor";
              version = "0.0.5";
              sha256 =
                "df49c25a93ea36d6f65b25716c894a9479ab6f990ed138170bdeea2930ef6cec";
            };
            beamDeps  = [ poison_2_1_0 httpoison_0_8_1 ];

            meta = {
              description = ''Client API wrapper for League of Legends API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/josephyi/viktor";
            };
          }
      ) {};

    viktor = viktor_0_0_5;

    vimeo_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_7_5 }:
          buildMix {
            name = "vimeo";
            version = "0.0.2";
            src = fetchHex {
              pkg = "vimeo";
              version = "0.0.2";
              sha256 =
                "62adf724e67b6fefa2ecc2fcc770e320f4133676cf67cd68a39e5ca45ddd3377";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_7_5 ];

            meta = {
              description = ''Vimeo API v3 client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lilfaf/vimeo.ex";
            };
          }
      ) {};

    vimeo = vimeo_0_0_2;

    virus_total_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, jsx_2_8_0, httpoison_0_8_1 }:
          buildMix {
            name = "virus_total";
            version = "0.0.1";
            src = fetchHex {
              pkg = "virus_total";
              version = "0.0.1";
              sha256 =
                "bed3680d17c98f978a90f5b443b6e269ee0a3f2239d2262502d8d10ee042ebfa";
            };
            beamDeps  = [ jsx_2_8_0 httpoison_0_8_1 ];

            meta = {
              description = ''Elixir OTP application for the VirusTotal Public
                            API v2.0'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dtykocki/virus_total";
            };
          }
      ) {};

    virus_total = virus_total_0_0_1;

    voorhees_0_1_1 = callPackage
      (
        {  buildMix, fetchHex, poison_2_1_0, ex_doc_0_11_4 }:
          buildMix {
            name = "voorhees";
            version = "0.1.1";
            src = fetchHex {
              pkg = "voorhees";
              version = "0.1.1";
              sha256 =
                "0cacff8371280ede205633691a60604f1c3d771508f9b7ffa83d523526326112";
            };
            beamDeps  = [ poison_2_1_0 ex_doc_0_11_4 ];

            meta = {
              description = ''A library for validating JSON responses'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danmcclain/voorhees";
            };
          }
      ) {};

    voorhees = voorhees_0_1_1;

    watcher_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "watcher";
            version = "1.0.0";
            src = fetchHex {
              pkg = "watcher";
              version = "1.0.0";
              sha256 =
                "53620951438e857d24f1ef324f94f42b90e8d6069dd6553ec4e6331370418b2b";
            };

            meta = {
              description = ''Watcher for GenEvent'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/watcher";
            };
          }
      ) {};

    watcher = watcher_1_0_0;

    wayback_archiver_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, httpotion_2_1_0, floki_0_7_1 }:
          buildMix {
            name = "wayback_archiver";
            version = "0.0.1";
            src = fetchHex {
              pkg = "wayback_archiver";
              version = "0.0.1";
              sha256 =
                "9f8bea06d6dcac6c017a3a41859373c10a1b46fb133db47300c2ae7c9fada590";
            };
            beamDeps  = [ httpotion_2_1_0 floki_0_7_1 ];

            meta = {
              description = ''Send URLs to Wayback Machine'';
              license = stdenv.lib.licenses.free;
            };
          }
      ) {};

    wayback_archiver = wayback_archiver_0_0_1;

    web_socket_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_4_0, plug_0_12_2, cowboy_1_0_4 }:
          buildMix {
            name = "web_socket";
            version = "0.0.1";
            src = fetchHex {
              pkg = "web_socket";
              version = "0.0.1";
              sha256 =
                "b0afdac11840d17b2a2af5cc1939416fac13f64209083e06e6873002ae44ce12";
            };
            beamDeps  = [ poison_1_4_0 plug_0_12_2 cowboy_1_0_4 ];

            meta = {
              description = ''Modular web framework '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/plug-web-socket";
            };
          }
      ) {};

    web_socket = web_socket_0_0_1;

    webassembly_0_6_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "webassembly";
            version = "0.6.1";
            src = fetchHex {
              pkg = "webassembly";
              version = "0.6.1";
              sha256 =
                "687cc567c6c58e154ca5f5bd45986c6fda530c42702ab7c6007f6cb663db4137";
            };

            meta = {
              longDescription = ''WebAssembly is a web DSL for Elixir. You
                                create html structure straight using do blocks.
                                Means, you can intermix html-building blocks
                                with full Elixir syntax. DSL output is an
                                iolist, which you can flatten to string, but
                                better use is to just feed it to the socket (via
                                Plug & Cowboy). WebAssembly aims to have 100%
                                test coverage.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/herenowcoder/webassembly";
            };
          }
      ) {};

    webassembly = webassembly_0_6_1;

    webdriver_0_8_1 = callPackage
      (
        {  buildMix, fetchHex, jazz_0_2_1, httpotion_2_2_0 }:
          buildMix {
            name = "webdriver";
            version = "0.8.1";
            src = fetchHex {
              pkg = "webdriver";
              version = "0.8.1";
              sha256 =
                "fe2009920fb210cd50df3a7d2bb40cd6f2844a538d52a48952f18008e1c5f3d3";
            };
            beamDeps  = [ jazz_0_2_1 httpotion_2_2_0 ];

            meta = {
              description = ''Webdriver protocol for driving web browsers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stuart/elixir-webdriver";
            };
          }
      ) {};

    webdriver = webdriver_0_8_1;

    weber_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "weber";
            version = "0.1.0";
            src = fetchHex {
              pkg = "weber";
              version = "0.1.0";
              sha256 =
                "742c45b3c99e207dd0aeccb818edd2ace4af10699c96fbcee0ce2f692dc5fe12";
            };

            meta = {
              description = ''weber - is Elixir MVC web framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elixir-web/weber";
            };
          }
      ) {};

    weber = weber_0_1_0;

    webpay_0_0_4 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "webpay";
            version = "0.0.4";
            src = fetchHex {
              pkg = "webpay";
              version = "0.0.4";
              sha256 =
                "abab40fc7fda25a55d3a3dce4327d3f322df378432a9ed5e7c43e553989f467e";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Elixir Webpay API wrapper'';

            };
          }
      ) {};

    webpay = webpay_0_0_4;

    websocket_client_1_1_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "websocket_client";
            version = "1.1.0";
            src = fetchHex {
              pkg = "websocket_client";
              version = "1.1.0";
              sha256 =
                "21c3d0df073634f2ca349af5b54a61755d637d6390c34d8d57c064f68ca92acd";
            };

            meta = {
              description = ''Erlang websocket client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sanmiguel/websocket_client";
            };
          }
      ) {};

    websocket_client = websocket_client_1_1_0;

    wechat_check_signature_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "wechat_check_signature";
            version = "0.0.1";
            src = fetchHex {
              pkg = "wechat_check_signature";
              version = "0.0.1";
              sha256 =
                "5c5bb053c15082e12ad6da485fc4f711efa9198107368a42456aeafcf870caec";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              description = ''An Elixir Plug for checking wechat signature.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/octocandy/wechat_check_signature";
            };
          }
      ) {};

    wechat_check_signature = wechat_check_signature_0_0_1;

    wechatex_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1 }:
          buildMix {
            name = "wechatex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "wechatex";
              version = "0.0.1";
              sha256 =
                "211971a79d38326dbf5e603ee00165708eb17670f2a84e54df929191c6fef81c";
            };
            beamDeps  = [ plug_1_1_1 ];

            meta = {
              description = ''Wechat plugins for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/octocandy/wechatex";
            };
          }
      ) {};

    wechatex = wechatex_0_0_1;

    weebo_0_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "weebo";
            version = "0.1.2";
            src = fetchHex {
              pkg = "weebo";
              version = "0.1.2";
              sha256 =
                "335367353f5675f3ce0ced41512b554da0f986efc4064479d403726c0a169231";
            };

            meta = {
              description = ''An XML-RPC parser/formatter for Elixir, with full
                            support for datatype mapping!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stevenschobert/weebo";
            };
          }
      ) {};

    weebo = weebo_0_1_2;

    white_bread_2_5_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "white_bread";
            version = "2.5.0";
            src = fetchHex {
              pkg = "white_bread";
              version = "2.5.0";
              sha256 =
                "0256755080fadfbd45285ace5279147a6f8af3df2ae89eed70b5072471f21360";
            };

            meta = {
              longDescription = ''Story BDD tool based on cucumber. Parses
                                Gherkin formatted feature files and executes
                                them as tests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meadsteve/white-bread";
            };
          }
      ) {};

    white_bread = white_bread_2_5_0;

    wifi_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, poison_1_4_0, httpoison_0_8_1 }:
          buildMix {
            name = "wifi";
            version = "0.2.0";
            src = fetchHex {
              pkg = "wifi";
              version = "0.2.0";
              sha256 =
                "0060d0dda9308e9dc652e83f7646485d932188a11e17fb814125ccd7449effc5";
            };
            beamDeps  = [ poison_1_4_0 httpoison_0_8_1 ];

            meta = {
              longDescription = ''Various utility functions for working with
                                the local Wifi network in Elixir. These
                                functions are mostly useful in scripts that
                                could benefit from knowing the current location
                                of the computer or the Wifi surroundings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gausby/wifi";
            };
          }
      ) {};

    wifi = wifi_0_2_0;

    wire_0_2_0 = callPackage
      (
        {  buildMix, fetchHex, bencoder_0_0_7 }:
          buildMix {
            name = "wire";
            version = "0.2.0";
            src = fetchHex {
              pkg = "wire";
              version = "0.2.0";
              sha256 =
                "0a2ce1329c321bd675a79152e3ed2e99cc59b3747112498e62b14bf686ca7fba";
            };
            beamDeps  = [ bencoder_0_0_7 ];

            meta = {
              description = ''Encode and decode bittorrent peer wire protocol
                            messages'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alehander42/wire";
            };
          }
      ) {};

    wire = wire_0_2_0;

    witchcraft_0_4_2 = callPackage
      (
        {  buildMix, fetchHex, quark_1_0_2, algae_0_9_1 }:
          buildMix {
            name = "witchcraft";
            version = "0.4.2";
            src = fetchHex {
              pkg = "witchcraft";
              version = "0.4.2";
              sha256 =
                "cdd6379d5a8b0baab3b79b0c9b87473d8292e0d9a80fa2e21fac61d31218609f";
            };
            beamDeps  = [ quark_1_0_2 algae_0_9_1 ];

            meta = {
              description = ''Common algebraic structures and functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/robot-overlord/witchcraft";
            };
          }
      ) {};

    witchcraft = witchcraft_0_4_2;

    wizard_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "wizard";
            version = "0.1.0";
            src = fetchHex {
              pkg = "wizard";
              version = "0.1.0";
              sha256 =
                "cc22faf9e76f50592906b816027fef4ee1942a59005cf8c831c7f76e48b9193e";
            };

            meta = {
              description = ''Wizard is a math and statistics library for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/raywan/wizard";
            };
          }
      ) {};

    wizard = wizard_0_1_0;

    wizardry_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, plug_1_1_1, comeonin_1_6_0 }:
          buildMix {
            name = "wizardry";
            version = "0.0.1";
            src = fetchHex {
              pkg = "wizardry";
              version = "0.0.1";
              sha256 =
                "4a85b8c3e5813dee20aa0d5503811568743644883723c9b226436616c9a779a3";
            };
            beamDeps  = [ plug_1_1_1 comeonin_1_6_0 ];

            meta = {
              description = ''Simple, low-level user account framework for
                            Phoenix Framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/knrz/wizardry";
            };
          }
      ) {};

    wizardry = wizardry_0_0_1;

    work_queue_0_0_3 = callPackage
      (
        {  buildMix, fetchHex, pipe_while_ok_0_0_2 }:
          buildMix {
            name = "work_queue";
            version = "0.0.3";
            src = fetchHex {
              pkg = "work_queue";
              version = "0.0.3";
              sha256 =
                "31b000cf454ee0a8f90408ea10c33ee6cdd062256a7dd3aac7fe67c48fcbb424";
            };
            beamDeps  = [ pipe_while_ok_0_0_2 ];

            meta = {
              description = ''A simple implement of the Hungry Consumer model
                            of concurrent servers. '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/work_queue";
            };
          }
      ) {};

    work_queue = work_queue_0_0_3;

    worker_pool_1_0_4 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "worker_pool";
            version = "1.0.4";
            src = fetchHex {
              pkg = "worker_pool";
              version = "1.0.4";
              sha256 =
                "7854a3b94e9624728db3a0475d00e7d0728adf3bf2ee3802bbf8ca10356d6f64";
            };

            meta = {
              description = ''Erlang Worker Pool'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/inaka/worker_pool";
            };
          }
      ) {};

    worker_pool = worker_pool_1_0_4;

    workex_0_10_0 = callPackage
      (
        {  buildMix, fetchHex, exactor_2_2_0 }:
          buildMix {
            name = "workex";
            version = "0.10.0";
            src = fetchHex {
              pkg = "workex";
              version = "0.10.0";
              sha256 =
                "9bb48e3ff0294021ecc78d86d4a7521dbe46e129ae9e51a46c9f2a67a63e9cbd";
            };
            beamDeps  = [ exactor_2_2_0 ];

            meta = {
              description = ''A behaviour for simple flow control and
                            backpressure.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/workex";
            };
          }
      ) {};

    workex = workex_0_10_0;

    workshop_0_5_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "workshop";
            version = "0.5.1";
            src = fetchHex {
              pkg = "workshop";
              version = "0.5.1";
              sha256 =
                "f6eaab9360764e83cca6892d939357e505fe163412b22acca7ea4fe307c8bed2";
            };

            meta = {
              longDescription = ''Mix tasks for creating and running
                                interactive workshops for teaching people how to
                                program in Elixir, and other things.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gausby/workshop";
            };
          }
      ) {};

    workshop = workshop_0_5_1;

    world_json_0_1_5 = callPackage
      (
        {  buildMix, fetchHex, poison_1_3_1 }:
          buildMix {
            name = "world_json";
            version = "0.1.5";
            src = fetchHex {
              pkg = "world_json";
              version = "0.1.5";
              sha256 =
                "3a960d9794627a1927f7410185bf36c22d6b4d8f079bf74e131d0f5606b7f567";
            };
            beamDeps  = [ poison_1_3_1 ];

            meta = {
              description = ''topojson country and state/province collections
                            for elixir/erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/world_json_ex";
            };
          }
      ) {};

    world_json = world_json_0_1_5;

    wpa_supplicant_0_1_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "wpa_supplicant";
            version = "0.1.0";
            src = fetchHex {
              pkg = "wpa_supplicant";
              version = "0.1.0";
              sha256 =
                "8a73ca51203401755d42ba636918106540aa3723006dab344dc8a7ec8fa2f3d5";
            };

            meta = {
              longDescription = ''Elixir interface to the wpa_supplicant
                                daemon. The wpa_supplicant provides application
                                support for scanning for access points, managing
                                Wi-Fi connections, and handling all of the
                                security and other parameters associated with
                                Wi-Fi. '';
              license = with stdenv.lib.licenses; [ asl20 free ];
              homepage = "https://github.com/fhunleth/wpa_supplicant.ex";
            };
          }
      ) {};

    wpa_supplicant = wpa_supplicant_0_1_0;

    wykop_api_0_0_4 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "wykop_api";
            version = "0.0.4";
            src = fetchHex {
              pkg = "wykop_api";
              version = "0.0.4";
              sha256 =
                "0c2acade581168e5cdf3d1dbde53183bc1c49882c8ba8793e045f20d5a9a26d0";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Library for Wykop API.'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/remiq/wykop_api_elixir";
            };
          }
      ) {};

    wykop_api = wykop_api_0_0_4;

    xe_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, httpoison_0_8_1, floki_0_7_1 }:
          buildMix {
            name = "xe";
            version = "0.0.1";
            src = fetchHex {
              pkg = "xe";
              version = "0.0.1";
              sha256 =
                "53d693612db1343c36a7bbe6286c23f7ccfdbd44500c2a38970743238d230a77";
            };
            beamDeps  = [ httpoison_0_8_1 floki_0_7_1 ];

            meta = {
              description = ''Real time conversion for currencies'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/paulodiniz/xe";
            };
          }
      ) {};

    xe = xe_0_0_1;

    xfighter_0_2_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "xfighter";
            version = "0.2.1";
            src = fetchHex {
              pkg = "xfighter";
              version = "0.2.1";
              sha256 =
                "67bb43379cd89b4b95f65f02ad5421719723d262fdbe7e399fb82ac7f3b490a8";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''An API wrapper for the programming game
                            Stockfighter.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitchef/xfighter";
            };
          }
      ) {};

    xfighter = xfighter_0_2_1;

    xlsx_parser_0_0_4 = callPackage
      (
        {
          buildMix,
          fetchHex,
          timex_1_0_1,
          sweet_xml_0_5_1,
          simple_agent_0_0_7
        }:
          buildMix {
            name = "xlsx_parser";
            version = "0.0.4";
            src = fetchHex {
              pkg = "xlsx_parser";
              version = "0.0.4";
              sha256 =
                "53d86e1142483421d5c1fe769f69980560a6809ca37a13c3dcd4c49fee46a831";
            };
            beamDeps  = [ timex_1_0_1 sweet_xml_0_5_1 simple_agent_0_0_7 ];

            meta = {
              longDescription = ''Simple parsing of xlsx spreadsheet data. Data
                                can be retrieved or written to csv.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/TheFirstAvenger/elixir-xlsx_parser.git";
            };
          }
      ) {};

    xlsx_parser = xlsx_parser_0_0_4;

    xml_builder_0_0_8 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "xml_builder";
            version = "0.0.8";
            src = fetchHex {
              pkg = "xml_builder";
              version = "0.0.8";
              sha256 =
                "51922bc50e0ef79c757d1016eda2a486f8688cd7307c4519102ea1fea4c5a3cd";
            };

            meta = {
              description = ''XML builder for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshnuss/xml_builder";
            };
          }
      ) {};

    xml_builder = xml_builder_0_0_8;

    xmlrpc_0_9_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "xmlrpc";
            version = "0.9.1";
            src = fetchHex {
              pkg = "xmlrpc";
              version = "0.9.1";
              sha256 =
                "b2f6941248fa2e55e89dcb69304f58a7cc4203ce68b986260836933be8fac879";
            };

            meta = {
              longDescription = ''XML-RPC encoder/decder for Elixir. Supports
                                all valid datatypes. Input (ie untrusted) is
                                parsed with erlsom against an xml-schema for
                                security.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ewildgoose/elixir-xml_rpc";
            };
          }
      ) {};

    xmlrpc = xmlrpc_0_9_1;

    xoauth2_0_0_3 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, mock_0_1_1, httpoison_0_8_1
        }:
          buildMix {
            name = "xoauth2";
            version = "0.0.3";
            src = fetchHex {
              pkg = "xoauth2";
              version = "0.0.3";
              sha256 =
                "4a43a0bca1707b579c6a141524666006dd25ed2efdc19aee5d6eeedf6efc3418";
            };
            beamDeps  = [ poison_1_5_2 mock_0_1_1 httpoison_0_8_1 ];

            meta = {
              description = ''A simple XOAuth2 module for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/craigp/elixir_xoauth2";
            };
          }
      ) {};

    xoauth2 = xoauth2_0_0_3;

    xref_runner_0_2_5 = callPackage
      (
        {  buildRebar3, fetchHex, getopt_0_8_2 }:
          buildRebar3 {
            name = "xref_runner";
            version = "0.2.5";
            src = fetchHex {
              pkg = "xref_runner";
              version = "0.2.5";
              sha256 =
                "12ca46c02789b0b2755284dedeb73aac0d9a3120c28c992040feb86766ee2c9a";
            };

            beamDeps  = [ getopt_0_8_2 ];

            meta = {
              description = ''Xref Runner'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/xref_runner";
            };
          }
      ) {};

    xref_runner = xref_runner_0_2_5;

    yahoo_fx_0_1_3 = callPackage
      (
        {
          buildMix,
          fetchHex,
          hackney_1_0_6,
          time_seer_0_0_5,
          httpoison_0_7_5
        }:
          buildMix {
            name = "yahoo_fx";
            version = "0.1.3";
            src = fetchHex {
              pkg = "yahoo_fx";
              version = "0.1.3";
              sha256 =
                "6f8691b2de712ea5e870f48291a2a2debd8ae8977e37480e69ce81f423e40479";
            };
            beamDeps  = [ hackney_1_0_6 time_seer_0_0_5 httpoison_0_7_5 ];

            meta = {
              longDescription = ''YahooFx is an Elixir library for getting
                                currency exchange rates from Yahoo Finance'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/yahoo_fx";
            };
          }
      ) {};

    yahoo_fx = yahoo_fx_0_1_3;

    yaml_elixir_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "yaml_elixir";
            version = "1.0.0";
            src = fetchHex {
              pkg = "yaml_elixir";
              version = "1.0.0";
              sha256 =
                "8d318d459561678bbe42bdcc7282ebe9dd7538f34045812054edf226634bf4a7";
            };

            meta = {
              description = ''Yaml parser for Elixir based on native Erlang
                            implementation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/yaml-elixir";
            };
          }
      ) {};

    yaml_elixir = yaml_elixir_1_0_0;

    yar_0_1_0 = callPackage
      (
        {  buildMix, fetchHex, socket_0_3_1 }:
          buildMix {
            name = "yar";
            version = "0.1.0";
            src = fetchHex {
              pkg = "yar";
              version = "0.1.0";
              sha256 =
                "23cdbe07714deee32a3d4be77e7c392ef57ab8ad28d10e053edf1cb0a136c2e6";
            };
            beamDeps  = [ socket_0_3_1 ];

            meta = {
              description = ''Yet Another Redis client (implemented in pure
                            elixir)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dantswain/yar";
            };
          }
      ) {};

    yar = yar_0_1_0;

    yggdrasil_1_1_0 = callPackage
      (
        {  buildMix, fetchHex, exredis_0_2_3, amqp_0_1_4 }:
          buildMix {
            name = "yggdrasil";
            version = "1.1.0";
            src = fetchHex {
              pkg = "yggdrasil";
              version = "1.1.0";
              sha256 =
                "f4412a82c09c09b70a9520f91113d9aa064f74b597ff5bdad6601ca7cf860f63";
            };
            beamDeps  = [ exredis_0_2_3 amqp_0_1_4 ];

            meta = {
              longDescription = ''Yggdrasil is an app to manage subscriptions
                                to several brokers. It has simple
                                implementations for Redis and RabbitMQ, but they
                                can easily be extended. Also provides a
                                `behaviour` to define custom brokers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmtprime/yggdrasil";
            };
          }
      ) {};

    yggdrasil = yggdrasil_1_1_0;

    yocingo_0_0_2 = callPackage
      (
        {
          buildMix, fetchHex, httpoison_0_8_1, exjsx_3_2_0, earmark_0_2_1
        }:
          buildMix {
            name = "yocingo";
            version = "0.0.2";
            src = fetchHex {
              pkg = "yocingo";
              version = "0.0.2";
              sha256 =
                "3ce350bb833e72edc684dc6ece956146161d4b7215cd9557f95bb2d7dcb1abf4";
            };
            beamDeps  = [ httpoison_0_8_1 exjsx_3_2_0 earmark_0_2_1 ];

            meta = {
              longDescription = ''This is a full Telegram Bot API. With this
                                module you can create your own Telegram Bot.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Yawolf/yocingo";
            };
          }
      ) {};

    yocingo = yocingo_0_0_2;

    yodlee_0_0_9 = callPackage
      (
        {
          buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1, hackney_1_4_8
        }:
          buildMix {
            name = "yodlee";
            version = "0.0.9";
            src = fetchHex {
              pkg = "yodlee";
              version = "0.0.9";
              sha256 =
                "4bc779bc847bfb39ebc04789116da830d049e0755a594d5d8f38dffc250cf69e";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 hackney_1_4_8 ];

            meta = {
              description = ''Yodlee API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/levanto-financial/yodlee-elixir";
            };
          }
      ) {};

    yodlee = yodlee_0_0_9;

    yomel_0_5_0 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "yomel";
            version = "0.5.0";
            src = fetchHex {
              pkg = "yomel";
              version = "0.5.0";
              sha256 =
                "737be278c9ae9ed40b24a45a461ea47b4979429e1d51b28961d43ee3a6426827";
            };
            compilePorts = true;

            meta = {
              description = ''Decodes yaml into elixir terms'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/yomel";
            };
          }
      ) {};

    yomel = yomel_0_5_0;

    ytx_0_0_5 = callPackage
      (
        {  buildMix, fetchHex, rapidax_0_0_3 }:
          buildMix {
            name = "ytx";
            version = "0.0.5";
            src = fetchHex {
              pkg = "ytx";
              version = "0.0.5";
              sha256 =
                "a30877517201e1c964627782345273fa7ae2157591d1ae6f5663333f370db6f6";
            };
            beamDeps  = [ rapidax_0_0_3 ];

            meta = {
              description = ''Youtube API Client for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/victorlcampos/ytx";
            };
          }
      ) {};

    ytx = ytx_0_0_5;

    yuri_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "yuri";
            version = "1.0.0";
            src = fetchHex {
              pkg = "yuri";
              version = "1.0.0";
              sha256 =
                "4a4c851f7ea20141201a9b69eaefb300b420e6c94a1513519aaef39f63d939c5";
            };

            meta = {
              description = ''Simple struct for representing URIs.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/kemonomachi/yuri";
            };
          }
      ) {};

    yuri = yuri_1_0_0;

    yyid_0_1_2 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "yyid";
            version = "0.1.2";
            src = fetchHex {
              pkg = "yyid";
              version = "0.1.2";
              sha256 =
                "37fb0acf8e7f30e66fbba18326b357aeaeb19b671b59d4beb8c8bd943370eeab";
            };

            meta = {
              longDescription = ''Generates random tokens that look like type 4
                                UUIDs: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/janlelis/yyid.ex";
            };
          }
      ) {};

    yyid = yyid_0_1_2;

    zanox_0_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_0, httpoison_0_8_0 }:
          buildMix {
            name = "zanox";
            version = "0.0.1";
            src = fetchHex {
              pkg = "zanox";
              version = "0.0.1";
              sha256 =
                "30af29400aaa0ff207ca4f24849d563c1691185faf86fc2c7f534b550175dee2";
            };
            beamDeps  = [ poison_1_5_0 httpoison_0_8_0 ];

            meta = {
              description = ''Zanox API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rafaelss/zanox";
            };
          }
      ) {};

    zanox = zanox_0_0_1;

    zarex_0_2_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "zarex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "zarex";
              version = "0.2.0";
              sha256 =
                "2e7d632116b1ec750ab2bd86e4936cc6f84a467c98a9507b4b3cf828f1edc1e1";
            };

            meta = {
              description = ''Filename sanitization for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ricn/zarex";
            };
          }
      ) {};

    zarex = zarex_0_2_0;

    zbase32_1_0_0 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "zbase32";
            version = "1.0.0";
            src = fetchHex {
              pkg = "zbase32";
              version = "1.0.0";
              sha256 =
                "bea25493cb512cf0d0ee4e1140c4dc276a27cc299c9b304117ec7b7e4af557b6";
            };

            meta = {
              longDescription = ''Efficient implementation of z-base-32, Phil
                                Zimmermann`s human-oriented base-32 encoding.
                                z-base-32 is a Base32 encoding designed to be
                                easier for human use and more compact. It
                                includes 1, 8 and 9 but excludes l, v and 2. It
                                also permutes the alphabet so that the easier
                                characters are the ones that occur more
                                frequently. It compactly encodes bitstrings
                                whose length in bits is not a multiple of 8, and
                                omits trailing padding characters. z-base-32 was
                                used in Mnet open source project, and is
                                currently used in Phil Zimmermann`s ZRTP
                                protocol, and in the Tahoe-LAFS open source
                                project.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pspdfkit-labs/zbase32";
            };
          }
      ) {};

    zbase32 = zbase32_1_0_0;

    zencoder_1_0_1 = callPackage
      (
        {  buildMix, fetchHex, poison_1_4_0, httpotion_1_0_0 }:
          buildMix {
            name = "zencoder";
            version = "1.0.1";
            src = fetchHex {
              pkg = "zencoder";
              version = "1.0.1";
              sha256 =
                "b2220575aa2ee1da5101774c82e1d68f2e5f86d6cefd6f04811c882fc05473bc";
            };
            beamDeps  = [ poison_1_4_0 httpotion_1_0_0 ];

            meta = {
              description = ''Elixir API wrapper for the Zencoder video
                            transcoding API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zencoder/zencoder-ex";
            };
          }
      ) {};

    zencoder = zencoder_1_0_1;

    zipcloudx_0_0_2 = callPackage
      (
        {  buildMix, fetchHex, poison_1_5_2, httpoison_0_8_1 }:
          buildMix {
            name = "zipcloudx";
            version = "0.0.2";
            src = fetchHex {
              pkg = "zipcloudx";
              version = "0.0.2";
              sha256 =
                "1e474ec0229b6dd1404c34fbd2a851d136d9549d5ecccbd01d017baac64b264e";
            };
            beamDeps  = [ poison_1_5_2 httpoison_0_8_1 ];

            meta = {
              description = ''Elixir zipcloud API wrapper'';

            };
          }
      ) {};

    zipcloudx = zipcloudx_0_0_2;

    zipper_0_1_5 = callPackage
      (
        {  buildRebar3, fetchHex }:
          buildRebar3 {
            name = "zipper";
            version = "0.1.5";
            src = fetchHex {
              pkg = "zipper";
              version = "0.1.5";
              sha256 =
                "7df5552f41169a8feb1a2e81e2753ec4e4debb7d48cdf1edc77037205782d547";
            };

            meta = {
              description = ''Generic Zipper Implementation for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/zipper";
            };
          }
      ) {};

    zipper = zipper_0_1_5;

    zipper_tree_0_1_1 = callPackage
      (
        {  buildMix, fetchHex }:
          buildMix {
            name = "zipper_tree";
            version = "0.1.1";
            src = fetchHex {
              pkg = "zipper_tree";
              version = "0.1.1";
              sha256 =
                "df6e81d6be9c9ac582bcde541e263d1379485f5cbb5b7cd1b55cd031fe7741ea";
            };

            meta = {
              description = ''Methods for travelsal and modification of Trees
                            using a zipper. '';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/Dkendal/zipper_tree";
            };
          }
      ) {};

    zipper_tree = zipper_tree_0_1_1;

  };
in stdenv.lib.fix' (stdenv.lib.extends overrides packages)